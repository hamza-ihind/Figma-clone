/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/layout",{

/***/ "(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2Fhome%2Fe11even%2FDesktop%2FFigma-clone%2Fapp%2Fglobals.css&modules=%2Fhome%2Fe11even%2FDesktop%2FFigma-clone%2Fapp%2FRoom.tsx&modules=%2Fhome%2Fe11even%2FDesktop%2FFigma-clone%2Fnode_modules%2Fnext%2Ffont%2Fgoogle%2Ftarget.css%3F%7B%22path%22%3A%22app%2Flayout.tsx%22%2C%22import%22%3A%22Work_Sans%22%2C%22arguments%22%3A%5B%7B%22subsets%22%3A%5B%22latin%22%5D%2C%22variable%22%3A%22--font-work-sans%22%2C%22weight%22%3A%5B%22400%22%2C%22600%22%2C%22700%22%5D%7D%5D%2C%22variableName%22%3A%22workSans%22%7D&server=false!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2Fhome%2Fe11even%2FDesktop%2FFigma-clone%2Fapp%2Fglobals.css&modules=%2Fhome%2Fe11even%2FDesktop%2FFigma-clone%2Fapp%2FRoom.tsx&modules=%2Fhome%2Fe11even%2FDesktop%2FFigma-clone%2Fnode_modules%2Fnext%2Ffont%2Fgoogle%2Ftarget.css%3F%7B%22path%22%3A%22app%2Flayout.tsx%22%2C%22import%22%3A%22Work_Sans%22%2C%22arguments%22%3A%5B%7B%22subsets%22%3A%5B%22latin%22%5D%2C%22variable%22%3A%22--font-work-sans%22%2C%22weight%22%3A%5B%22400%22%2C%22600%22%2C%22700%22%5D%7D%5D%2C%22variableName%22%3A%22workSans%22%7D&server=false! ***!

/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./app/globals.css */ \"(app-pages-browser)/./app/globals.css\"));\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./app/Room.tsx */ \"(app-pages-browser)/./app/Room.tsx\"));\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/font/google/target.css?{\"path\":\"app/layout.tsx\",\"import\":\"Work_Sans\",\"arguments\":[{\"subsets\":[\"latin\"],\"variable\":\"--font-work-sans\",\"weight\":[\"400\",\"600\",\"700\"]}],\"variableName\":\"workSans\"} */ \"(app-pages-browser)/./node_modules/next/font/google/target.css?{\\\"path\\\":\\\"app/layout.tsx\\\",\\\"import\\\":\\\"Work_Sans\\\",\\\"arguments\\\":[{\\\"subsets\\\":[\\\"latin\\\"],\\\"variable\\\":\\\"--font-work-sans\\\",\\\"weight\\\":[\\\"400\\\",\\\"600\\\",\\\"700\\\"]}],\\\"variableName\\\":\\\"workSans\\\"}\", 23))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtZmxpZ2h0LWNsaWVudC1lbnRyeS1sb2FkZXIuanM/bW9kdWxlcz0lMkZob21lJTJGZTExZXZlbiUyRkRlc2t0b3AlMkZGaWdtYS1jbG9uZSUyRmFwcCUyRmdsb2JhbHMuY3NzJm1vZHVsZXM9JTJGaG9tZSUyRmUxMWV2ZW4lMkZEZXNrdG9wJTJGRmlnbWEtY2xvbmUlMkZhcHAlMkZSb29tLnRzeCZtb2R1bGVzPSUyRmhvbWUlMkZlMTFldmVuJTJGRGVza3RvcCUyRkZpZ21hLWNsb25lJTJGbm9kZV9tb2R1bGVzJTJGbmV4dCUyRmZvbnQlMkZnb29nbGUlMkZ0YXJnZXQuY3NzJTNGJTdCJTIycGF0aCUyMiUzQSUyMmFwcCUyRmxheW91dC50c3glMjIlMkMlMjJpbXBvcnQlMjIlM0ElMjJXb3JrX1NhbnMlMjIlMkMlMjJhcmd1bWVudHMlMjIlM0ElNUIlN0IlMjJzdWJzZXRzJTIyJTNBJTVCJTIybGF0aW4lMjIlNUQlMkMlMjJ2YXJpYWJsZSUyMiUzQSUyMi0tZm9udC13b3JrLXNhbnMlMjIlMkMlMjJ3ZWlnaHQlMjIlM0ElNUIlMjI0MDAlMjIlMkMlMjI2MDAlMjIlMkMlMjI3MDAlMjIlNUQlN0QlNUQlMkMlMjJ2YXJpYWJsZU5hbWUlMjIlM0ElMjJ3b3JrU2FucyUyMiU3RCZzZXJ2ZXI9ZmFsc2UhIiwibWFwcGluZ3MiOiJBQUFBLDRKQUFzRjtBQUN0RixzSkFBbUY7QUFDbkYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLz8xZGNmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwiL2hvbWUvZTExZXZlbi9EZXNrdG9wL0ZpZ21hLWNsb25lL2FwcC9nbG9iYWxzLmNzc1wiKTtcbmltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwiL2hvbWUvZTExZXZlbi9EZXNrdG9wL0ZpZ21hLWNsb25lL2FwcC9Sb29tLnRzeFwiKTtcbmltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwiL2hvbWUvZTExZXZlbi9EZXNrdG9wL0ZpZ21hLWNsb25lL25vZGVfbW9kdWxlcy9uZXh0L2ZvbnQvZ29vZ2xlL3RhcmdldC5jc3M/e1xcXCJwYXRoXFxcIjpcXFwiYXBwL2xheW91dC50c3hcXFwiLFxcXCJpbXBvcnRcXFwiOlxcXCJXb3JrX1NhbnNcXFwiLFxcXCJhcmd1bWVudHNcXFwiOlt7XFxcInN1YnNldHNcXFwiOltcXFwibGF0aW5cXFwiXSxcXFwidmFyaWFibGVcXFwiOlxcXCItLWZvbnQtd29yay1zYW5zXFxcIixcXFwid2VpZ2h0XFxcIjpbXFxcIjQwMFxcXCIsXFxcIjYwMFxcXCIsXFxcIjcwMFxcXCJdfV0sXFxcInZhcmlhYmxlTmFtZVxcXCI6XFxcIndvcmtTYW5zXFxcIn1cIikiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2Fhome%2Fe11even%2FDesktop%2FFigma-clone%2Fapp%2Fglobals.css&modules=%2Fhome%2Fe11even%2FDesktop%2FFigma-clone%2Fapp%2FRoom.tsx&modules=%2Fhome%2Fe11even%2FDesktop%2FFigma-clone%2Fnode_modules%2Fnext%2Ffont%2Fgoogle%2Ftarget.css%3F%7B%22path%22%3A%22app%2Flayout.tsx%22%2C%22import%22%3A%22Work_Sans%22%2C%22arguments%22%3A%5B%7B%22subsets%22%3A%5B%22latin%22%5D%2C%22variable%22%3A%22--font-work-sans%22%2C%22weight%22%3A%5B%22400%22%2C%22600%22%2C%22700%22%5D%7D%5D%2C%22variableName%22%3A%22workSans%22%7D&server=false!\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/**\n * @license React\n * react-jsx-dev-runtime.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ \nif (true) {\n    (function() {\n        \"use strict\";\n        var React = __webpack_require__(/*! next/dist/compiled/react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n        // ATTENTION\n        // When adding new symbols to this file,\n        // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n        // The Symbol used to tag the ReactElement-like types.\n        var REACT_ELEMENT_TYPE = Symbol.for(\"react.element\");\n        var REACT_PORTAL_TYPE = Symbol.for(\"react.portal\");\n        var REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\");\n        var REACT_STRICT_MODE_TYPE = Symbol.for(\"react.strict_mode\");\n        var REACT_PROFILER_TYPE = Symbol.for(\"react.profiler\");\n        var REACT_PROVIDER_TYPE = Symbol.for(\"react.provider\");\n        var REACT_CONTEXT_TYPE = Symbol.for(\"react.context\");\n        var REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\");\n        var REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\");\n        var REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\");\n        var REACT_MEMO_TYPE = Symbol.for(\"react.memo\");\n        var REACT_LAZY_TYPE = Symbol.for(\"react.lazy\");\n        var REACT_OFFSCREEN_TYPE = Symbol.for(\"react.offscreen\");\n        var REACT_CACHE_TYPE = Symbol.for(\"react.cache\");\n        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\n        var FAUX_ITERATOR_SYMBOL = \"@@iterator\";\n        function getIteratorFn(maybeIterable) {\n            if (maybeIterable === null || typeof maybeIterable !== \"object\") {\n                return null;\n            }\n            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n            if (typeof maybeIterator === \"function\") {\n                return maybeIterator;\n            }\n            return null;\n        }\n        var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n        function error(format) {\n            {\n                {\n                    for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){\n                        args[_key2 - 1] = arguments[_key2];\n                    }\n                    printWarning(\"error\", format, args);\n                }\n            }\n        }\n        function printWarning(level, format, args) {\n            // When changing this logic, you might want to also\n            // update consoleWithStackDev.www.js as well.\n            {\n                var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n                var stack = ReactDebugCurrentFrame.getStackAddendum();\n                if (stack !== \"\") {\n                    format += \"%s\";\n                    args = args.concat([\n                        stack\n                    ]);\n                } // eslint-disable-next-line react-internal/safe-string-coercion\n                var argsWithFormat = args.map(function(item) {\n                    return String(item);\n                }); // Careful: RN currently depends on this prefix\n                argsWithFormat.unshift(\"Warning: \" + format); // We intentionally don't use spread (or .apply) directly because it\n                // breaks IE9: https://github.com/facebook/react/issues/13610\n                // eslint-disable-next-line react-internal/no-production-logging\n                Function.prototype.apply.call(console[level], console, argsWithFormat);\n            }\n        }\n        // -----------------------------------------------------------------------------\n        var enableScopeAPI = false; // Experimental Create Event Handle API.\n        var enableCacheElement = false;\n        var enableTransitionTracing = false; // No known bugs, but needs performance testing\n        var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n        // stuff. Intended to enable React core members to more easily debug scheduling\n        // issues in DEV builds.\n        var enableDebugTracing = false;\n        var REACT_CLIENT_REFERENCE$2 = Symbol.for(\"react.client.reference\");\n        function isValidElementType(type) {\n            if (typeof type === \"string\" || typeof type === \"function\") {\n                return true;\n            } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {\n                return true;\n            }\n            if (typeof type === \"object\" && type !== null) {\n                if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n                // types supported by any Flight configuration anywhere since\n                // we don't know which Flight build this will end up being used\n                // with.\n                type.$$typeof === REACT_CLIENT_REFERENCE$2 || type.getModuleId !== undefined) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        function getWrappedName(outerType, innerType, wrapperName) {\n            var displayName = outerType.displayName;\n            if (displayName) {\n                return displayName;\n            }\n            var functionName = innerType.displayName || innerType.name || \"\";\n            return functionName !== \"\" ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n        } // Keep in sync with react-reconciler/getComponentNameFromFiber\n        function getContextName(type) {\n            return type.displayName || \"Context\";\n        }\n        var REACT_CLIENT_REFERENCE$1 = Symbol.for(\"react.client.reference\"); // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n        function getComponentNameFromType(type) {\n            if (type == null) {\n                // Host root, text node or just invalid type.\n                return null;\n            }\n            if (typeof type === \"function\") {\n                if (type.$$typeof === REACT_CLIENT_REFERENCE$1) {\n                    // TODO: Create a convention for naming client references with debug info.\n                    return null;\n                }\n                return type.displayName || type.name || null;\n            }\n            if (typeof type === \"string\") {\n                return type;\n            }\n            switch(type){\n                case REACT_FRAGMENT_TYPE:\n                    return \"Fragment\";\n                case REACT_PORTAL_TYPE:\n                    return \"Portal\";\n                case REACT_PROFILER_TYPE:\n                    return \"Profiler\";\n                case REACT_STRICT_MODE_TYPE:\n                    return \"StrictMode\";\n                case REACT_SUSPENSE_TYPE:\n                    return \"Suspense\";\n                case REACT_SUSPENSE_LIST_TYPE:\n                    return \"SuspenseList\";\n                case REACT_CACHE_TYPE:\n                    {\n                        return \"Cache\";\n                    }\n            }\n            if (typeof type === \"object\") {\n                {\n                    if (typeof type.tag === \"number\") {\n                        error(\"Received an unexpected object in getComponentNameFromType(). \" + \"This is likely a bug in React. Please file an issue.\");\n                    }\n                }\n                switch(type.$$typeof){\n                    case REACT_CONTEXT_TYPE:\n                        var context = type;\n                        return getContextName(context) + \".Consumer\";\n                    case REACT_PROVIDER_TYPE:\n                        var provider = type;\n                        return getContextName(provider._context) + \".Provider\";\n                    case REACT_FORWARD_REF_TYPE:\n                        return getWrappedName(type, type.render, \"ForwardRef\");\n                    case REACT_MEMO_TYPE:\n                        var outerName = type.displayName || null;\n                        if (outerName !== null) {\n                            return outerName;\n                        }\n                        return getComponentNameFromType(type.type) || \"Memo\";\n                    case REACT_LAZY_TYPE:\n                        {\n                            var lazyComponent = type;\n                            var payload = lazyComponent._payload;\n                            var init = lazyComponent._init;\n                            try {\n                                return getComponentNameFromType(init(payload));\n                            } catch (x) {\n                                return null;\n                            }\n                        }\n                }\n            }\n            return null;\n        }\n        var assign = Object.assign;\n        // Helpers to patch console.logs to avoid logging during side-effect free\n        // replaying on render function. This currently only patches the object\n        // lazily which won't cover if the log function was extracted eagerly.\n        // We could also eagerly patch the method.\n        var disabledDepth = 0;\n        var prevLog;\n        var prevInfo;\n        var prevWarn;\n        var prevError;\n        var prevGroup;\n        var prevGroupCollapsed;\n        var prevGroupEnd;\n        function disabledLog() {}\n        disabledLog.__reactDisabledLog = true;\n        function disableLogs() {\n            {\n                if (disabledDepth === 0) {\n                    /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;\n                    prevInfo = console.info;\n                    prevWarn = console.warn;\n                    prevError = console.error;\n                    prevGroup = console.group;\n                    prevGroupCollapsed = console.groupCollapsed;\n                    prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n                    var props = {\n                        configurable: true,\n                        enumerable: true,\n                        value: disabledLog,\n                        writable: true\n                    }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n                    Object.defineProperties(console, {\n                        info: props,\n                        log: props,\n                        warn: props,\n                        error: props,\n                        group: props,\n                        groupCollapsed: props,\n                        groupEnd: props\n                    });\n                /* eslint-enable react-internal/no-production-logging */ }\n                disabledDepth++;\n            }\n        }\n        function reenableLogs() {\n            {\n                disabledDepth--;\n                if (disabledDepth === 0) {\n                    /* eslint-disable react-internal/no-production-logging */ var props = {\n                        configurable: true,\n                        enumerable: true,\n                        writable: true\n                    }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n                    Object.defineProperties(console, {\n                        log: assign({}, props, {\n                            value: prevLog\n                        }),\n                        info: assign({}, props, {\n                            value: prevInfo\n                        }),\n                        warn: assign({}, props, {\n                            value: prevWarn\n                        }),\n                        error: assign({}, props, {\n                            value: prevError\n                        }),\n                        group: assign({}, props, {\n                            value: prevGroup\n                        }),\n                        groupCollapsed: assign({}, props, {\n                            value: prevGroupCollapsed\n                        }),\n                        groupEnd: assign({}, props, {\n                            value: prevGroupEnd\n                        })\n                    });\n                /* eslint-enable react-internal/no-production-logging */ }\n                if (disabledDepth < 0) {\n                    error(\"disabledDepth fell below zero. \" + \"This is a bug in React. Please file an issue.\");\n                }\n            }\n        }\n        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\n        var prefix;\n        function describeBuiltInComponentFrame(name, source, ownerFn) {\n            {\n                if (prefix === undefined) {\n                    // Extract the VM specific prefix used by each line.\n                    try {\n                        throw Error();\n                    } catch (x) {\n                        var match = x.stack.trim().match(/\\n( *(at )?)/);\n                        prefix = match && match[1] || \"\";\n                    }\n                } // We use the prefix to ensure our stacks line up with native stack frames.\n                return \"\\n\" + prefix + name;\n            }\n        }\n        var reentry = false;\n        var componentFrameCache;\n        {\n            var PossiblyWeakMap = typeof WeakMap === \"function\" ? WeakMap : Map;\n            componentFrameCache = new PossiblyWeakMap();\n        }\n        /**\n * Leverages native browser/VM stack frames to get proper details (e.g.\n * filename, line + col number) for a single component in a component stack. We\n * do this by:\n *   (1) throwing and catching an error in the function - this will be our\n *       control error.\n *   (2) calling the component which will eventually throw an error that we'll\n *       catch - this will be our sample error.\n *   (3) diffing the control and sample error stacks to find the stack frame\n *       which represents our component.\n */ function describeNativeComponentFrame(fn, construct) {\n            // If something asked for a stack inside a fake render, it should get ignored.\n            if (!fn || reentry) {\n                return \"\";\n            }\n            {\n                var frame = componentFrameCache.get(fn);\n                if (frame !== undefined) {\n                    return frame;\n                }\n            }\n            reentry = true;\n            var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe[incompatible-type] It does accept undefined.\n            Error.prepareStackTrace = undefined;\n            var previousDispatcher;\n            {\n                previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n                // for warnings.\n                ReactCurrentDispatcher.current = null;\n                disableLogs();\n            }\n            /**\n   * Finding a common stack frame between sample and control errors can be\n   * tricky given the different types and levels of stack trace truncation from\n   * different JS VMs. So instead we'll attempt to control what that common\n   * frame should be through this object method:\n   * Having both the sample and control errors be in the function under the\n   * `DescribeNativeComponentFrameRoot` property, + setting the `name` and\n   * `displayName` properties of the function ensures that a stack\n   * frame exists that has the method name `DescribeNativeComponentFrameRoot` in\n   * it for both control and sample stacks.\n   */ var RunInRootFrame = {\n                DetermineComponentFrameRoot: function() {\n                    var control;\n                    try {\n                        // This should throw.\n                        if (construct) {\n                            // Something should be setting the props in the constructor.\n                            var Fake = function() {\n                                throw Error();\n                            }; // $FlowFixMe[prop-missing]\n                            Object.defineProperty(Fake.prototype, \"props\", {\n                                set: function() {\n                                    // We use a throwing setter instead of frozen or non-writable props\n                                    // because that won't throw in a non-strict mode function.\n                                    throw Error();\n                                }\n                            });\n                            if (typeof Reflect === \"object\" && Reflect.construct) {\n                                // We construct a different control for this case to include any extra\n                                // frames added by the construct call.\n                                try {\n                                    Reflect.construct(Fake, []);\n                                } catch (x) {\n                                    control = x;\n                                }\n                                Reflect.construct(fn, [], Fake);\n                            } else {\n                                try {\n                                    Fake.call();\n                                } catch (x) {\n                                    control = x;\n                                } // $FlowFixMe[prop-missing] found when upgrading Flow\n                                fn.call(Fake.prototype);\n                            }\n                        } else {\n                            try {\n                                throw Error();\n                            } catch (x) {\n                                control = x;\n                            } // TODO(luna): This will currently only throw if the function component\n                            // tries to access React/ReactDOM/props. We should probably make this throw\n                            // in simple components too\n                            var maybePromise = fn(); // If the function component returns a promise, it's likely an async\n                            // component, which we don't yet support. Attach a noop catch handler to\n                            // silence the error.\n                            // TODO: Implement component stacks for async client components?\n                            if (maybePromise && typeof maybePromise.catch === \"function\") {\n                                maybePromise.catch(function() {});\n                            }\n                        }\n                    } catch (sample) {\n                        // This is inlined manually because closure doesn't do it for us.\n                        if (sample && control && typeof sample.stack === \"string\") {\n                            return [\n                                sample.stack,\n                                control.stack\n                            ];\n                        }\n                    }\n                    return [\n                        null,\n                        null\n                    ];\n                }\n            }; // $FlowFixMe[prop-missing]\n            RunInRootFrame.DetermineComponentFrameRoot.displayName = \"DetermineComponentFrameRoot\";\n            var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, \"name\"); // Before ES6, the `name` property was not configurable.\n            if (namePropDescriptor && namePropDescriptor.configurable) {\n                // V8 utilizes a function's `name` property when generating a stack trace.\n                Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot, // is set to `false`.\n                // $FlowFixMe[cannot-write]\n                \"name\", {\n                    value: \"DetermineComponentFrameRoot\"\n                });\n            }\n            try {\n                var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(), sampleStack = _RunInRootFrame$Deter[0], controlStack = _RunInRootFrame$Deter[1];\n                if (sampleStack && controlStack) {\n                    // This extracts the first frame from the sample that isn't also in the control.\n                    // Skipping one frame that we assume is the frame that calls the two.\n                    var sampleLines = sampleStack.split(\"\\n\");\n                    var controlLines = controlStack.split(\"\\n\");\n                    var s = 0;\n                    var c = 0;\n                    while(s < sampleLines.length && !sampleLines[s].includes(\"DetermineComponentFrameRoot\")){\n                        s++;\n                    }\n                    while(c < controlLines.length && !controlLines[c].includes(\"DetermineComponentFrameRoot\")){\n                        c++;\n                    } // We couldn't find our intentionally injected common root frame, attempt\n                    // to find another common root frame by search from the bottom of the\n                    // control stack...\n                    if (s === sampleLines.length || c === controlLines.length) {\n                        s = sampleLines.length - 1;\n                        c = controlLines.length - 1;\n                        while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]){\n                            // We expect at least one stack frame to be shared.\n                            // Typically this will be the root most one. However, stack frames may be\n                            // cut off due to maximum stack limits. In this case, one maybe cut off\n                            // earlier than the other. We assume that the sample is longer or the same\n                            // and there for cut off earlier. So we should find the root most frame in\n                            // the sample somewhere in the control.\n                            c--;\n                        }\n                    }\n                    for(; s >= 1 && c >= 0; s--, c--){\n                        // Next we find the first one that isn't the same which should be the\n                        // frame that called our sample function and the control.\n                        if (sampleLines[s] !== controlLines[c]) {\n                            // In V8, the first line is describing the message but other VMs don't.\n                            // If we're about to return the first line, and the control is also on the same\n                            // line, that's a pretty good indicator that our sample threw at same line as\n                            // the control. I.e. before we entered the sample frame. So we ignore this result.\n                            // This can happen if you passed a class to function component, or non-function.\n                            if (s !== 1 || c !== 1) {\n                                do {\n                                    s--;\n                                    c--; // We may still have similar intermediate frames from the construct call.\n                                    // The next one that isn't the same should be our match though.\n                                    if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                                        // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                                        var _frame = \"\\n\" + sampleLines[s].replace(\" at new \", \" at \"); // If our component frame is labeled \"<anonymous>\"\n                                        // but we have a user-provided \"displayName\"\n                                        // splice it in to make the stack more readable.\n                                        if (fn.displayName && _frame.includes(\"<anonymous>\")) {\n                                            _frame = _frame.replace(\"<anonymous>\", fn.displayName);\n                                        }\n                                        if (true) {\n                                            if (typeof fn === \"function\") {\n                                                componentFrameCache.set(fn, _frame);\n                                            }\n                                        } // Return the line we found.\n                                        return _frame;\n                                    }\n                                }while (s >= 1 && c >= 0);\n                            }\n                            break;\n                        }\n                    }\n                }\n            } finally{\n                reentry = false;\n                {\n                    ReactCurrentDispatcher.current = previousDispatcher;\n                    reenableLogs();\n                }\n                Error.prepareStackTrace = previousPrepareStackTrace;\n            } // Fallback to just using the name if we couldn't make it throw.\n            var name = fn ? fn.displayName || fn.name : \"\";\n            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : \"\";\n            {\n                if (typeof fn === \"function\") {\n                    componentFrameCache.set(fn, syntheticFrame);\n                }\n            }\n            return syntheticFrame;\n        }\n        function describeFunctionComponentFrame(fn, source, ownerFn) {\n            {\n                return describeNativeComponentFrame(fn, false);\n            }\n        }\n        function shouldConstruct(Component) {\n            var prototype = Component.prototype;\n            return !!(prototype && prototype.isReactComponent);\n        }\n        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n            if (type == null) {\n                return \"\";\n            }\n            if (typeof type === \"function\") {\n                {\n                    return describeNativeComponentFrame(type, shouldConstruct(type));\n                }\n            }\n            if (typeof type === \"string\") {\n                return describeBuiltInComponentFrame(type);\n            }\n            switch(type){\n                case REACT_SUSPENSE_TYPE:\n                    return describeBuiltInComponentFrame(\"Suspense\");\n                case REACT_SUSPENSE_LIST_TYPE:\n                    return describeBuiltInComponentFrame(\"SuspenseList\");\n            }\n            if (typeof type === \"object\") {\n                switch(type.$$typeof){\n                    case REACT_FORWARD_REF_TYPE:\n                        return describeFunctionComponentFrame(type.render);\n                    case REACT_MEMO_TYPE:\n                        // Memo may contain any component type so we recursively resolve it.\n                        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n                    case REACT_LAZY_TYPE:\n                        {\n                            var lazyComponent = type;\n                            var payload = lazyComponent._payload;\n                            var init = lazyComponent._init;\n                            try {\n                                // Lazy may contain any component type so we recursively resolve it.\n                                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n                            } catch (x) {}\n                        }\n                }\n            }\n            return \"\";\n        }\n        // $FlowFixMe[method-unbinding]\n        var hasOwnProperty = Object.prototype.hasOwnProperty;\n        var loggedTypeFailures = {};\n        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n        function setCurrentlyValidatingElement$1(element) {\n            {\n                if (element) {\n                    var owner = element._owner;\n                    var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n                    ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\n                } else {\n                    ReactDebugCurrentFrame$1.setExtraStackFrame(null);\n                }\n            }\n        }\n        function checkPropTypes(typeSpecs, values, location, componentName, element) {\n            {\n                // $FlowFixMe[incompatible-use] This is okay but Flow doesn't know it.\n                var has = Function.call.bind(hasOwnProperty);\n                for(var typeSpecName in typeSpecs){\n                    if (has(typeSpecs, typeSpecName)) {\n                        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n                        // fail the render phase where it didn't fail before. So we log it.\n                        // After these have been cleaned up, we'll let them throw.\n                        try {\n                            // This is intentionally an invariant that gets caught. It's the same\n                            // behavior as without this statement except with a better message.\n                            if (typeof typeSpecs[typeSpecName] !== \"function\") {\n                                // eslint-disable-next-line react-internal/prod-error-codes\n                                var err = Error((componentName || \"React class\") + \": \" + location + \" type `\" + typeSpecName + \"` is invalid; \" + \"it must be a function, usually from the `prop-types` package, but received `\" + typeof typeSpecs[typeSpecName] + \"`.\" + \"This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.\");\n                                err.name = \"Invariant Violation\";\n                                throw err;\n                            }\n                            error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, \"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\");\n                        } catch (ex) {\n                            error$1 = ex;\n                        }\n                        if (error$1 && !(error$1 instanceof Error)) {\n                            setCurrentlyValidatingElement$1(element);\n                            error(\"%s: type specification of %s\" + \" `%s` is invalid; the type checker \" + \"function must return `null` or an `Error` but returned a %s. \" + \"You may have forgotten to pass an argument to the type checker \" + \"creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and \" + \"shape all require an argument).\", componentName || \"React class\", location, typeSpecName, typeof error$1);\n                            setCurrentlyValidatingElement$1(null);\n                        }\n                        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n                            // Only monitor this failure once because there tends to be a lot of the\n                            // same error.\n                            loggedTypeFailures[error$1.message] = true;\n                            setCurrentlyValidatingElement$1(element);\n                            error(\"Failed %s type: %s\", location, error$1.message);\n                            setCurrentlyValidatingElement$1(null);\n                        }\n                    }\n                }\n            }\n        }\n        var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n        function isArray(a) {\n            return isArrayImpl(a);\n        }\n        /*\n * The `'' + value` pattern (used in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */ // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n        function typeName(value) {\n            {\n                // toStringTag is needed for namespaced types like Temporal.Instant\n                var hasToStringTag = typeof Symbol === \"function\" && Symbol.toStringTag;\n                var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || \"Object\"; // $FlowFixMe[incompatible-return]\n                return type;\n            }\n        } // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n        function willCoercionThrow(value) {\n            {\n                try {\n                    testStringCoercion(value);\n                    return false;\n                } catch (e) {\n                    return true;\n                }\n            }\n        }\n        function testStringCoercion(value) {\n            // If you ended up here by following an exception call stack, here's what's\n            // happened: you supplied an object or symbol value to React (as a prop, key,\n            // DOM attribute, CSS property, string ref, etc.) and when React tried to\n            // coerce it to a string using `'' + value`, an exception was thrown.\n            //\n            // The most common types that will cause this exception are `Symbol` instances\n            // and Temporal objects like `Temporal.Instant`. But any object that has a\n            // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n            // exception. (Library authors do this to prevent users from using built-in\n            // numeric operators like `+` or comparison operators like `>=` because custom\n            // methods are needed to perform accurate arithmetic or comparison.)\n            //\n            // To fix the problem, coerce this object or symbol value to a string before\n            // passing it to React. The most reliable way is usually `String(value)`.\n            //\n            // To find which value is throwing, check the browser or debugger console.\n            // Before this exception was thrown, there should be `console.error` output\n            // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n            // problem and how that type was used: key, atrribute, input value prop, etc.\n            // In most cases, this console output also shows the component and its\n            // ancestor components where the exception happened.\n            //\n            // eslint-disable-next-line react-internal/safe-string-coercion\n            return \"\" + value;\n        }\n        function checkKeyStringCoercion(value) {\n            {\n                if (willCoercionThrow(value)) {\n                    error(\"The provided key is an unsupported type %s.\" + \" This value must be coerced to a string before using it here.\", typeName(value));\n                    return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n                }\n            }\n        }\n        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\n        var RESERVED_PROPS = {\n            key: true,\n            ref: true,\n            __self: true,\n            __source: true\n        };\n        var specialPropKeyWarningShown;\n        var specialPropRefWarningShown;\n        var didWarnAboutStringRefs;\n        {\n            didWarnAboutStringRefs = {};\n        }\n        function hasValidRef(config) {\n            {\n                if (hasOwnProperty.call(config, \"ref\")) {\n                    var getter = Object.getOwnPropertyDescriptor(config, \"ref\").get;\n                    if (getter && getter.isReactWarning) {\n                        return false;\n                    }\n                }\n            }\n            return config.ref !== undefined;\n        }\n        function hasValidKey(config) {\n            {\n                if (hasOwnProperty.call(config, \"key\")) {\n                    var getter = Object.getOwnPropertyDescriptor(config, \"key\").get;\n                    if (getter && getter.isReactWarning) {\n                        return false;\n                    }\n                }\n            }\n            return config.key !== undefined;\n        }\n        function warnIfStringRefCannotBeAutoConverted(config, self) {\n            {\n                if (typeof config.ref === \"string\" && ReactCurrentOwner$1.current && self && ReactCurrentOwner$1.current.stateNode !== self) {\n                    var componentName = getComponentNameFromType(ReactCurrentOwner$1.current.type);\n                    if (!didWarnAboutStringRefs[componentName]) {\n                        error('Component \"%s\" contains the string ref \"%s\". ' + \"Support for string refs will be removed in a future major release. \" + \"This case cannot be automatically converted to an arrow function. \" + \"We ask you to manually fix this case by using useRef() or createRef() instead. \" + \"Learn more about using refs safely here: \" + \"https://reactjs.org/link/strict-mode-string-ref\", getComponentNameFromType(ReactCurrentOwner$1.current.type), config.ref);\n                        didWarnAboutStringRefs[componentName] = true;\n                    }\n                }\n            }\n        }\n        function defineKeyPropWarningGetter(props, displayName) {\n            {\n                var warnAboutAccessingKey = function() {\n                    if (!specialPropKeyWarningShown) {\n                        specialPropKeyWarningShown = true;\n                        error(\"%s: `key` is not a prop. Trying to access it will result \" + \"in `undefined` being returned. If you need to access the same \" + \"value within the child component, you should pass it as a different \" + \"prop. (https://reactjs.org/link/special-props)\", displayName);\n                    }\n                };\n                warnAboutAccessingKey.isReactWarning = true;\n                Object.defineProperty(props, \"key\", {\n                    get: warnAboutAccessingKey,\n                    configurable: true\n                });\n            }\n        }\n        function defineRefPropWarningGetter(props, displayName) {\n            {\n                var warnAboutAccessingRef = function() {\n                    if (!specialPropRefWarningShown) {\n                        specialPropRefWarningShown = true;\n                        error(\"%s: `ref` is not a prop. Trying to access it will result \" + \"in `undefined` being returned. If you need to access the same \" + \"value within the child component, you should pass it as a different \" + \"prop. (https://reactjs.org/link/special-props)\", displayName);\n                    }\n                };\n                warnAboutAccessingRef.isReactWarning = true;\n                Object.defineProperty(props, \"ref\", {\n                    get: warnAboutAccessingRef,\n                    configurable: true\n                });\n            }\n        }\n        /**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */ function ReactElement(type, key, ref, self, source, owner, props) {\n            var element = {\n                // This tag allows us to uniquely identify this as a React Element\n                $$typeof: REACT_ELEMENT_TYPE,\n                // Built-in properties that belong on the element\n                type: type,\n                key: key,\n                ref: ref,\n                props: props,\n                // Record the component responsible for creating this element.\n                _owner: owner\n            };\n            {\n                // The validation flag is currently mutative. We put it on\n                // an external backing store so that we can freeze the whole object.\n                // This can be replaced with a WeakMap once they are implemented in\n                // commonly used development environments.\n                element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n                // the validation flag non-enumerable (where possible, which should\n                // include every environment we run tests in), so the test framework\n                // ignores it.\n                Object.defineProperty(element._store, \"validated\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: true,\n                    value: false\n                }); // self and source are DEV only properties.\n                Object.defineProperty(element, \"_self\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: false,\n                    value: self\n                }); // Two elements created in two different places should be considered\n                // equal for testing purposes and therefore we hide it from enumeration.\n                Object.defineProperty(element, \"_source\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: false,\n                    value: source\n                });\n                if (Object.freeze) {\n                    Object.freeze(element.props);\n                    Object.freeze(element);\n                }\n            }\n            return element;\n        }\n        /**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */ function jsxDEV$1(type, config, maybeKey, source, self) {\n            {\n                var propName; // Reserved names are extracted\n                var props = {};\n                var key = null;\n                var ref = null; // Currently, key can be spread in as a prop. This causes a potential\n                // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n                // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n                // but as an intermediary step, we will use jsxDEV for everything except\n                // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n                // key is explicitly declared to be undefined or not.\n                if (maybeKey !== undefined) {\n                    {\n                        checkKeyStringCoercion(maybeKey);\n                    }\n                    key = \"\" + maybeKey;\n                }\n                if (hasValidKey(config)) {\n                    {\n                        checkKeyStringCoercion(config.key);\n                    }\n                    key = \"\" + config.key;\n                }\n                if (hasValidRef(config)) {\n                    ref = config.ref;\n                    warnIfStringRefCannotBeAutoConverted(config, self);\n                } // Remaining properties are added to a new props object\n                for(propName in config){\n                    if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n                        props[propName] = config[propName];\n                    }\n                } // Resolve default props\n                if (type && type.defaultProps) {\n                    var defaultProps = type.defaultProps;\n                    for(propName in defaultProps){\n                        if (props[propName] === undefined) {\n                            props[propName] = defaultProps[propName];\n                        }\n                    }\n                }\n                if (key || ref) {\n                    var displayName = typeof type === \"function\" ? type.displayName || type.name || \"Unknown\" : type;\n                    if (key) {\n                        defineKeyPropWarningGetter(props, displayName);\n                    }\n                    if (ref) {\n                        defineRefPropWarningGetter(props, displayName);\n                    }\n                }\n                return ReactElement(type, key, ref, self, source, ReactCurrentOwner$1.current, props);\n            }\n        }\n        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n        var REACT_CLIENT_REFERENCE = Symbol.for(\"react.client.reference\");\n        function setCurrentlyValidatingElement(element) {\n            {\n                if (element) {\n                    var owner = element._owner;\n                    var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n                    ReactDebugCurrentFrame.setExtraStackFrame(stack);\n                } else {\n                    ReactDebugCurrentFrame.setExtraStackFrame(null);\n                }\n            }\n        }\n        var propTypesMisspellWarningShown;\n        {\n            propTypesMisspellWarningShown = false;\n        }\n        /**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */ function isValidElement(object) {\n            {\n                return typeof object === \"object\" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n            }\n        }\n        function getDeclarationErrorAddendum() {\n            {\n                if (ReactCurrentOwner.current) {\n                    var name = getComponentNameFromType(ReactCurrentOwner.current.type);\n                    if (name) {\n                        return \"\\n\\nCheck the render method of `\" + name + \"`.\";\n                    }\n                }\n                return \"\";\n            }\n        }\n        function getSourceInfoErrorAddendum(source) {\n            {\n                if (source !== undefined) {\n                    var fileName = source.fileName.replace(/^.*[\\\\\\/]/, \"\");\n                    var lineNumber = source.lineNumber;\n                    return \"\\n\\nCheck your code at \" + fileName + \":\" + lineNumber + \".\";\n                }\n                return \"\";\n            }\n        }\n        /**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */ var ownerHasKeyUseWarning = {};\n        function getCurrentComponentErrorInfo(parentType) {\n            {\n                var info = getDeclarationErrorAddendum();\n                if (!info) {\n                    var parentName = getComponentNameFromType(parentType);\n                    if (parentName) {\n                        info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n                    }\n                }\n                return info;\n            }\n        }\n        /**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */ function validateExplicitKey(element, parentType) {\n            {\n                if (!element._store || element._store.validated || element.key != null) {\n                    return;\n                }\n                element._store.validated = true;\n                var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n                if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n                    return;\n                }\n                ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n                // property, it may be the creator of the child that's responsible for\n                // assigning it a key.\n                var childOwner = \"\";\n                if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n                    // Give the component that originally created this child.\n                    childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n                }\n                setCurrentlyValidatingElement(element);\n                error('Each child in a list should have a unique \"key\" prop.' + \"%s%s See https://reactjs.org/link/warning-keys for more information.\", currentComponentErrorInfo, childOwner);\n                setCurrentlyValidatingElement(null);\n            }\n        }\n        /**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */ function validateChildKeys(node, parentType) {\n            {\n                if (typeof node !== \"object\" || !node) {\n                    return;\n                }\n                if (node.$$typeof === REACT_CLIENT_REFERENCE) ;\n                else if (isArray(node)) {\n                    for(var i = 0; i < node.length; i++){\n                        var child = node[i];\n                        if (isValidElement(child)) {\n                            validateExplicitKey(child, parentType);\n                        }\n                    }\n                } else if (isValidElement(node)) {\n                    // This element was passed in a valid location.\n                    if (node._store) {\n                        node._store.validated = true;\n                    }\n                } else {\n                    var iteratorFn = getIteratorFn(node);\n                    if (typeof iteratorFn === \"function\") {\n                        // Entry iterators used to provide implicit keys,\n                        // but now we print a separate warning for them later.\n                        if (iteratorFn !== node.entries) {\n                            var iterator = iteratorFn.call(node);\n                            var step;\n                            while(!(step = iterator.next()).done){\n                                if (isValidElement(step.value)) {\n                                    validateExplicitKey(step.value, parentType);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        /**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */ function validatePropTypes(element) {\n            {\n                var type = element.type;\n                if (type === null || type === undefined || typeof type === \"string\") {\n                    return;\n                }\n                if (type.$$typeof === REACT_CLIENT_REFERENCE) {\n                    return;\n                }\n                var propTypes;\n                if (typeof type === \"function\") {\n                    propTypes = type.propTypes;\n                } else if (typeof type === \"object\" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n                // Inner props are checked in the reconciler.\n                type.$$typeof === REACT_MEMO_TYPE)) {\n                    propTypes = type.propTypes;\n                } else {\n                    return;\n                }\n                if (propTypes) {\n                    // Intentionally inside to avoid triggering lazy initializers:\n                    var name = getComponentNameFromType(type);\n                    checkPropTypes(propTypes, element.props, \"prop\", name, element);\n                } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n                    propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\n                    var _name = getComponentNameFromType(type);\n                    error(\"Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?\", _name || \"Unknown\");\n                }\n                if (typeof type.getDefaultProps === \"function\" && !type.getDefaultProps.isReactClassApproved) {\n                    error(\"getDefaultProps is only used on classic React.createClass \" + \"definitions. Use a static property named `defaultProps` instead.\");\n                }\n            }\n        }\n        /**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */ function validateFragmentProps(fragment) {\n            {\n                var keys = Object.keys(fragment.props);\n                for(var i = 0; i < keys.length; i++){\n                    var key = keys[i];\n                    if (key !== \"children\" && key !== \"key\") {\n                        setCurrentlyValidatingElement(fragment);\n                        error(\"Invalid prop `%s` supplied to `React.Fragment`. \" + \"React.Fragment can only have `key` and `children` props.\", key);\n                        setCurrentlyValidatingElement(null);\n                        break;\n                    }\n                }\n                if (fragment.ref !== null) {\n                    setCurrentlyValidatingElement(fragment);\n                    error(\"Invalid attribute `ref` supplied to `React.Fragment`.\");\n                    setCurrentlyValidatingElement(null);\n                }\n            }\n        }\n        var didWarnAboutKeySpread = {};\n        function jsxWithValidation(type, props, key, isStaticChildren, source, self) {\n            {\n                var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n                // succeed and there will likely be errors in render.\n                if (!validType) {\n                    var info = \"\";\n                    if (type === undefined || typeof type === \"object\" && type !== null && Object.keys(type).length === 0) {\n                        info += \" You likely forgot to export your component from the file \" + \"it's defined in, or you might have mixed up default and named imports.\";\n                    }\n                    var sourceInfo = getSourceInfoErrorAddendum(source);\n                    if (sourceInfo) {\n                        info += sourceInfo;\n                    } else {\n                        info += getDeclarationErrorAddendum();\n                    }\n                    var typeString;\n                    if (type === null) {\n                        typeString = \"null\";\n                    } else if (isArray(type)) {\n                        typeString = \"array\";\n                    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n                        typeString = \"<\" + (getComponentNameFromType(type.type) || \"Unknown\") + \" />\";\n                        info = \" Did you accidentally export a JSX literal instead of a component?\";\n                    } else {\n                        typeString = typeof type;\n                    }\n                    error(\"React.jsx: type is invalid -- expected a string (for \" + \"built-in components) or a class/function (for composite \" + \"components) but got: %s.%s\", typeString, info);\n                }\n                var element = jsxDEV$1(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.\n                // TODO: Drop this when these are no longer allowed as the type argument.\n                if (element == null) {\n                    return element;\n                } // Skip key warning if the type isn't valid since our key validation logic\n                // doesn't expect a non-string/function type and can throw confusing errors.\n                // We don't want exception behavior to differ between dev and prod.\n                // (Rendering will throw with a helpful message and as soon as the type is\n                // fixed, the key warnings will appear.)\n                if (validType) {\n                    var children = props.children;\n                    if (children !== undefined) {\n                        if (isStaticChildren) {\n                            if (isArray(children)) {\n                                for(var i = 0; i < children.length; i++){\n                                    validateChildKeys(children[i], type);\n                                }\n                                if (Object.freeze) {\n                                    Object.freeze(children);\n                                }\n                            } else {\n                                error(\"React.jsx: Static children should always be an array. \" + \"You are likely explicitly calling React.jsxs or React.jsxDEV. \" + \"Use the Babel transform instead.\");\n                            }\n                        } else {\n                            validateChildKeys(children, type);\n                        }\n                    }\n                }\n                if (hasOwnProperty.call(props, \"key\")) {\n                    var componentName = getComponentNameFromType(type);\n                    var keys = Object.keys(props).filter(function(k) {\n                        return k !== \"key\";\n                    });\n                    var beforeExample = keys.length > 0 ? \"{key: someKey, \" + keys.join(\": ..., \") + \": ...}\" : \"{key: someKey}\";\n                    if (!didWarnAboutKeySpread[componentName + beforeExample]) {\n                        var afterExample = keys.length > 0 ? \"{\" + keys.join(\": ..., \") + \": ...}\" : \"{}\";\n                        error('A props object containing a \"key\" prop is being spread into JSX:\\n' + \"  let props = %s;\\n\" + \"  <%s {...props} />\\n\" + \"React keys must be passed directly to JSX without using spread:\\n\" + \"  let props = %s;\\n\" + \"  <%s key={someKey} {...props} />\", beforeExample, componentName, afterExample, componentName);\n                        didWarnAboutKeySpread[componentName + beforeExample] = true;\n                    }\n                }\n                if (type === REACT_FRAGMENT_TYPE) {\n                    validateFragmentProps(element);\n                } else {\n                    validatePropTypes(element);\n                }\n                return element;\n            }\n        } // These two functions exist to still get child warnings in dev\n        var jsxDEV = jsxWithValidation;\n        exports.Fragment = REACT_FRAGMENT_TYPE;\n        exports.jsxDEV = jsxDEV;\n    })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/jsx-dev-runtime.js ***!
  \******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nif (false) {} else {\n    module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QvanN4LWRldi1ydW50aW1lLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsS0FBeUIsRUFBYyxFQUUxQyxNQUFNO0lBQ0xDLDhMQUF5QjtBQUMzQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3JlYWN0L2pzeC1kZXYtcnVudGltZS5qcz9jYTIwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtZGV2LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOlsicHJvY2VzcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js ***!
  \**********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/**\n * @license React\n * use-sync-external-store-shim.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ \nif (true) {\n    (function() {\n        var _s = $RefreshSig$();\n        \"use strict\";\n        /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== \"undefined\" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === \"function\") {\n            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());\n        }\n        var React = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n        var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n        function error(format) {\n            {\n                {\n                    for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){\n                        args[_key2 - 1] = arguments[_key2];\n                    }\n                    printWarning(\"error\", format, args);\n                }\n            }\n        }\n        function printWarning(level, format, args) {\n            // When changing this logic, you might want to also\n            // update consoleWithStackDev.www.js as well.\n            {\n                var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n                var stack = ReactDebugCurrentFrame.getStackAddendum();\n                if (stack !== \"\") {\n                    format += \"%s\";\n                    args = args.concat([\n                        stack\n                    ]);\n                } // eslint-disable-next-line react-internal/safe-string-coercion\n                var argsWithFormat = args.map(function(item) {\n                    return String(item);\n                }); // Careful: RN currently depends on this prefix\n                argsWithFormat.unshift(\"Warning: \" + format); // We intentionally don't use spread (or .apply) directly because it\n                // breaks IE9: https://github.com/facebook/react/issues/13610\n                // eslint-disable-next-line react-internal/no-production-logging\n                Function.prototype.apply.call(console[level], console, argsWithFormat);\n            }\n        }\n        /**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */ function is(x, y) {\n            return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare\n            ;\n        }\n        var objectIs = typeof Object.is === \"function\" ? Object.is : is;\n        // dispatch for CommonJS interop named imports.\n        var useState = React.useState, useEffect = React.useEffect, useLayoutEffect = React.useLayoutEffect, useDebugValue = React.useDebugValue;\n        var didWarnOld18Alpha = false;\n        var didWarnUncachedGetSnapshot = false; // Disclaimer: This shim breaks many of the rules of React, and only works\n        // because of a very particular set of implementation details and assumptions\n        // -- change any one of them and it will break. The most important assumption\n        // is that updates are always synchronous, because concurrent rendering is\n        // only available in versions of React that also have a built-in\n        // useSyncExternalStore API. And we only use this shim when the built-in API\n        // does not exist.\n        //\n        // Do not assume that the clever hacks used by this hook also work in general.\n        // The point of this shim is to replace the need for hacks by other libraries.\n        function useSyncExternalStore(subscribe, getSnapshot, // React do not expose a way to check if we're hydrating. So users of the shim\n        // will need to track that themselves and return the correct value\n        // from `getSnapshot`.\n        getServerSnapshot) {\n            _s();\n            {\n                if (!didWarnOld18Alpha) {\n                    if (React.startTransition !== undefined) {\n                        didWarnOld18Alpha = true;\n                        error(\"You are using an outdated, pre-release alpha of React 18 that \" + \"does not support useSyncExternalStore. The \" + \"use-sync-external-store shim will not work correctly. Upgrade \" + \"to a newer pre-release.\");\n                    }\n                }\n            }\n            // breaks the rules of React, and only works here because of specific\n            // implementation details, most importantly that updates are\n            // always synchronous.\n            var value = getSnapshot();\n            {\n                if (!didWarnUncachedGetSnapshot) {\n                    var cachedValue = getSnapshot();\n                    if (!objectIs(value, cachedValue)) {\n                        error(\"The result of getSnapshot should be cached to avoid an infinite loop\");\n                        didWarnUncachedGetSnapshot = true;\n                    }\n                }\n            }\n            // re-render whenever the subscribed state changes by updating an some\n            // arbitrary useState hook. Then, during render, we call getSnapshot to read\n            // the current value.\n            //\n            // Because we don't actually use the state returned by the useState hook, we\n            // can save a bit of memory by storing other stuff in that slot.\n            //\n            // To implement the early bailout, we need to track some things on a mutable\n            // object. Usually, we would put that in a useRef hook, but we can stash it in\n            // our useState hook instead.\n            //\n            // To force a re-render, we call forceUpdate({inst}). That works because the\n            // new object always fails an equality check.\n            var _useState = useState({\n                inst: {\n                    value: value,\n                    getSnapshot: getSnapshot\n                }\n            }), inst = _useState[0].inst, forceUpdate = _useState[1]; // Track the latest getSnapshot function with a ref. This needs to be updated\n            // in the layout phase so we can access it during the tearing check that\n            // happens on subscribe.\n            useLayoutEffect(function() {\n                inst.value = value;\n                inst.getSnapshot = getSnapshot; // Whenever getSnapshot or subscribe changes, we need to check in the\n                // commit phase if there was an interleaved mutation. In concurrent mode\n                // this can happen all the time, but even in synchronous mode, an earlier\n                // effect may have mutated the store.\n                if (checkIfSnapshotChanged(inst)) {\n                    // Force a re-render.\n                    forceUpdate({\n                        inst: inst\n                    });\n                }\n            }, [\n                subscribe,\n                value,\n                getSnapshot\n            ]);\n            useEffect(function() {\n                // Check for changes right before subscribing. Subsequent changes will be\n                // detected in the subscription handler.\n                if (checkIfSnapshotChanged(inst)) {\n                    // Force a re-render.\n                    forceUpdate({\n                        inst: inst\n                    });\n                }\n                var handleStoreChange = function() {\n                    // TODO: Because there is no cross-renderer API for batching updates, it's\n                    // up to the consumer of this library to wrap their subscription event\n                    // with unstable_batchedUpdates. Should we try to detect when this isn't\n                    // the case and print a warning in development?\n                    // The store changed. Check if the snapshot changed since the last time we\n                    // read from the store.\n                    if (checkIfSnapshotChanged(inst)) {\n                        // Force a re-render.\n                        forceUpdate({\n                            inst: inst\n                        });\n                    }\n                }; // Subscribe to the store and return a clean-up function.\n                return subscribe(handleStoreChange);\n            }, [\n                subscribe\n            ]);\n            useDebugValue(value);\n            return value;\n        }\n        _s(useSyncExternalStore, \"HNxGYQ39TeXJ0jUaPc6qLOsv73k=\");\n        function checkIfSnapshotChanged(inst) {\n            var latestGetSnapshot = inst.getSnapshot;\n            var prevValue = inst.value;\n            try {\n                var nextValue = latestGetSnapshot();\n                return !objectIs(prevValue, nextValue);\n            } catch (error) {\n                return true;\n            }\n        }\n        function useSyncExternalStore$1(subscribe, getSnapshot, getServerSnapshot) {\n            // Note: The shim does not use getServerSnapshot, because pre-18 versions of\n            // React do not expose a way to check if we're hydrating. So users of the shim\n            // will need to track that themselves and return the correct value\n            // from `getSnapshot`.\n            return getSnapshot();\n        }\n        var canUseDOM = !!( true && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\");\n        var isServerEnvironment = !canUseDOM;\n        var shim = isServerEnvironment ? useSyncExternalStore$1 : useSyncExternalStore;\n        var useSyncExternalStore$2 = React.useSyncExternalStore !== undefined ? React.useSyncExternalStore : shim;\n        exports.useSyncExternalStore = useSyncExternalStore$2;\n        /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== \"undefined\" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === \"function\") {\n            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());\n        }\n    })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.development.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.development.js ***!
  \************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/**\n * @license React\n * use-sync-external-store-shim/with-selector.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ \nif (true) {\n    (function() {\n        var _s = $RefreshSig$();\n        \"use strict\";\n        /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== \"undefined\" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === \"function\") {\n            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());\n        }\n        var React = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n        var shim = __webpack_require__(/*! use-sync-external-store/shim */ \"(app-pages-browser)/./node_modules/use-sync-external-store/shim/index.js\");\n        /**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */ function is(x, y) {\n            return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare\n            ;\n        }\n        var objectIs = typeof Object.is === \"function\" ? Object.is : is;\n        var useSyncExternalStore = shim.useSyncExternalStore;\n        // for CommonJS interop.\n        var useRef = React.useRef, useEffect = React.useEffect, useMemo = React.useMemo, useDebugValue = React.useDebugValue; // Same as useSyncExternalStore, but supports selector and isEqual arguments.\n        function useSyncExternalStoreWithSelector(subscribe, getSnapshot, getServerSnapshot, selector, isEqual) {\n            _s();\n            // Use this to track the rendered snapshot.\n            var instRef = useRef(null);\n            var inst;\n            if (instRef.current === null) {\n                inst = {\n                    hasValue: false,\n                    value: null\n                };\n                instRef.current = inst;\n            } else {\n                inst = instRef.current;\n            }\n            var _useMemo = useMemo(function() {\n                // Track the memoized state using closure variables that are local to this\n                // memoized instance of a getSnapshot function. Intentionally not using a\n                // useRef hook, because that state would be shared across all concurrent\n                // copies of the hook/component.\n                var hasMemo = false;\n                var memoizedSnapshot;\n                var memoizedSelection;\n                var memoizedSelector = function(nextSnapshot) {\n                    if (!hasMemo) {\n                        // The first time the hook is called, there is no memoized result.\n                        hasMemo = true;\n                        memoizedSnapshot = nextSnapshot;\n                        var _nextSelection = selector(nextSnapshot);\n                        if (isEqual !== undefined) {\n                            // Even if the selector has changed, the currently rendered selection\n                            // may be equal to the new selection. We should attempt to reuse the\n                            // current value if possible, to preserve downstream memoizations.\n                            if (inst.hasValue) {\n                                var currentSelection = inst.value;\n                                if (isEqual(currentSelection, _nextSelection)) {\n                                    memoizedSelection = currentSelection;\n                                    return currentSelection;\n                                }\n                            }\n                        }\n                        memoizedSelection = _nextSelection;\n                        return _nextSelection;\n                    } // We may be able to reuse the previous invocation's result.\n                    // We may be able to reuse the previous invocation's result.\n                    var prevSnapshot = memoizedSnapshot;\n                    var prevSelection = memoizedSelection;\n                    if (objectIs(prevSnapshot, nextSnapshot)) {\n                        // The snapshot is the same as last time. Reuse the previous selection.\n                        return prevSelection;\n                    } // The snapshot has changed, so we need to compute a new selection.\n                    // The snapshot has changed, so we need to compute a new selection.\n                    var nextSelection = selector(nextSnapshot); // If a custom isEqual function is provided, use that to check if the data\n                    // has changed. If it hasn't, return the previous selection. That signals\n                    // to React that the selections are conceptually equal, and we can bail\n                    // out of rendering.\n                    // If a custom isEqual function is provided, use that to check if the data\n                    // has changed. If it hasn't, return the previous selection. That signals\n                    // to React that the selections are conceptually equal, and we can bail\n                    // out of rendering.\n                    if (isEqual !== undefined && isEqual(prevSelection, nextSelection)) {\n                        return prevSelection;\n                    }\n                    memoizedSnapshot = nextSnapshot;\n                    memoizedSelection = nextSelection;\n                    return nextSelection;\n                }; // Assigning this to a constant so that Flow knows it can't change.\n                // Assigning this to a constant so that Flow knows it can't change.\n                var maybeGetServerSnapshot = getServerSnapshot === undefined ? null : getServerSnapshot;\n                var getSnapshotWithSelector = function() {\n                    return memoizedSelector(getSnapshot());\n                };\n                var getServerSnapshotWithSelector = maybeGetServerSnapshot === null ? undefined : function() {\n                    return memoizedSelector(maybeGetServerSnapshot());\n                };\n                return [\n                    getSnapshotWithSelector,\n                    getServerSnapshotWithSelector\n                ];\n            }, [\n                getSnapshot,\n                getServerSnapshot,\n                selector,\n                isEqual\n            ]), getSelection = _useMemo[0], getServerSelection = _useMemo[1];\n            var value = useSyncExternalStore(subscribe, getSelection, getServerSelection);\n            useEffect(function() {\n                inst.hasValue = true;\n                inst.value = value;\n            }, [\n                value\n            ]);\n            useDebugValue(value);\n            return value;\n        }\n        _s(useSyncExternalStoreWithSelector, \"mZhzs7ShZXU5RBraOlzBOQ4BK68=\", false, function() {\n            return [\n                useSyncExternalStore\n            ];\n        });\n        exports.useSyncExternalStoreWithSelector = useSyncExternalStoreWithSelector;\n        /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== \"undefined\" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === \"function\") {\n            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());\n        }\n    })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.development.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/use-sync-external-store/shim/index.js":
/*!************************************************************!*\
  !*** ./node_modules/use-sync-external-store/shim/index.js ***!
  \************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nif (false) {} else {\n    module.exports = __webpack_require__(/*! ../cjs/use-sync-external-store-shim.development.js */ \"(app-pages-browser)/./node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy91c2Utc3luYy1leHRlcm5hbC1zdG9yZS9zaGltL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsS0FBeUIsRUFBYyxFQUUxQyxNQUFNO0lBQ0xDLDRNQUF5QjtBQUMzQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUvc2hpbS9pbmRleC5qcz8yZTg3Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9janMvdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUtc2hpbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9janMvdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUtc2hpbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIl0sIm5hbWVzIjpbInByb2Nlc3MiLCJtb2R1bGUiLCJleHBvcnRzIiwicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/use-sync-external-store/shim/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/use-sync-external-store/shim/with-selector.js":
/*!********************************************************************!*\
  !*** ./node_modules/use-sync-external-store/shim/with-selector.js ***!
  \********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nif (false) {} else {\n    module.exports = __webpack_require__(/*! ../cjs/use-sync-external-store-shim/with-selector.development.js */ \"(app-pages-browser)/./node_modules/use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy91c2Utc3luYy1leHRlcm5hbC1zdG9yZS9zaGltL3dpdGgtc2VsZWN0b3IuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxLQUF5QixFQUFjLEVBRTFDLE1BQU07SUFDTEMsd09BQXlCO0FBQzNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy91c2Utc3luYy1leHRlcm5hbC1zdG9yZS9zaGltL3dpdGgtc2VsZWN0b3IuanM/ZTMzYiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vY2pzL3VzZS1zeW5jLWV4dGVybmFsLXN0b3JlLXNoaW0vd2l0aC1zZWxlY3Rvci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9janMvdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUtc2hpbS93aXRoLXNlbGVjdG9yLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOlsicHJvY2VzcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/use-sync-external-store/shim/with-selector.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./app/globals.css":
/*!*************************!*\
  !*** ./app/globals.css ***!
  \*************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"ab4f101d5d33\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9nbG9iYWxzLmNzcyIsIm1hcHBpbmdzIjoiO0FBQUEsK0RBQWUsY0FBYztBQUM3QixJQUFJLElBQVUsSUFBSSxpQkFBaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vYXBwL2dsb2JhbHMuY3NzP2MyY2QiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCJhYjRmMTAxZDVkMzNcIlxuaWYgKG1vZHVsZS5ob3QpIHsgbW9kdWxlLmhvdC5hY2NlcHQoKSB9XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/globals.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./app/Room.tsx":
/*!**********************!*\
  !*** ./app/Room.tsx ***!
  \**********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Room: function() { return /* binding */ Room; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var _liveblocks_config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../liveblocks.config */ \"(app-pages-browser)/./liveblocks.config.ts\");\n/* harmony import */ var _liveblocks_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @liveblocks/react */ \"(app-pages-browser)/./node_modules/@liveblocks/react/dist/index.mjs\");\n/* __next_internal_client_entry_do_not_use__ Room auto */ \n\n\nfunction Room(param) {\n    let { children } = param;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_liveblocks_config__WEBPACK_IMPORTED_MODULE_1__.RoomProvider, {\n        id: \"my-room\",\n        initialPresence: {},\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_liveblocks_react__WEBPACK_IMPORTED_MODULE_2__.ClientSideSuspense, {\n            fallback: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                children: \"Loading…\"\n            }, void 0, false, {\n                fileName: \"/home/e11even/Desktop/Figma-clone/app/Room.tsx\",\n                lineNumber: 10,\n                columnNumber: 37\n            }, void 0),\n            children: ()=>children\n        }, void 0, false, {\n            fileName: \"/home/e11even/Desktop/Figma-clone/app/Room.tsx\",\n            lineNumber: 10,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"/home/e11even/Desktop/Figma-clone/app/Room.tsx\",\n        lineNumber: 9,\n        columnNumber: 5\n    }, this);\n}\n_c = Room;\nvar _c;\n$RefreshReg$(_c, \"Room\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9Sb29tLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUdvRDtBQUNHO0FBRWhELFNBQVNFLEtBQUssS0FBcUM7UUFBckMsRUFBRUMsUUFBUSxFQUEyQixHQUFyQztJQUNuQixxQkFDRSw4REFBQ0gsNERBQVlBO1FBQUNJLElBQUc7UUFBVUMsaUJBQWlCLENBQUM7a0JBQzNDLDRFQUFDSixpRUFBa0JBO1lBQUNLLHdCQUFVLDhEQUFDQzswQkFBSTs7Ozs7O3NCQUNoQyxJQUFNSjs7Ozs7Ozs7Ozs7QUFJZjtLQVJnQkQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vYXBwL1Jvb20udHN4Pzk4Y2UiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2UgY2xpZW50XCI7XG5cbmltcG9ydCB7IFJlYWN0Tm9kZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgUm9vbVByb3ZpZGVyIH0gZnJvbSBcIi4uL2xpdmVibG9ja3MuY29uZmlnXCI7XG5pbXBvcnQgeyBDbGllbnRTaWRlU3VzcGVuc2UgfSBmcm9tIFwiQGxpdmVibG9ja3MvcmVhY3RcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIFJvb20oeyBjaGlsZHJlbiB9OiB7IGNoaWxkcmVuOiBSZWFjdE5vZGUgfSkge1xuICByZXR1cm4gKFxuICAgIDxSb29tUHJvdmlkZXIgaWQ9XCJteS1yb29tXCIgaW5pdGlhbFByZXNlbmNlPXt7fX0+XG4gICAgICA8Q2xpZW50U2lkZVN1c3BlbnNlIGZhbGxiYWNrPXs8ZGl2PkxvYWRpbmfigKY8L2Rpdj59PlxuICAgICAgICB7KCkgPT4gY2hpbGRyZW59XG4gICAgICA8L0NsaWVudFNpZGVTdXNwZW5zZT5cbiAgICA8L1Jvb21Qcm92aWRlcj5cbiAgKTtcbn1cbiJdLCJuYW1lcyI6WyJSb29tUHJvdmlkZXIiLCJDbGllbnRTaWRlU3VzcGVuc2UiLCJSb29tIiwiY2hpbGRyZW4iLCJpZCIsImluaXRpYWxQcmVzZW5jZSIsImZhbGxiYWNrIiwiZGl2Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/Room.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./liveblocks.config.ts":
/*!******************************!*\
  !*** ./liveblocks.config.ts ***!
  \******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RoomProvider: function() { return /* binding */ RoomProvider; },\n/* harmony export */   useAddReaction: function() { return /* binding */ useAddReaction; },\n/* harmony export */   useBatch: function() { return /* binding */ useBatch; },\n/* harmony export */   useBroadcastEvent: function() { return /* binding */ useBroadcastEvent; },\n/* harmony export */   useCanRedo: function() { return /* binding */ useCanRedo; },\n/* harmony export */   useCanUndo: function() { return /* binding */ useCanUndo; },\n/* harmony export */   useCreateComment: function() { return /* binding */ useCreateComment; },\n/* harmony export */   useCreateThread: function() { return /* binding */ useCreateThread; },\n/* harmony export */   useDeleteComment: function() { return /* binding */ useDeleteComment; },\n/* harmony export */   useEditComment: function() { return /* binding */ useEditComment; },\n/* harmony export */   useEditThreadMetadata: function() { return /* binding */ useEditThreadMetadata; },\n/* harmony export */   useErrorListener: function() { return /* binding */ useErrorListener; },\n/* harmony export */   useEventListener: function() { return /* binding */ useEventListener; },\n/* harmony export */   useHistory: function() { return /* binding */ useHistory; },\n/* harmony export */   useList: function() { return /* binding */ useList; },\n/* harmony export */   useLostConnectionListener: function() { return /* binding */ useLostConnectionListener; },\n/* harmony export */   useMap: function() { return /* binding */ useMap; },\n/* harmony export */   useMutation: function() { return /* binding */ useMutation; },\n/* harmony export */   useMyPresence: function() { return /* binding */ useMyPresence; },\n/* harmony export */   useObject: function() { return /* binding */ useObject; },\n/* harmony export */   useOther: function() { return /* binding */ useOther; },\n/* harmony export */   useOthers: function() { return /* binding */ useOthers; },\n/* harmony export */   useOthersConnectionIds: function() { return /* binding */ useOthersConnectionIds; },\n/* harmony export */   useOthersMapped: function() { return /* binding */ useOthersMapped; },\n/* harmony export */   useRedo: function() { return /* binding */ useRedo; },\n/* harmony export */   useRemoveReaction: function() { return /* binding */ useRemoveReaction; },\n/* harmony export */   useRoom: function() { return /* binding */ useRoom; },\n/* harmony export */   useSelf: function() { return /* binding */ useSelf; },\n/* harmony export */   useStatus: function() { return /* binding */ useStatus; },\n/* harmony export */   useStorage: function() { return /* binding */ useStorage; },\n/* harmony export */   useThreads: function() { return /* binding */ useThreads; },\n/* harmony export */   useUndo: function() { return /* binding */ useUndo; },\n/* harmony export */   useUpdateMyPresence: function() { return /* binding */ useUpdateMyPresence; },\n/* harmony export */   useUser: function() { return /* binding */ useUser; }\n/* harmony export */ });\n/* harmony import */ var _liveblocks_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @liveblocks/client */ \"(app-pages-browser)/./node_modules/@liveblocks/core/dist/index.mjs\");\n/* harmony import */ var _liveblocks_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @liveblocks/react */ \"(app-pages-browser)/./node_modules/@liveblocks/react/dist/index.mjs\");\n\n\nconst client = (0,_liveblocks_client__WEBPACK_IMPORTED_MODULE_0__.createClient)({\n    publicApiKey: \"pk_dev_YlBh_xd9gnot_yD0X_h8hNMR2KY0IxEI87l3K9zcgcmWaD09_4cqxk12fFCS7AKA\"\n});\nconst { suspense: { RoomProvider, useRoom, useMyPresence, useUpdateMyPresence, useSelf, useOthers, useOthersMapped, useOthersConnectionIds, useOther, useBroadcastEvent, useEventListener, useErrorListener, useStorage, useObject, useMap, useList, useBatch, useHistory, useUndo, useRedo, useCanUndo, useCanRedo, useMutation, useStatus, useLostConnectionListener, useThreads, useUser, useCreateThread, useEditThreadMetadata, useCreateComment, useEditComment, useDeleteComment, useAddReaction, useRemoveReaction } } = (0,_liveblocks_react__WEBPACK_IMPORTED_MODULE_1__.createRoomContext)(client, {\n    async resolveUsers (param) {\n        let { userIds } = param;\n        // Used only for Comments. Return a list of user information retrieved\n        // from `userIds`. This info is used in comments, mentions etc.\n        // const usersData = await __fetchUsersFromDB__(userIds);\n        //\n        // return usersData.map((userData) => ({\n        //   name: userData.name,\n        //   avatar: userData.avatar.src,\n        // }));\n        return [];\n    },\n    async resolveMentionSuggestions (param) {\n        let { text, roomId } = param;\n        // Used only for Comments. Return a list of userIds that match `text`.\n        // These userIds are used to create a mention list when typing in the\n        // composer.\n        //\n        // For example when you type \"@jo\", `text` will be `\"jo\"`, and\n        // you should to return an array with John and Joanna's userIds:\n        // [\"john@example.com\", \"joanna@example.com\"]\n        // const userIds = await __fetchAllUserIdsFromDB__(roomId);\n        //\n        // Return all userIds if no `text`\n        // if (!text) {\n        //   return userIds;\n        // }\n        //\n        // Otherwise, filter userIds for the search `text` and return\n        // return userIds.filter((userId) =>\n        //   userId.toLowerCase().includes(text.toLowerCase())\n        // );\n        return [];\n    }\n});\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2xpdmVibG9ja3MuY29uZmlnLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFrRDtBQUNJO0FBRXRELE1BQU1FLFNBQVNGLGdFQUFZQSxDQUFDO0lBQzFCRyxjQUFjQyx5RUFBNkM7QUFDN0Q7QUEwQ08sTUFBTSxFQUNYRyxVQUFVLEVBQ1JDLFlBQVksRUFDWkMsT0FBTyxFQUNQQyxhQUFhLEVBQ2JDLG1CQUFtQixFQUNuQkMsT0FBTyxFQUNQQyxTQUFTLEVBQ1RDLGVBQWUsRUFDZkMsc0JBQXNCLEVBQ3RCQyxRQUFRLEVBQ1JDLGlCQUFpQixFQUNqQkMsZ0JBQWdCLEVBQ2hCQyxnQkFBZ0IsRUFDaEJDLFVBQVUsRUFDVkMsU0FBUyxFQUNUQyxNQUFNLEVBQ05DLE9BQU8sRUFDUEMsUUFBUSxFQUNSQyxVQUFVLEVBQ1ZDLE9BQU8sRUFDUEMsT0FBTyxFQUNQQyxVQUFVLEVBQ1ZDLFVBQVUsRUFDVkMsV0FBVyxFQUNYQyxTQUFTLEVBQ1RDLHlCQUF5QixFQUN6QkMsVUFBVSxFQUNWQyxPQUFPLEVBQ1BDLGVBQWUsRUFDZkMscUJBQXFCLEVBQ3JCQyxnQkFBZ0IsRUFDaEJDLGNBQWMsRUFDZEMsZ0JBQWdCLEVBQ2hCQyxjQUFjLEVBQ2RDLGlCQUFpQixFQUNsQixFQUNGLEdBQUd4QyxvRUFBaUJBLENBQ25CQyxRQUNBO0lBQ0UsTUFBTXdDLGNBQWEsS0FBVztZQUFYLEVBQUVDLE9BQU8sRUFBRSxHQUFYO1FBQ2pCLHNFQUFzRTtRQUN0RSwrREFBK0Q7UUFFL0QseURBQXlEO1FBQ3pELEVBQUU7UUFDRix3Q0FBd0M7UUFDeEMseUJBQXlCO1FBQ3pCLGlDQUFpQztRQUNqQyxPQUFPO1FBRVAsT0FBTyxFQUFFO0lBQ1g7SUFDQSxNQUFNQywyQkFBMEIsS0FBZ0I7WUFBaEIsRUFBRUMsSUFBSSxFQUFFQyxNQUFNLEVBQUUsR0FBaEI7UUFDOUIsc0VBQXNFO1FBQ3RFLHFFQUFxRTtRQUNyRSxZQUFZO1FBQ1osRUFBRTtRQUNGLDhEQUE4RDtRQUM5RCxnRUFBZ0U7UUFDaEUsNkNBQTZDO1FBRTdDLDJEQUEyRDtRQUMzRCxFQUFFO1FBQ0Ysa0NBQWtDO1FBQ2xDLGVBQWU7UUFDZixvQkFBb0I7UUFDcEIsSUFBSTtRQUNKLEVBQUU7UUFDRiw2REFBNkQ7UUFDN0Qsb0NBQW9DO1FBQ3BDLHNEQUFzRDtRQUN0RCxLQUFLO1FBRUwsT0FBTyxFQUFFO0lBQ1g7QUFDRixHQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL2xpdmVibG9ja3MuY29uZmlnLnRzP2JjMDgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlQ2xpZW50IH0gZnJvbSBcIkBsaXZlYmxvY2tzL2NsaWVudFwiO1xuaW1wb3J0IHsgY3JlYXRlUm9vbUNvbnRleHQgfSBmcm9tIFwiQGxpdmVibG9ja3MvcmVhY3RcIjtcblxuY29uc3QgY2xpZW50ID0gY3JlYXRlQ2xpZW50KHtcbiAgcHVibGljQXBpS2V5OiBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19MSVZFQkxPQ0tTX1BVQkxJQ19LRVkhLFxufSk7XG5cbi8vIFByZXNlbmNlIHJlcHJlc2VudHMgdGhlIHByb3BlcnRpZXMgdGhhdCBleGlzdCBvbiBldmVyeSB1c2VyIGluIHRoZSBSb29tXG4vLyBhbmQgdGhhdCB3aWxsIGF1dG9tYXRpY2FsbHkgYmUga2VwdCBpbiBzeW5jLiBBY2Nlc3NpYmxlIHRocm91Z2ggdGhlXG4vLyBgdXNlci5wcmVzZW5jZWAgcHJvcGVydHkuIE11c3QgYmUgSlNPTi1zZXJpYWxpemFibGUuXG50eXBlIFByZXNlbmNlID0ge1xuICAvLyBjdXJzb3I6IHsgeDogbnVtYmVyLCB5OiBudW1iZXIgfSB8IG51bGwsXG4gIC8vIC4uLlxufTtcblxuLy8gT3B0aW9uYWxseSwgU3RvcmFnZSByZXByZXNlbnRzIHRoZSBzaGFyZWQgZG9jdW1lbnQgdGhhdCBwZXJzaXN0cyBpbiB0aGVcbi8vIFJvb20sIGV2ZW4gYWZ0ZXIgYWxsIHVzZXJzIGxlYXZlLiBGaWVsZHMgdW5kZXIgU3RvcmFnZSB0eXBpY2FsbHkgYXJlXG4vLyBMaXZlTGlzdCwgTGl2ZU1hcCwgTGl2ZU9iamVjdCBpbnN0YW5jZXMsIGZvciB3aGljaCB1cGRhdGVzIGFyZVxuLy8gYXV0b21hdGljYWxseSBwZXJzaXN0ZWQgYW5kIHN5bmNlZCB0byBhbGwgY29ubmVjdGVkIGNsaWVudHMuXG50eXBlIFN0b3JhZ2UgPSB7XG4gIC8vIGF1dGhvcjogTGl2ZU9iamVjdDx7IGZpcnN0TmFtZTogc3RyaW5nLCBsYXN0TmFtZTogc3RyaW5nIH0+LFxuICAvLyAuLi5cbn07XG5cbi8vIE9wdGlvbmFsbHksIFVzZXJNZXRhIHJlcHJlc2VudHMgc3RhdGljL3JlYWRvbmx5IG1ldGFkYXRhIG9uIGVhY2ggdXNlciwgYXNcbi8vIHByb3ZpZGVkIGJ5IHlvdXIgb3duIGN1c3RvbSBhdXRoIGJhY2sgZW5kIChpZiB1c2VkKS4gVXNlZnVsIGZvciBkYXRhIHRoYXRcbi8vIHdpbGwgbm90IGNoYW5nZSBkdXJpbmcgYSBzZXNzaW9uLCBsaWtlIGEgdXNlcidzIG5hbWUgb3IgYXZhdGFyLlxudHlwZSBVc2VyTWV0YSA9IHtcbiAgLy8gaWQ/OiBzdHJpbmcsICAvLyBBY2Nlc3NpYmxlIHRocm91Z2ggYHVzZXIuaWRgXG4gIC8vIGluZm8/OiBKc29uLCAgLy8gQWNjZXNzaWJsZSB0aHJvdWdoIGB1c2VyLmluZm9gXG59O1xuXG4vLyBPcHRpb25hbGx5LCB0aGUgdHlwZSBvZiBjdXN0b20gZXZlbnRzIGJyb2FkY2FzdCBhbmQgbGlzdGVuZWQgdG8gaW4gdGhpc1xuLy8gcm9vbS4gVXNlIGEgdW5pb24gZm9yIG11bHRpcGxlIGV2ZW50cy4gTXVzdCBiZSBKU09OLXNlcmlhbGl6YWJsZS5cbnR5cGUgUm9vbUV2ZW50ID0ge1xuICAvLyB0eXBlOiBcIk5PVElGSUNBVElPTlwiLFxuICAvLyAuLi5cbn07XG5cbi8vIE9wdGlvbmFsbHksIHdoZW4gdXNpbmcgQ29tbWVudHMsIFRocmVhZE1ldGFkYXRhIHJlcHJlc2VudHMgbWV0YWRhdGEgb25cbi8vIGVhY2ggdGhyZWFkLiBDYW4gb25seSBjb250YWluIGJvb2xlYW5zLCBzdHJpbmdzLCBhbmQgbnVtYmVycy5cbmV4cG9ydCB0eXBlIFRocmVhZE1ldGFkYXRhID0ge1xuICAvLyByZXNvbHZlZDogYm9vbGVhbjtcbiAgLy8gcXVvdGU6IHN0cmluZztcbiAgLy8gdGltZTogbnVtYmVyO1xufTtcblxuZXhwb3J0IGNvbnN0IHtcbiAgc3VzcGVuc2U6IHtcbiAgICBSb29tUHJvdmlkZXIsXG4gICAgdXNlUm9vbSxcbiAgICB1c2VNeVByZXNlbmNlLFxuICAgIHVzZVVwZGF0ZU15UHJlc2VuY2UsXG4gICAgdXNlU2VsZixcbiAgICB1c2VPdGhlcnMsXG4gICAgdXNlT3RoZXJzTWFwcGVkLFxuICAgIHVzZU90aGVyc0Nvbm5lY3Rpb25JZHMsXG4gICAgdXNlT3RoZXIsXG4gICAgdXNlQnJvYWRjYXN0RXZlbnQsXG4gICAgdXNlRXZlbnRMaXN0ZW5lcixcbiAgICB1c2VFcnJvckxpc3RlbmVyLFxuICAgIHVzZVN0b3JhZ2UsXG4gICAgdXNlT2JqZWN0LFxuICAgIHVzZU1hcCxcbiAgICB1c2VMaXN0LFxuICAgIHVzZUJhdGNoLFxuICAgIHVzZUhpc3RvcnksXG4gICAgdXNlVW5kbyxcbiAgICB1c2VSZWRvLFxuICAgIHVzZUNhblVuZG8sXG4gICAgdXNlQ2FuUmVkbyxcbiAgICB1c2VNdXRhdGlvbixcbiAgICB1c2VTdGF0dXMsXG4gICAgdXNlTG9zdENvbm5lY3Rpb25MaXN0ZW5lcixcbiAgICB1c2VUaHJlYWRzLFxuICAgIHVzZVVzZXIsXG4gICAgdXNlQ3JlYXRlVGhyZWFkLFxuICAgIHVzZUVkaXRUaHJlYWRNZXRhZGF0YSxcbiAgICB1c2VDcmVhdGVDb21tZW50LFxuICAgIHVzZUVkaXRDb21tZW50LFxuICAgIHVzZURlbGV0ZUNvbW1lbnQsXG4gICAgdXNlQWRkUmVhY3Rpb24sXG4gICAgdXNlUmVtb3ZlUmVhY3Rpb24sXG4gIH0sXG59ID0gY3JlYXRlUm9vbUNvbnRleHQ8UHJlc2VuY2UsIFN0b3JhZ2UsIFVzZXJNZXRhLCBSb29tRXZlbnQsIFRocmVhZE1ldGFkYXRhPihcbiAgY2xpZW50LFxuICB7XG4gICAgYXN5bmMgcmVzb2x2ZVVzZXJzKHsgdXNlcklkcyB9KSB7XG4gICAgICAvLyBVc2VkIG9ubHkgZm9yIENvbW1lbnRzLiBSZXR1cm4gYSBsaXN0IG9mIHVzZXIgaW5mb3JtYXRpb24gcmV0cmlldmVkXG4gICAgICAvLyBmcm9tIGB1c2VySWRzYC4gVGhpcyBpbmZvIGlzIHVzZWQgaW4gY29tbWVudHMsIG1lbnRpb25zIGV0Yy5cblxuICAgICAgLy8gY29uc3QgdXNlcnNEYXRhID0gYXdhaXQgX19mZXRjaFVzZXJzRnJvbURCX18odXNlcklkcyk7XG4gICAgICAvL1xuICAgICAgLy8gcmV0dXJuIHVzZXJzRGF0YS5tYXAoKHVzZXJEYXRhKSA9PiAoe1xuICAgICAgLy8gICBuYW1lOiB1c2VyRGF0YS5uYW1lLFxuICAgICAgLy8gICBhdmF0YXI6IHVzZXJEYXRhLmF2YXRhci5zcmMsXG4gICAgICAvLyB9KSk7XG5cbiAgICAgIHJldHVybiBbXTtcbiAgICB9LFxuICAgIGFzeW5jIHJlc29sdmVNZW50aW9uU3VnZ2VzdGlvbnMoeyB0ZXh0LCByb29tSWQgfSkge1xuICAgICAgLy8gVXNlZCBvbmx5IGZvciBDb21tZW50cy4gUmV0dXJuIGEgbGlzdCBvZiB1c2VySWRzIHRoYXQgbWF0Y2ggYHRleHRgLlxuICAgICAgLy8gVGhlc2UgdXNlcklkcyBhcmUgdXNlZCB0byBjcmVhdGUgYSBtZW50aW9uIGxpc3Qgd2hlbiB0eXBpbmcgaW4gdGhlXG4gICAgICAvLyBjb21wb3Nlci5cbiAgICAgIC8vXG4gICAgICAvLyBGb3IgZXhhbXBsZSB3aGVuIHlvdSB0eXBlIFwiQGpvXCIsIGB0ZXh0YCB3aWxsIGJlIGBcImpvXCJgLCBhbmRcbiAgICAgIC8vIHlvdSBzaG91bGQgdG8gcmV0dXJuIGFuIGFycmF5IHdpdGggSm9obiBhbmQgSm9hbm5hJ3MgdXNlcklkczpcbiAgICAgIC8vIFtcImpvaG5AZXhhbXBsZS5jb21cIiwgXCJqb2FubmFAZXhhbXBsZS5jb21cIl1cblxuICAgICAgLy8gY29uc3QgdXNlcklkcyA9IGF3YWl0IF9fZmV0Y2hBbGxVc2VySWRzRnJvbURCX18ocm9vbUlkKTtcbiAgICAgIC8vXG4gICAgICAvLyBSZXR1cm4gYWxsIHVzZXJJZHMgaWYgbm8gYHRleHRgXG4gICAgICAvLyBpZiAoIXRleHQpIHtcbiAgICAgIC8vICAgcmV0dXJuIHVzZXJJZHM7XG4gICAgICAvLyB9XG4gICAgICAvL1xuICAgICAgLy8gT3RoZXJ3aXNlLCBmaWx0ZXIgdXNlcklkcyBmb3IgdGhlIHNlYXJjaCBgdGV4dGAgYW5kIHJldHVyblxuICAgICAgLy8gcmV0dXJuIHVzZXJJZHMuZmlsdGVyKCh1c2VySWQpID0+XG4gICAgICAvLyAgIHVzZXJJZC50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHRleHQudG9Mb3dlckNhc2UoKSlcbiAgICAgIC8vICk7XG5cbiAgICAgIHJldHVybiBbXTtcbiAgICB9LFxuICB9XG4pO1xuIl0sIm5hbWVzIjpbImNyZWF0ZUNsaWVudCIsImNyZWF0ZVJvb21Db250ZXh0IiwiY2xpZW50IiwicHVibGljQXBpS2V5IiwicHJvY2VzcyIsImVudiIsIk5FWFRfUFVCTElDX0xJVkVCTE9DS1NfUFVCTElDX0tFWSIsInN1c3BlbnNlIiwiUm9vbVByb3ZpZGVyIiwidXNlUm9vbSIsInVzZU15UHJlc2VuY2UiLCJ1c2VVcGRhdGVNeVByZXNlbmNlIiwidXNlU2VsZiIsInVzZU90aGVycyIsInVzZU90aGVyc01hcHBlZCIsInVzZU90aGVyc0Nvbm5lY3Rpb25JZHMiLCJ1c2VPdGhlciIsInVzZUJyb2FkY2FzdEV2ZW50IiwidXNlRXZlbnRMaXN0ZW5lciIsInVzZUVycm9yTGlzdGVuZXIiLCJ1c2VTdG9yYWdlIiwidXNlT2JqZWN0IiwidXNlTWFwIiwidXNlTGlzdCIsInVzZUJhdGNoIiwidXNlSGlzdG9yeSIsInVzZVVuZG8iLCJ1c2VSZWRvIiwidXNlQ2FuVW5kbyIsInVzZUNhblJlZG8iLCJ1c2VNdXRhdGlvbiIsInVzZVN0YXR1cyIsInVzZUxvc3RDb25uZWN0aW9uTGlzdGVuZXIiLCJ1c2VUaHJlYWRzIiwidXNlVXNlciIsInVzZUNyZWF0ZVRocmVhZCIsInVzZUVkaXRUaHJlYWRNZXRhZGF0YSIsInVzZUNyZWF0ZUNvbW1lbnQiLCJ1c2VFZGl0Q29tbWVudCIsInVzZURlbGV0ZUNvbW1lbnQiLCJ1c2VBZGRSZWFjdGlvbiIsInVzZVJlbW92ZVJlYWN0aW9uIiwicmVzb2x2ZVVzZXJzIiwidXNlcklkcyIsInJlc29sdmVNZW50aW9uU3VnZ2VzdGlvbnMiLCJ0ZXh0Iiwicm9vbUlkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./liveblocks.config.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@liveblocks/core/dist/index.mjs":
/*!******************************************************!*\
  !*** ./node_modules/@liveblocks/core/dist/index.mjs ***!
  \******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClientMsgCode: function() { return /* binding */ ClientMsgCode; },\n/* harmony export */   CommentsApiError: function() { return /* binding */ CommentsApiError; },\n/* harmony export */   CrdtType: function() { return /* binding */ CrdtType; },\n/* harmony export */   LiveList: function() { return /* binding */ LiveList; },\n/* harmony export */   LiveMap: function() { return /* binding */ LiveMap; },\n/* harmony export */   LiveObject: function() { return /* binding */ LiveObject; },\n/* harmony export */   OpCode: function() { return /* binding */ OpCode; },\n/* harmony export */   ServerMsgCode: function() { return /* binding */ ServerMsgCode; },\n/* harmony export */   WebsocketCloseCodes: function() { return /* binding */ WebsocketCloseCodes; },\n/* harmony export */   ackOp: function() { return /* binding */ ackOp; },\n/* harmony export */   asPos: function() { return /* binding */ asPos; },\n/* harmony export */   assert: function() { return /* binding */ assert; },\n/* harmony export */   assertNever: function() { return /* binding */ assertNever; },\n/* harmony export */   b64decode: function() { return /* binding */ b64decode; },\n/* harmony export */   cloneLson: function() { return /* binding */ cloneLson; },\n/* harmony export */   console: function() { return /* binding */ fancy_console_exports; },\n/* harmony export */   convertToCommentData: function() { return /* binding */ convertToCommentData; },\n/* harmony export */   convertToCommentUserReaction: function() { return /* binding */ convertToCommentUserReaction; },\n/* harmony export */   convertToThreadData: function() { return /* binding */ convertToThreadData; },\n/* harmony export */   createAsyncCache: function() { return /* binding */ createAsyncCache; },\n/* harmony export */   createClient: function() { return /* binding */ createClient; },\n/* harmony export */   createCommentsApi: function() { return /* binding */ createCommentsApi; },\n/* harmony export */   deprecate: function() { return /* binding */ deprecate; },\n/* harmony export */   deprecateIf: function() { return /* binding */ deprecateIf; },\n/* harmony export */   detectDupes: function() { return /* binding */ detectDupes; },\n/* harmony export */   errorIf: function() { return /* binding */ errorIf; },\n/* harmony export */   freeze: function() { return /* binding */ freeze; },\n/* harmony export */   getMentionedIdsFromCommentBody: function() { return /* binding */ getMentionedIdsFromCommentBody; },\n/* harmony export */   isChildCrdt: function() { return /* binding */ isChildCrdt; },\n/* harmony export */   isJsonArray: function() { return /* binding */ isJsonArray; },\n/* harmony export */   isJsonObject: function() { return /* binding */ isJsonObject; },\n/* harmony export */   isJsonScalar: function() { return /* binding */ isJsonScalar; },\n/* harmony export */   isLiveNode: function() { return /* binding */ isLiveNode; },\n/* harmony export */   isPlainObject: function() { return /* binding */ isPlainObject; },\n/* harmony export */   isRootCrdt: function() { return /* binding */ isRootCrdt; },\n/* harmony export */   legacy_patchImmutableObject: function() { return /* binding */ legacy_patchImmutableObject; },\n/* harmony export */   lsonToJson: function() { return /* binding */ lsonToJson; },\n/* harmony export */   makeEventSource: function() { return /* binding */ makeEventSource; },\n/* harmony export */   makePoller: function() { return /* binding */ makePoller; },\n/* harmony export */   makePosition: function() { return /* binding */ makePosition; },\n/* harmony export */   nn: function() { return /* binding */ nn; },\n/* harmony export */   patchLiveObjectKey: function() { return /* binding */ patchLiveObjectKey; },\n/* harmony export */   raise: function() { return /* binding */ raise; },\n/* harmony export */   shallow: function() { return /* binding */ shallow; },\n/* harmony export */   stringify: function() { return /* binding */ stringify; },\n/* harmony export */   stringifyCommentBody: function() { return /* binding */ stringifyCommentBody; },\n/* harmony export */   throwUsageError: function() { return /* binding */ throwUsageError; },\n/* harmony export */   toPlainLson: function() { return /* binding */ toPlainLson; },\n/* harmony export */   tryParseJson: function() { return /* binding */ tryParseJson; },\n/* harmony export */   withTimeout: function() { return /* binding */ withTimeout; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @swc/helpers/_/_tagged_template_literal */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_tagged_template_literal.js\");\n\nfunction _templateObject() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"<p>\",\n        \"</p>\"\n    ]);\n    _templateObject = function() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject1() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"<strong>\",\n        \"</strong>\"\n    ]);\n    _templateObject1 = function() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject2() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"<em>\",\n        \"</em>\"\n    ]);\n    _templateObject2 = function() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject3() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"<s>\",\n        \"</s>\"\n    ]);\n    _templateObject3 = function() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject4() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"<code>\",\n        \"</code>\"\n    ]);\n    _templateObject4 = function() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject5() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        '<a href=\"',\n        '\" target=\"_blank\" rel=\"noopener noreferrer\">',\n        \"</a>\"\n    ]);\n    _templateObject5 = function() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject6() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"<span data-mention>@\",\n        \"</span>\"\n    ]);\n    _templateObject6 = function() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject7() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"**\",\n        \"**\"\n    ]);\n    _templateObject7 = function() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject8() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"_\",\n        \"_\"\n    ]);\n    _templateObject8 = function() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject9() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"~~\",\n        \"~~\"\n    ]);\n    _templateObject9 = function() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject10() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"`\",\n        \"`\"\n    ], [\n        \"\\\\`\",\n        \"\\\\`\"\n    ]);\n    _templateObject10 = function() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject11() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"[\",\n        \"](\",\n        \")\"\n    ]);\n    _templateObject11 = function() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject12() {\n    const data = (0,_swc_helpers_tagged_template_literal__WEBPACK_IMPORTED_MODULE_0__._)([\n        \"@\",\n        \"\"\n    ]);\n    _templateObject12 = function() {\n        return data;\n    };\n    return data;\n}\nvar __defProp = Object.defineProperty;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\n// src/version.ts\nvar PKG_NAME = \"@liveblocks/core\";\nvar PKG_VERSION = \"1.9.7\";\nvar PKG_FORMAT = \"esm\";\n// src/dupe-detection.ts\nvar g = typeof globalThis !== \"undefined\" ? globalThis :  true ? window : 0;\nvar crossLinkedDocs = \"https://liveblocks.io/docs/errors/cross-linked\";\nvar dupesDocs = \"https://liveblocks.io/docs/errors/dupes\";\nvar SPACE = \" \";\nfunction error(msg) {\n    if (false) {} else {\n        throw new Error(msg);\n    }\n}\nfunction detectDupes(pkgName, pkgVersion, pkgFormat) {\n    const pkgId = Symbol.for(pkgName);\n    const pkgBuildInfo = pkgFormat ? \"\".concat(pkgVersion || \"dev\", \" (\").concat(pkgFormat, \")\") : pkgVersion || \"dev\";\n    if (!g[pkgId]) {\n        g[pkgId] = pkgBuildInfo;\n    } else if (g[pkgId] === pkgBuildInfo) {} else {\n        const msg = [\n            \"Multiple copies of Liveblocks are being loaded in your project. This will cause issues! See \".concat(dupesDocs + SPACE),\n            \"\",\n            \"Conflicts:\",\n            \"- \".concat(pkgName, \" \").concat(g[pkgId], \" (already loaded)\"),\n            \"- \".concat(pkgName, \" \").concat(pkgBuildInfo, \" (trying to load this now)\")\n        ].join(\"\\n\");\n        error(msg);\n    }\n    if (pkgVersion && PKG_VERSION && pkgVersion !== PKG_VERSION) {\n        error([\n            \"Cross-linked versions of Liveblocks found, which will cause issues! See \".concat(crossLinkedDocs + SPACE),\n            \"\",\n            \"Conflicts:\",\n            \"- \".concat(PKG_NAME, \" is at \").concat(PKG_VERSION),\n            \"- \".concat(pkgName, \" is at \").concat(pkgVersion),\n            \"\",\n            \"Always upgrade all Liveblocks packages to the same version number.\"\n        ].join(\"\\n\"));\n    }\n}\n// src/lib/assert.ts\nfunction assertNever(_value, errmsg) {\n    throw new Error(errmsg);\n}\nfunction assert(condition, errmsg) {\n    if (true) {\n        if (!condition) {\n            const err = new Error(errmsg);\n            err.name = \"Assertion failure\";\n            throw err;\n        }\n    }\n}\nfunction nn(value) {\n    let errmsg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"Expected value to be non-nullable\";\n    assert(value !== null && value !== void 0, errmsg);\n    return value;\n}\n// src/lib/controlledPromise.ts\nfunction controlledPromise() {\n    let flagger;\n    const promise = new Promise((res)=>{\n        flagger = res;\n    });\n    if (!flagger) {\n        throw new Error(\"Should never happen\");\n    }\n    return [\n        promise,\n        flagger\n    ];\n}\n// src/lib/EventSource.ts\nfunction makeEventSource() {\n    const _onetimeObservers = /* @__PURE__ */ new Set();\n    const _observers = /* @__PURE__ */ new Set();\n    let _buffer = null;\n    function pause() {\n        _buffer = [];\n    }\n    function unpause() {\n        if (_buffer === null) {\n            return;\n        }\n        for (const event of _buffer){\n            notify(event);\n        }\n        _buffer = null;\n    }\n    function subscribe(callback) {\n        _observers.add(callback);\n        return ()=>_observers.delete(callback);\n    }\n    function subscribeOnce(callback) {\n        _onetimeObservers.add(callback);\n        return ()=>_onetimeObservers.delete(callback);\n    }\n    async function waitUntil(predicate) {\n        let unsub;\n        return new Promise((res)=>{\n            unsub = subscribe((event)=>{\n                if (predicate === void 0 || predicate(event)) {\n                    res(event);\n                }\n            });\n        }).finally(()=>unsub === null || unsub === void 0 ? void 0 : unsub());\n    }\n    function notifyOrBuffer(event) {\n        if (_buffer !== null) {\n            _buffer.push(event);\n        } else {\n            notify(event);\n        }\n    }\n    function notify(event) {\n        _onetimeObservers.forEach((callback)=>callback(event));\n        _onetimeObservers.clear();\n        _observers.forEach((callback)=>callback(event));\n    }\n    function clear() {\n        _onetimeObservers.clear();\n        _observers.clear();\n    }\n    function count() {\n        return _onetimeObservers.size + _observers.size;\n    }\n    return {\n        // Private/internal control over event emission\n        notify: notifyOrBuffer,\n        subscribe,\n        subscribeOnce,\n        clear,\n        count,\n        waitUntil,\n        pause,\n        unpause,\n        // Publicly exposable subscription API\n        observable: {\n            subscribe,\n            subscribeOnce,\n            waitUntil\n        }\n    };\n}\n// src/lib/fancy-console.ts\nvar fancy_console_exports = {};\n__export(fancy_console_exports, {\n    error: ()=>error2,\n    errorWithTitle: ()=>errorWithTitle,\n    warn: ()=>warn,\n    warnWithTitle: ()=>warnWithTitle\n});\nvar badge = \"background:#0e0d12;border-radius:9999px;color:#fff;padding:3px 7px;font-family:sans-serif;font-weight:600;\";\nvar bold = \"font-weight:600\";\nfunction wrap(method) {\n    return  false ? 0 : /* istanbul ignore next */ function(message) {\n        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            args[_key - 1] = arguments[_key];\n        }\n        return console[method](\"%cLiveblocks\", badge, message, ...args);\n    };\n}\nvar warn = wrap(\"warn\");\nvar error2 = wrap(\"error\");\nfunction wrapWithTitle(method) {\n    return  false ? 0 : /* istanbul ignore next */ function(title, message) {\n        for(var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){\n            args[_key - 2] = arguments[_key];\n        }\n        return console[method](\"%cLiveblocks%c \".concat(title), badge, bold, message, ...args);\n    };\n}\nvar warnWithTitle = wrapWithTitle(\"warn\");\nvar errorWithTitle = wrapWithTitle(\"error\");\n// src/lib/fsm.ts\nfunction distance(state1, state2) {\n    if (state1 === state2) {\n        return [\n            0,\n            0\n        ];\n    }\n    const chunks1 = state1.split(\".\");\n    const chunks2 = state2.split(\".\");\n    const minLen = Math.min(chunks1.length, chunks2.length);\n    let shared = 0;\n    for(; shared < minLen; shared++){\n        if (chunks1[shared] !== chunks2[shared]) {\n            break;\n        }\n    }\n    const up = chunks1.length - shared;\n    const down = chunks2.length - shared;\n    return [\n        up,\n        down\n    ];\n}\nfunction patterns(targetState, levels) {\n    const parts = targetState.split(\".\");\n    if (levels < 1 || levels > parts.length + 1) {\n        throw new Error(\"Invalid number of levels\");\n    }\n    const result = [];\n    if (levels > parts.length) {\n        result.push(\"*\");\n    }\n    for(let i = parts.length - levels + 1; i < parts.length; i++){\n        const slice = parts.slice(0, i);\n        if (slice.length > 0) {\n            result.push(slice.join(\".\") + \".*\");\n        }\n    }\n    result.push(targetState);\n    return result;\n}\nvar SafeContext = class {\n    get current() {\n        return this.curr;\n    }\n    /**\n   * Call a callback function that allows patching of the context, by\n   * calling `context.patch()`. Patching is only allowed for the duration\n   * of this window.\n   */ allowPatching(callback) {\n        const self = this;\n        let allowed = true;\n        const patchableContext = {\n            ...this.curr,\n            patch (patch) {\n                if (allowed) {\n                    self.curr = Object.assign({}, self.curr, patch);\n                    for (const pair of Object.entries(patch)){\n                        const [key, value] = pair;\n                        if (key !== \"patch\") {\n                            this[key] = value;\n                        }\n                    }\n                } else {\n                    throw new Error(\"Can no longer patch stale context\");\n                }\n            }\n        };\n        callback(patchableContext);\n        allowed = false;\n        return;\n    }\n    constructor(initialContext){\n        this.curr = initialContext;\n    }\n};\nvar nextId = 1;\nvar FSM = class {\n    /**\n   * Returns the initial state, which is defined by the first call made to\n   * .addState().\n   */ get initialState() {\n        const result = this.states.values()[Symbol.iterator]().next();\n        if (result.done) {\n            throw new Error(\"No states defined yet\");\n        } else {\n            return result.value;\n        }\n    }\n    get currentState() {\n        if (this.currentStateOrNull === null) {\n            if (this.runningState === 0 /* NOT_STARTED_YET */ ) {\n                throw new Error(\"Not started yet\");\n            } else {\n                throw new Error(\"Already stopped\");\n            }\n        }\n        return this.currentStateOrNull;\n    }\n    /**\n   * Starts the machine by entering the initial state.\n   */ start() {\n        if (this.runningState !== 0 /* NOT_STARTED_YET */ ) {\n            throw new Error(\"State machine has already started\");\n        }\n        this.runningState = 1 /* STARTED */ ;\n        this.currentStateOrNull = this.initialState;\n        this.enter(null);\n        return this;\n    }\n    /**\n   * Stops the state machine. Stopping the state machine will call exit\n   * handlers for the current state, but not enter a new state.\n   */ stop() {\n        if (this.runningState !== 1 /* STARTED */ ) {\n            throw new Error(\"Cannot stop a state machine that hasn't started yet\");\n        }\n        this.exit(null);\n        this.runningState = 2 /* STOPPED */ ;\n        this.currentStateOrNull = null;\n    }\n    get context() {\n        return this.currentContext.current;\n    }\n    /**\n   * Define an explicit finite state in the state machine.\n   */ addState(state) {\n        if (this.runningState !== 0 /* NOT_STARTED_YET */ ) {\n            throw new Error(\"Already started\");\n        }\n        this.states.add(state);\n        return this;\n    }\n    onEnter(nameOrPattern, enterFn) {\n        if (this.runningState !== 0 /* NOT_STARTED_YET */ ) {\n            throw new Error(\"Already started\");\n        } else if (this.enterFns.has(nameOrPattern)) {\n            throw new Error(// TODO We _currently_ don't support multiple .onEnters() for the same\n            // state, but this is not a fundamental limitation. Just not\n            // implemented yet. If we wanted to, we could make this an array.\n            \"enter/exit function for \".concat(nameOrPattern, \" already exists\"));\n        }\n        this.enterFns.set(nameOrPattern, enterFn);\n        return this;\n    }\n    onEnterAsync(nameOrPattern, promiseFn, onOK, onError) {\n        return this.onEnter(nameOrPattern, ()=>{\n            let cancelled = false;\n            void promiseFn(this.currentContext.current).then(// On OK\n            (data)=>{\n                if (!cancelled) {\n                    this.transition({\n                        type: \"ASYNC_OK\",\n                        data\n                    }, onOK);\n                }\n            }, // On Error\n            (reason)=>{\n                if (!cancelled) {\n                    this.transition({\n                        type: \"ASYNC_ERROR\",\n                        reason\n                    }, onError);\n                }\n            });\n            return ()=>{\n                cancelled = true;\n            };\n        });\n    }\n    getStatesMatching(nameOrPattern) {\n        const matches = [];\n        if (nameOrPattern === \"*\") {\n            for (const state of this.states){\n                matches.push(state);\n            }\n        } else if (nameOrPattern.endsWith(\".*\")) {\n            const prefix = nameOrPattern.slice(0, -1);\n            for (const state of this.states){\n                if (state.startsWith(prefix)) {\n                    matches.push(state);\n                }\n            }\n        } else {\n            const name = nameOrPattern;\n            if (this.states.has(name)) {\n                matches.push(name);\n            }\n        }\n        if (matches.length === 0) {\n            throw new Error(\"No states match \".concat(JSON.stringify(nameOrPattern)));\n        }\n        return matches;\n    }\n    /**\n   * Define all allowed outgoing transitions for a state.\n   *\n   * The targets for each event can be defined as a function which returns the\n   * next state to transition to. These functions can look at the `event` or\n   * `context` params to conditionally decide which next state to transition\n   * to.\n   *\n   * If you set it to `null`, then the transition will be explicitly forbidden\n   * and throw an error. If you don't define a target for a transition, then\n   * such events will get ignored.\n   */ addTransitions(nameOrPattern, mapping) {\n        if (this.runningState !== 0 /* NOT_STARTED_YET */ ) {\n            throw new Error(\"Already started\");\n        }\n        for (const srcState of this.getStatesMatching(nameOrPattern)){\n            let map = this.allowedTransitions.get(srcState);\n            if (map === void 0) {\n                map = /* @__PURE__ */ new Map();\n                this.allowedTransitions.set(srcState, map);\n            }\n            for (const [type, target_] of Object.entries(mapping)){\n                if (map.has(type)) {\n                    throw new Error('Trying to set transition \"'.concat(type, '\" on \"').concat(srcState, '\" (via \"').concat(nameOrPattern, '\"), but a transition already exists there.'));\n                }\n                const target = target_;\n                this.knownEventTypes.add(type);\n                if (target !== void 0) {\n                    const targetFn = typeof target === \"function\" ? target : ()=>target;\n                    map.set(type, targetFn);\n                }\n            }\n        }\n        return this;\n    }\n    /**\n   * Like `.addTransition()`, but takes an (anonymous) transition whenever the\n   * timer fires.\n   *\n   * @param stateOrPattern The state name, or state group pattern name.\n   * @param after          Number of milliseconds after which to take the\n   *                       transition. If in the mean time, another transition\n   *                       is taken, the timer will get cancelled.\n   * @param target     The target state to go to.\n   */ addTimedTransition(stateOrPattern, after2, target) {\n        return this.onEnter(stateOrPattern, ()=>{\n            const ms = typeof after2 === \"function\" ? after2(this.currentContext.current) : after2;\n            const timeoutID = setTimeout(()=>{\n                this.transition({\n                    type: \"TIMER\"\n                }, target);\n            }, ms);\n            return ()=>{\n                clearTimeout(timeoutID);\n            };\n        });\n    }\n    getTargetFn(eventName) {\n        var _this_allowedTransitions_get;\n        return (_this_allowedTransitions_get = this.allowedTransitions.get(this.currentState)) === null || _this_allowedTransitions_get === void 0 ? void 0 : _this_allowedTransitions_get.get(eventName);\n    }\n    /**\n   * Exits the current state, and executes any necessary cleanup functions.\n   * Call this before changing the current state to the next state.\n   *\n   * @param levels Defines how many \"levels\" of nesting will be\n   * exited. For example, if you transition from `foo.bar.qux` to\n   * `foo.bar.baz`, then the level is 1. But if you transition from\n   * `foo.bar.qux` to `bla.bla`, then the level is 3.\n   * If `null`, it will exit all levels.\n   */ exit(levels) {\n        this.eventHub.willExitState.notify(this.currentState);\n        this.currentContext.allowPatching((patchableContext)=>{\n            levels = levels !== null && levels !== void 0 ? levels : this.cleanupStack.length;\n            for(let i = 0; i < levels; i++){\n                var _this_cleanupStack_pop;\n                (_this_cleanupStack_pop = this.cleanupStack.pop()) === null || _this_cleanupStack_pop === void 0 ? void 0 : _this_cleanupStack_pop(patchableContext);\n            }\n        });\n    }\n    /**\n   * Enters the current state, and executes any necessary onEnter handlers.\n   * Call this directly _after_ setting the current state to the next state.\n   */ enter(levels) {\n        const enterPatterns = patterns(this.currentState, levels !== null && levels !== void 0 ? levels : this.currentState.split(\".\").length + 1);\n        this.currentContext.allowPatching((patchableContext)=>{\n            for (const pattern of enterPatterns){\n                const enterFn = this.enterFns.get(pattern);\n                const cleanupFn = enterFn === null || enterFn === void 0 ? void 0 : enterFn(patchableContext);\n                if (typeof cleanupFn === \"function\") {\n                    this.cleanupStack.push(cleanupFn);\n                } else {\n                    this.cleanupStack.push(null);\n                }\n            }\n        });\n        this.eventHub.didEnterState.notify(this.currentState);\n    }\n    /**\n   * Sends an event to the machine, which may cause an internal state\n   * transition to happen. When that happens, will trigger side effects.\n   */ send(event) {\n        if (!this.knownEventTypes.has(event.type)) {\n            throw new Error(\"Invalid event \".concat(JSON.stringify(event.type)));\n        }\n        if (this.runningState === 2 /* STOPPED */ ) {\n            return;\n        }\n        const targetFn = this.getTargetFn(event.type);\n        if (targetFn !== void 0) {\n            return this.transition(event, targetFn);\n        } else {\n            this.eventHub.didIgnoreEvent.notify(event);\n        }\n    }\n    transition(event, target) {\n        this.eventHub.didReceiveEvent.notify(event);\n        const oldState = this.currentState;\n        const targetFn = typeof target === \"function\" ? target : ()=>target;\n        const nextTarget = targetFn(event, this.currentContext.current);\n        let nextState;\n        let effects = void 0;\n        if (nextTarget === null) {\n            this.eventHub.didIgnoreEvent.notify(event);\n            return;\n        }\n        if (typeof nextTarget === \"string\") {\n            nextState = nextTarget;\n        } else {\n            nextState = nextTarget.target;\n            effects = Array.isArray(nextTarget.effect) ? nextTarget.effect : [\n                nextTarget.effect\n            ];\n        }\n        if (!this.states.has(nextState)) {\n            throw new Error(\"Invalid next state name: \".concat(JSON.stringify(nextState)));\n        }\n        this.eventHub.willTransition.notify({\n            from: oldState,\n            to: nextState\n        });\n        const [up, down] = distance(this.currentState, nextState);\n        if (up > 0) {\n            this.exit(up);\n        }\n        this.currentStateOrNull = nextState;\n        if (effects !== void 0) {\n            const effectsToRun = effects;\n            this.currentContext.allowPatching((patchableContext)=>{\n                for (const effect of effectsToRun){\n                    if (typeof effect === \"function\") {\n                        effect(patchableContext, event);\n                    } else {\n                        patchableContext.patch(effect);\n                    }\n                }\n            });\n        }\n        if (down > 0) {\n            this.enter(down);\n        }\n    }\n    constructor(initialContext){\n        this.id = nextId++;\n        this.runningState = 0 /* NOT_STARTED_YET */ ;\n        this.currentStateOrNull = null;\n        this.states = /* @__PURE__ */ new Set();\n        this.enterFns = /* @__PURE__ */ new Map();\n        this.cleanupStack = [];\n        this.knownEventTypes = /* @__PURE__ */ new Set();\n        this.allowedTransitions = /* @__PURE__ */ new Map();\n        this.currentContext = new SafeContext(initialContext);\n        this.eventHub = {\n            didReceiveEvent: makeEventSource(),\n            willTransition: makeEventSource(),\n            didIgnoreEvent: makeEventSource(),\n            willExitState: makeEventSource(),\n            didEnterState: makeEventSource()\n        };\n        this.events = {\n            didReceiveEvent: this.eventHub.didReceiveEvent.observable,\n            willTransition: this.eventHub.willTransition.observable,\n            didIgnoreEvent: this.eventHub.didIgnoreEvent.observable,\n            willExitState: this.eventHub.willExitState.observable,\n            didEnterState: this.eventHub.didEnterState.observable\n        };\n    }\n};\n// src/lib/utils.ts\nfunction raise(msg) {\n    throw new Error(msg);\n}\nfunction isPlainObject(blob) {\n    return blob !== null && typeof blob === \"object\" && Object.prototype.toString.call(blob) === \"[object Object]\";\n}\nfunction entries(obj) {\n    return Object.entries(obj);\n}\nfunction tryParseJson(rawMessage) {\n    try {\n        return JSON.parse(rawMessage);\n    } catch (e) {\n        return void 0;\n    }\n}\nfunction deepClone(value) {\n    return JSON.parse(JSON.stringify(value));\n}\nfunction b64decode(b64value) {\n    try {\n        const formattedValue = b64value.replace(/-/g, \"+\").replace(/_/g, \"/\");\n        const decodedValue = decodeURIComponent(atob(formattedValue).split(\"\").map(function(c) {\n            return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\n        }).join(\"\"));\n        return decodedValue;\n    } catch (err) {\n        return atob(b64value);\n    }\n}\nfunction compact(items) {\n    return items.filter((item)=>item !== null && item !== void 0);\n}\nfunction compactObject(obj) {\n    const newObj = {\n        ...obj\n    };\n    Object.keys(obj).forEach((k)=>{\n        const key = k;\n        if (newObj[key] === void 0) {\n            delete newObj[key];\n        }\n    });\n    return newObj;\n}\nasync function withTimeout(promise, millis, errmsg) {\n    let timerID;\n    const timer$ = new Promise((_, reject)=>{\n        timerID = setTimeout(()=>{\n            reject(new Error(errmsg));\n        }, millis);\n    });\n    return Promise.race([\n        promise,\n        timer$\n    ]).finally(()=>clearTimeout(timerID));\n}\n// src/protocol/ServerMsg.ts\nvar ServerMsgCode = /* @__PURE__ */ ((ServerMsgCode2)=>{\n    ServerMsgCode2[ServerMsgCode2[\"UPDATE_PRESENCE\"] = 100] = \"UPDATE_PRESENCE\";\n    ServerMsgCode2[ServerMsgCode2[\"USER_JOINED\"] = 101] = \"USER_JOINED\";\n    ServerMsgCode2[ServerMsgCode2[\"USER_LEFT\"] = 102] = \"USER_LEFT\";\n    ServerMsgCode2[ServerMsgCode2[\"BROADCASTED_EVENT\"] = 103] = \"BROADCASTED_EVENT\";\n    ServerMsgCode2[ServerMsgCode2[\"ROOM_STATE\"] = 104] = \"ROOM_STATE\";\n    ServerMsgCode2[ServerMsgCode2[\"INITIAL_STORAGE_STATE\"] = 200] = \"INITIAL_STORAGE_STATE\";\n    ServerMsgCode2[ServerMsgCode2[\"UPDATE_STORAGE\"] = 201] = \"UPDATE_STORAGE\";\n    ServerMsgCode2[ServerMsgCode2[\"REJECT_STORAGE_OP\"] = 299] = \"REJECT_STORAGE_OP\";\n    ServerMsgCode2[ServerMsgCode2[\"UPDATE_YDOC\"] = 300] = \"UPDATE_YDOC\";\n    ServerMsgCode2[ServerMsgCode2[\"THREAD_CREATED\"] = 400] = \"THREAD_CREATED\";\n    ServerMsgCode2[ServerMsgCode2[\"THREAD_METADATA_UPDATED\"] = 401] = \"THREAD_METADATA_UPDATED\";\n    ServerMsgCode2[ServerMsgCode2[\"COMMENT_CREATED\"] = 402] = \"COMMENT_CREATED\";\n    ServerMsgCode2[ServerMsgCode2[\"COMMENT_EDITED\"] = 403] = \"COMMENT_EDITED\";\n    ServerMsgCode2[ServerMsgCode2[\"COMMENT_DELETED\"] = 404] = \"COMMENT_DELETED\";\n    ServerMsgCode2[ServerMsgCode2[\"COMMENT_REACTION_ADDED\"] = 405] = \"COMMENT_REACTION_ADDED\";\n    ServerMsgCode2[ServerMsgCode2[\"COMMENT_REACTION_REMOVED\"] = 406] = \"COMMENT_REACTION_REMOVED\";\n    return ServerMsgCode2;\n})(ServerMsgCode || {});\n// src/types/IWebSocket.ts\nvar WebsocketCloseCodes = /* @__PURE__ */ ((WebsocketCloseCodes2)=>{\n    WebsocketCloseCodes2[WebsocketCloseCodes2[\"CLOSE_ABNORMAL\"] = 1006] = \"CLOSE_ABNORMAL\";\n    WebsocketCloseCodes2[WebsocketCloseCodes2[\"UNEXPECTED_CONDITION\"] = 1011] = \"UNEXPECTED_CONDITION\";\n    WebsocketCloseCodes2[WebsocketCloseCodes2[\"TRY_AGAIN_LATER\"] = 1013] = \"TRY_AGAIN_LATER\";\n    WebsocketCloseCodes2[WebsocketCloseCodes2[\"INVALID_MESSAGE_FORMAT\"] = 4e3] = \"INVALID_MESSAGE_FORMAT\";\n    WebsocketCloseCodes2[WebsocketCloseCodes2[\"NOT_ALLOWED\"] = 4001] = \"NOT_ALLOWED\";\n    WebsocketCloseCodes2[WebsocketCloseCodes2[\"MAX_NUMBER_OF_MESSAGES_PER_SECONDS\"] = 4002] = \"MAX_NUMBER_OF_MESSAGES_PER_SECONDS\";\n    WebsocketCloseCodes2[WebsocketCloseCodes2[\"MAX_NUMBER_OF_CONCURRENT_CONNECTIONS\"] = 4003] = \"MAX_NUMBER_OF_CONCURRENT_CONNECTIONS\";\n    WebsocketCloseCodes2[WebsocketCloseCodes2[\"MAX_NUMBER_OF_MESSAGES_PER_DAY_PER_APP\"] = 4004] = \"MAX_NUMBER_OF_MESSAGES_PER_DAY_PER_APP\";\n    WebsocketCloseCodes2[WebsocketCloseCodes2[\"MAX_NUMBER_OF_CONCURRENT_CONNECTIONS_PER_ROOM\"] = 4005] = \"MAX_NUMBER_OF_CONCURRENT_CONNECTIONS_PER_ROOM\";\n    WebsocketCloseCodes2[WebsocketCloseCodes2[\"TOKEN_EXPIRED\"] = 4109] = \"TOKEN_EXPIRED\";\n    WebsocketCloseCodes2[WebsocketCloseCodes2[\"CLOSE_WITHOUT_RETRY\"] = 4999] = \"CLOSE_WITHOUT_RETRY\";\n    return WebsocketCloseCodes2;\n})(WebsocketCloseCodes || {});\nfunction shouldDisconnect(code) {\n    return code === 4999 /* CLOSE_WITHOUT_RETRY */  || code >= 4e3 && code < 4100;\n}\nfunction shouldReauth(code) {\n    return code >= 4100 && code < 4200;\n}\nfunction shouldRetryWithoutReauth(code) {\n    return code === 1013 /* TRY_AGAIN_LATER */  || code >= 4200 && code < 4300;\n}\n// src/connection.ts\nfunction isIdle(status) {\n    return status === \"initial\" || status === \"disconnected\";\n}\nfunction newToLegacyStatus(status) {\n    switch(status){\n        case \"connecting\":\n            return \"connecting\";\n        case \"connected\":\n            return \"open\";\n        case \"reconnecting\":\n            return \"unavailable\";\n        case \"disconnected\":\n            return \"failed\";\n        case \"initial\":\n            return \"closed\";\n        default:\n            return \"closed\";\n    }\n}\nfunction toNewConnectionStatus(machine) {\n    const state = machine.currentState;\n    switch(state){\n        case \"@ok.connected\":\n        case \"@ok.awaiting-pong\":\n            return \"connected\";\n        case \"@idle.initial\":\n            return \"initial\";\n        case \"@auth.busy\":\n        case \"@auth.backoff\":\n        case \"@connecting.busy\":\n        case \"@connecting.backoff\":\n        case \"@idle.zombie\":\n            return machine.context.successCount > 0 ? \"reconnecting\" : \"connecting\";\n        case \"@idle.failed\":\n            return \"disconnected\";\n        default:\n            return assertNever(state, \"Unknown state\");\n    }\n}\nvar BACKOFF_DELAYS = [\n    250,\n    500,\n    1e3,\n    2e3,\n    4e3,\n    8e3,\n    1e4\n];\nvar RESET_DELAY = BACKOFF_DELAYS[0] - 1;\nvar BACKOFF_DELAYS_SLOW = [\n    2e3,\n    3e4,\n    6e4,\n    3e5\n];\nvar HEARTBEAT_INTERVAL = 3e4;\nvar PONG_TIMEOUT = 2e3;\nvar AUTH_TIMEOUT = 1e4;\nvar SOCKET_CONNECT_TIMEOUT = 1e4;\nvar StopRetrying = class extends Error {\n    constructor(reason){\n        super(reason);\n    }\n};\nvar LiveblocksError = class extends Error {\n    constructor(message, code){\n        super(message);\n        this.code = code;\n    }\n};\nfunction nextBackoffDelay(currentDelay) {\n    let delays = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : BACKOFF_DELAYS;\n    var _delays_find;\n    return (_delays_find = delays.find((delay)=>delay > currentDelay)) !== null && _delays_find !== void 0 ? _delays_find : delays[delays.length - 1];\n}\nfunction increaseBackoffDelay(context) {\n    context.patch({\n        backoffDelay: nextBackoffDelay(context.backoffDelay)\n    });\n}\nfunction increaseBackoffDelayAggressively(context) {\n    context.patch({\n        backoffDelay: nextBackoffDelay(context.backoffDelay, BACKOFF_DELAYS_SLOW)\n    });\n}\nfunction resetSuccessCount(context) {\n    context.patch({\n        successCount: 0\n    });\n}\nfunction log(level, message) {\n    const logger = level === 2 /* ERROR */  ? error2 : level === 1 /* WARN */  ? warn : /* black hole */ ()=>{};\n    return ()=>{\n        logger(message);\n    };\n}\nfunction logPrematureErrorOrCloseEvent(e) {\n    const conn = \"Connection to Liveblocks websocket server\";\n    return (ctx)=>{\n        if (e instanceof Error) {\n            warn(\"\".concat(conn, \" could not be established. \").concat(String(e)));\n        } else {\n            warn(isCloseEvent(e) ? \"\".concat(conn, \" closed prematurely (code: \").concat(e.code, \"). Retrying in \").concat(ctx.backoffDelay, \"ms.\") : \"\".concat(conn, \" could not be established.\"));\n        }\n    };\n}\nfunction logCloseEvent(event) {\n    return (ctx)=>{\n        warn(\"Connection to Liveblocks websocket server closed (code: \".concat(event.code, \"). Retrying in \").concat(ctx.backoffDelay, \"ms.\"));\n    };\n}\nvar logPermanentClose = log(1 /* WARN */ , \"Connection to WebSocket closed permanently. Won't retry.\");\nfunction isCloseEvent(error3) {\n    return !(error3 instanceof Error) && error3.type === \"close\";\n}\nfunction enableTracing(machine) {\n    const start = /* @__PURE__ */ new Date().getTime();\n    function log2() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        warn(\"\".concat(((/* @__PURE__ */ new Date().getTime() - start) / 1e3).toFixed(2), \" [FSM #\").concat(machine.id, \"]\"), ...args);\n    }\n    const unsubs = [\n        machine.events.didReceiveEvent.subscribe((e)=>log2(\"Event \".concat(e.type))),\n        machine.events.willTransition.subscribe((param)=>{\n            let { from, to } = param;\n            return log2(\"Transitioning\", from, \"→\", to);\n        }),\n        machine.events.didIgnoreEvent.subscribe((e)=>log2(\"Ignored event\", e.type, e, \"(current state won't handle it)\"))\n    ];\n    return ()=>{\n        for (const unsub of unsubs){\n            unsub();\n        }\n    };\n}\nfunction defineConnectivityEvents(machine) {\n    const statusDidChange = makeEventSource();\n    const didConnect = makeEventSource();\n    const didDisconnect = makeEventSource();\n    let lastStatus = null;\n    const unsubscribe = machine.events.didEnterState.subscribe(()=>{\n        const currStatus = toNewConnectionStatus(machine);\n        if (currStatus !== lastStatus) {\n            statusDidChange.notify(currStatus);\n        }\n        if (lastStatus === \"connected\" && currStatus !== \"connected\") {\n            didDisconnect.notify();\n        } else if (lastStatus !== \"connected\" && currStatus === \"connected\") {\n            didConnect.notify();\n        }\n        lastStatus = currStatus;\n    });\n    return {\n        statusDidChange: statusDidChange.observable,\n        didConnect: didConnect.observable,\n        didDisconnect: didDisconnect.observable,\n        unsubscribe\n    };\n}\nvar assign = (patch)=>(ctx)=>ctx.patch(patch);\nfunction createConnectionStateMachine(delegates, options) {\n    const onMessage = makeEventSource();\n    onMessage.pause();\n    const onLiveblocksError = makeEventSource();\n    function fireErrorEvent(errmsg, errcode) {\n        return ()=>{\n            const err = new LiveblocksError(errmsg, errcode);\n            onLiveblocksError.notify(err);\n        };\n    }\n    const initialContext = {\n        successCount: 0,\n        authValue: null,\n        socket: null,\n        backoffDelay: RESET_DELAY\n    };\n    const machine = new FSM(initialContext).addState(\"@idle.initial\").addState(\"@idle.failed\").addState(\"@idle.zombie\").addState(\"@auth.busy\").addState(\"@auth.backoff\").addState(\"@connecting.busy\").addState(\"@connecting.backoff\").addState(\"@ok.connected\").addState(\"@ok.awaiting-pong\");\n    machine.addTransitions(\"*\", {\n        RECONNECT: {\n            target: \"@auth.backoff\",\n            effect: [\n                increaseBackoffDelay,\n                resetSuccessCount\n            ]\n        },\n        DISCONNECT: \"@idle.initial\"\n    });\n    machine.onEnter(\"@idle.*\", resetSuccessCount).addTransitions(\"@idle.*\", {\n        CONNECT: (_, ctx)=>// If we still have a known authValue, try to reconnect to the socket directly,\n            // otherwise, try to obtain a new authValue\n            ctx.authValue !== null ? \"@connecting.busy\" : \"@auth.busy\"\n    });\n    machine.addTransitions(\"@auth.backoff\", {\n        NAVIGATOR_ONLINE: {\n            target: \"@auth.busy\",\n            effect: assign({\n                backoffDelay: RESET_DELAY\n            })\n        }\n    }).addTimedTransition(\"@auth.backoff\", (ctx)=>ctx.backoffDelay, \"@auth.busy\").onEnterAsync(\"@auth.busy\", ()=>withTimeout(delegates.authenticate(), AUTH_TIMEOUT, \"Timed out during auth\"), // On successful authentication\n    (okEvent)=>({\n            target: \"@connecting.busy\",\n            effect: assign({\n                authValue: okEvent.data,\n                backoffDelay: RESET_DELAY\n            })\n        }), // Auth failed\n    (failedEvent)=>{\n        if (failedEvent.reason instanceof StopRetrying) {\n            return {\n                target: \"@idle.failed\",\n                effect: [\n                    log(2 /* ERROR */ , failedEvent.reason.message),\n                    fireErrorEvent(failedEvent.reason.message, -1)\n                ]\n            };\n        }\n        return {\n            target: \"@auth.backoff\",\n            effect: [\n                increaseBackoffDelay,\n                log(2 /* ERROR */ , \"Authentication failed: \".concat(failedEvent.reason instanceof Error ? failedEvent.reason.message : String(failedEvent.reason)))\n            ]\n        };\n    });\n    const onSocketError = (event)=>machine.send({\n            type: \"EXPLICIT_SOCKET_ERROR\",\n            event\n        });\n    const onSocketClose = (event)=>machine.send({\n            type: \"EXPLICIT_SOCKET_CLOSE\",\n            event\n        });\n    const onSocketMessage = (event)=>event.data === \"pong\" ? machine.send({\n            type: \"PONG\"\n        }) : onMessage.notify(event);\n    function teardownSocket(socket) {\n        if (socket) {\n            socket.removeEventListener(\"error\", onSocketError);\n            socket.removeEventListener(\"close\", onSocketClose);\n            socket.removeEventListener(\"message\", onSocketMessage);\n            socket.close();\n        }\n    }\n    machine.addTransitions(\"@connecting.backoff\", {\n        NAVIGATOR_ONLINE: {\n            target: \"@connecting.busy\",\n            effect: assign({\n                backoffDelay: RESET_DELAY\n            })\n        }\n    }).addTimedTransition(\"@connecting.backoff\", (ctx)=>ctx.backoffDelay, \"@connecting.busy\").onEnterAsync(\"@connecting.busy\", //\n    // Use the \"createSocket\" delegate function (provided to the\n    // ManagedSocket) to create the actual WebSocket connection instance.\n    // Then, set up all the necessary event listeners, and wait for the\n    // \"open\" event to occur.\n    //\n    // When the \"open\" event happens, we're ready to transition to the\n    // OK state. This is done by resolving the Promise.\n    //\n    async (ctx)=>{\n        let capturedPrematureEvent = null;\n        const connect$ = new Promise((resolve, rej)=>{\n            if (ctx.authValue === null) {\n                throw new Error(\"No auth authValue\");\n            }\n            const socket = delegates.createSocket(ctx.authValue);\n            function reject(event) {\n                capturedPrematureEvent = event;\n                socket.removeEventListener(\"message\", onSocketMessage);\n                rej(event);\n            }\n            const [actor$, didReceiveActor] = controlledPromise();\n            if (!options.waitForActorId) {\n                didReceiveActor();\n            }\n            function waitForActorId(event) {\n                const serverMsg = tryParseJson(event.data);\n                if ((serverMsg === null || serverMsg === void 0 ? void 0 : serverMsg.type) === 104 /* ROOM_STATE */ ) {\n                    didReceiveActor();\n                }\n            }\n            socket.addEventListener(\"message\", onSocketMessage);\n            if (options.waitForActorId) {\n                socket.addEventListener(\"message\", waitForActorId);\n            }\n            socket.addEventListener(\"error\", reject);\n            socket.addEventListener(\"close\", reject);\n            socket.addEventListener(\"open\", ()=>{\n                socket.addEventListener(\"error\", onSocketError);\n                socket.addEventListener(\"close\", onSocketClose);\n                const unsub = ()=>{\n                    socket.removeEventListener(\"error\", reject);\n                    socket.removeEventListener(\"close\", reject);\n                    socket.removeEventListener(\"message\", waitForActorId);\n                };\n                void actor$.then(()=>{\n                    resolve([\n                        socket,\n                        unsub\n                    ]);\n                });\n            });\n        });\n        return withTimeout(connect$, SOCKET_CONNECT_TIMEOUT, \"Timed out during websocket connection\").then(//\n        // Part 3:\n        // By now, our \"open\" event has fired, and the promise has been\n        // resolved. Two possible scenarios:\n        //\n        // 1. The happy path. Most likely.\n        // 2. Uh-oh. A premature close/error event has been observed. Let's\n        //    reject the promise after all.\n        //\n        // Any close/error event that will get scheduled after this point\n        // onwards, will be caught in the OK state, and dealt with\n        // accordingly.\n        //\n        (param)=>{\n            let [socket, unsub] = param;\n            unsub();\n            if (capturedPrematureEvent) {\n                throw capturedPrematureEvent;\n            }\n            return socket;\n        });\n    }, // Only transition to OK state after a successfully opened WebSocket connection\n    (okEvent)=>({\n            target: \"@ok.connected\",\n            effect: assign({\n                socket: okEvent.data,\n                backoffDelay: RESET_DELAY\n            })\n        }), // If the WebSocket connection cannot be established\n    (failure)=>{\n        const err = failure.reason;\n        if (err instanceof StopRetrying) {\n            return {\n                target: \"@idle.failed\",\n                effect: [\n                    log(2 /* ERROR */ , err.message),\n                    fireErrorEvent(err.message, -1)\n                ]\n            };\n        }\n        if (isCloseEvent(err)) {\n            if (err.code === 4109 /* TOKEN_EXPIRED */ ) {\n                return \"@auth.busy\";\n            }\n            if (shouldRetryWithoutReauth(err.code)) {\n                return {\n                    target: \"@connecting.backoff\",\n                    effect: [\n                        increaseBackoffDelayAggressively,\n                        logPrematureErrorOrCloseEvent(err)\n                    ]\n                };\n            }\n            if (shouldDisconnect(err.code)) {\n                return {\n                    target: \"@idle.failed\",\n                    effect: [\n                        log(2 /* ERROR */ , err.reason),\n                        fireErrorEvent(err.reason, err.code)\n                    ]\n                };\n            }\n        }\n        return {\n            target: \"@auth.backoff\",\n            effect: [\n                increaseBackoffDelay,\n                logPrematureErrorOrCloseEvent(err)\n            ]\n        };\n    });\n    const sendHeartbeat = {\n        target: \"@ok.awaiting-pong\",\n        effect: (ctx)=>{\n            var _ctx_socket;\n            (_ctx_socket = ctx.socket) === null || _ctx_socket === void 0 ? void 0 : _ctx_socket.send(\"ping\");\n        }\n    };\n    const maybeHeartbeat = ()=>{\n        const doc = typeof document !== \"undefined\" ? document : void 0;\n        const canZombie = (doc === null || doc === void 0 ? void 0 : doc.visibilityState) === \"hidden\" && delegates.canZombie();\n        return canZombie ? \"@idle.zombie\" : sendHeartbeat;\n    };\n    machine.addTimedTransition(\"@ok.connected\", HEARTBEAT_INTERVAL, maybeHeartbeat).addTransitions(\"@ok.connected\", {\n        NAVIGATOR_OFFLINE: maybeHeartbeat,\n        // Don't take the browser's word for it when it says it's offline. Do a ping/pong to make sure.\n        WINDOW_GOT_FOCUS: sendHeartbeat\n    });\n    machine.addTransitions(\"@idle.zombie\", {\n        WINDOW_GOT_FOCUS: \"@connecting.backoff\"\n    });\n    machine.onEnter(\"@ok.*\", (ctx)=>{\n        ctx.patch({\n            successCount: ctx.successCount + 1\n        });\n        const timerID = setTimeout(// On the next tick, start delivering all messages that have already\n        // been received, and continue synchronous delivery of all future\n        // incoming messages.\n        onMessage.unpause, 0);\n        return (ctx2)=>{\n            teardownSocket(ctx2.socket);\n            ctx2.patch({\n                socket: null\n            });\n            clearTimeout(timerID);\n            onMessage.pause();\n        };\n    }).addTransitions(\"@ok.awaiting-pong\", {\n        PONG: \"@ok.connected\"\n    }).addTimedTransition(\"@ok.awaiting-pong\", PONG_TIMEOUT, {\n        target: \"@connecting.busy\",\n        // Log implicit connection loss and drop the current open socket\n        effect: log(1 /* WARN */ , \"Received no pong from server, assume implicit connection loss.\")\n    }).addTransitions(\"@ok.*\", {\n        // When a socket receives an error, this can cause the closing of the\n        // socket, or not. So always check to see if the socket is still OPEN or\n        // not. When still OPEN, don't transition.\n        EXPLICIT_SOCKET_ERROR: (_, context)=>{\n            var _context_socket;\n            if (((_context_socket = context.socket) === null || _context_socket === void 0 ? void 0 : _context_socket.readyState) === 1) {\n                return null;\n            }\n            return {\n                target: \"@connecting.backoff\",\n                effect: increaseBackoffDelay\n            };\n        },\n        EXPLICIT_SOCKET_CLOSE: (e)=>{\n            if (shouldDisconnect(e.event.code)) {\n                return {\n                    target: \"@idle.failed\",\n                    effect: [\n                        logPermanentClose,\n                        fireErrorEvent(e.event.reason, e.event.code)\n                    ]\n                };\n            }\n            if (shouldReauth(e.event.code)) {\n                if (e.event.code === 4109 /* TOKEN_EXPIRED */ ) {\n                    return \"@auth.busy\";\n                } else {\n                    return {\n                        target: \"@auth.backoff\",\n                        effect: [\n                            increaseBackoffDelay,\n                            logCloseEvent(e.event)\n                        ]\n                    };\n                }\n            }\n            if (shouldRetryWithoutReauth(e.event.code)) {\n                return {\n                    target: \"@connecting.backoff\",\n                    effect: [\n                        increaseBackoffDelayAggressively,\n                        logCloseEvent(e.event)\n                    ]\n                };\n            }\n            return {\n                target: \"@connecting.backoff\",\n                effect: [\n                    increaseBackoffDelay,\n                    logCloseEvent(e.event)\n                ]\n            };\n        }\n    });\n    if (typeof document !== \"undefined\") {\n        const doc = typeof document !== \"undefined\" ? document : void 0;\n        const win =  true ? window : 0;\n        const root = win !== null && win !== void 0 ? win : doc;\n        machine.onEnter(\"*\", (ctx)=>{\n            function onNetworkOffline() {\n                machine.send({\n                    type: \"NAVIGATOR_OFFLINE\"\n                });\n            }\n            function onNetworkBackOnline() {\n                machine.send({\n                    type: \"NAVIGATOR_ONLINE\"\n                });\n            }\n            function onVisibilityChange() {\n                if ((doc === null || doc === void 0 ? void 0 : doc.visibilityState) === \"visible\") {\n                    machine.send({\n                        type: \"WINDOW_GOT_FOCUS\"\n                    });\n                }\n            }\n            win === null || win === void 0 ? void 0 : win.addEventListener(\"online\", onNetworkBackOnline);\n            win === null || win === void 0 ? void 0 : win.addEventListener(\"offline\", onNetworkOffline);\n            root === null || root === void 0 ? void 0 : root.addEventListener(\"visibilitychange\", onVisibilityChange);\n            return ()=>{\n                root === null || root === void 0 ? void 0 : root.removeEventListener(\"visibilitychange\", onVisibilityChange);\n                win === null || win === void 0 ? void 0 : win.removeEventListener(\"online\", onNetworkBackOnline);\n                win === null || win === void 0 ? void 0 : win.removeEventListener(\"offline\", onNetworkOffline);\n                teardownSocket(ctx.socket);\n            };\n        });\n    }\n    const cleanups = [];\n    const { statusDidChange, didConnect, didDisconnect, unsubscribe } = defineConnectivityEvents(machine);\n    cleanups.push(unsubscribe);\n    if (options.enableDebugLogging) {\n        cleanups.push(enableTracing(machine));\n    }\n    machine.start();\n    return {\n        machine,\n        cleanups,\n        // Observable events that will be emitted by this machine\n        events: {\n            statusDidChange,\n            didConnect,\n            didDisconnect,\n            onMessage: onMessage.observable,\n            onLiveblocksError: onLiveblocksError.observable\n        }\n    };\n}\nvar ManagedSocket = class {\n    getLegacyStatus() {\n        return newToLegacyStatus(this.getStatus());\n    }\n    getStatus() {\n        try {\n            return toNewConnectionStatus(this.machine);\n        } catch (e) {\n            return \"initial\";\n        }\n    }\n    /**\n   * Returns the current auth authValue.\n   */ get authValue() {\n        return this.machine.context.authValue;\n    }\n    /**\n   * Call this method to try to connect to a WebSocket. This only has an effect\n   * if the machine is idle at the moment, otherwise this is a no-op.\n   */ connect() {\n        this.machine.send({\n            type: \"CONNECT\"\n        });\n    }\n    /**\n   * If idle, will try to connect. Otherwise, it will attempt to reconnect to\n   * the socket, potentially obtaining a new authValue first, if needed.\n   */ reconnect() {\n        this.machine.send({\n            type: \"RECONNECT\"\n        });\n    }\n    /**\n   * Call this method to disconnect from the current WebSocket. Is going to be\n   * a no-op if there is no active connection.\n   */ disconnect() {\n        this.machine.send({\n            type: \"DISCONNECT\"\n        });\n    }\n    /**\n   * Call this to stop the machine and run necessary cleanup functions. After\n   * calling destroy(), you can no longer use this instance. Call this before\n   * letting the instance get garbage collected.\n   */ destroy() {\n        this.machine.stop();\n        let cleanup;\n        while(cleanup = this.cleanups.pop()){\n            cleanup();\n        }\n    }\n    /**\n   * Safely send a message to the current WebSocket connection. Will emit a log\n   * message if this is somehow impossible.\n   */ send(data) {\n        var _this_machine_context;\n        const socket = (_this_machine_context = this.machine.context) === null || _this_machine_context === void 0 ? void 0 : _this_machine_context.socket;\n        if (socket === null) {\n            warn(\"Cannot send: not connected yet\", data);\n        } else if (socket.readyState !== 1) {\n            warn(\"Cannot send: WebSocket no longer open\", data);\n        } else {\n            socket.send(data);\n        }\n    }\n    /**\n   * NOTE: Used by the E2E app only, to simulate explicit events.\n   * Not ideal to keep exposed :(\n   */ _privateSendMachineEvent(event) {\n        this.machine.send(event);\n    }\n    constructor(delegates, enableDebugLogging = false, waitForActorId = true){\n        const { machine, events, cleanups } = createConnectionStateMachine(delegates, {\n            waitForActorId,\n            enableDebugLogging\n        });\n        this.machine = machine;\n        this.events = events;\n        this.cleanups = cleanups;\n    }\n};\n// src/protocol/AuthToken.ts\nfunction canWriteStorage(scopes) {\n    return scopes.includes(\"room:write\" /* Write */ );\n}\nfunction canComment(scopes) {\n    return scopes.includes(\"comments:write\" /* CommentsWrite */ ) || scopes.includes(\"room:write\" /* Write */ );\n}\nfunction isValidAuthTokenPayload(data) {\n    return isPlainObject(data) && (data.k === \"acc\" /* ACCESS_TOKEN */  || data.k === \"id\" /* ID_TOKEN */  || data.k === \"sec-legacy\" /* SECRET_LEGACY */ );\n}\nfunction parseAuthToken(rawTokenString) {\n    const tokenParts = rawTokenString.split(\".\");\n    if (tokenParts.length !== 3) {\n        throw new Error(\"Authentication error: invalid JWT token\");\n    }\n    const payload = tryParseJson(b64decode(tokenParts[1]));\n    if (!(payload && isValidAuthTokenPayload(payload))) {\n        throw new Error(\"Authentication error: expected a valid token but did not get one. Hint: if you are using a callback, ensure the room is passed when creating the token. For more information: https://liveblocks.io/docs/api-reference/liveblocks-client#createClientCallback\");\n    }\n    return {\n        raw: rawTokenString,\n        parsed: payload\n    };\n}\n// src/auth-manager.ts\nfunction createAuthManager(authOptions) {\n    const authentication = prepareAuthentication(authOptions);\n    const seenTokens = /* @__PURE__ */ new Set();\n    const tokens = [];\n    const expiryTimes = [];\n    const requestPromises = /* @__PURE__ */ new Map();\n    function reset() {\n        seenTokens.clear();\n        tokens.length = 0;\n        expiryTimes.length = 0;\n        requestPromises.clear();\n    }\n    function hasCorrespondingScopes(requestedScope, scopes) {\n        if (requestedScope === \"comments:read\") {\n            return scopes.includes(\"comments:read\" /* CommentsRead */ ) || scopes.includes(\"comments:write\" /* CommentsWrite */ ) || scopes.includes(\"room:read\" /* Read */ ) || scopes.includes(\"room:write\" /* Write */ );\n        } else if (requestedScope === \"room:read\") {\n            return scopes.includes(\"room:read\" /* Read */ ) || scopes.includes(\"room:write\" /* Write */ );\n        }\n        return false;\n    }\n    function getCachedToken(requestedScope, roomId) {\n        const now = Math.ceil(Date.now() / 1e3);\n        for(let i = tokens.length - 1; i >= 0; i--){\n            const token = tokens[i];\n            const expiresAt = expiryTimes[i];\n            if (expiresAt <= now) {\n                tokens.splice(i, 1);\n                expiryTimes.splice(i, 1);\n                continue;\n            }\n            if (token.parsed.k === \"id\" /* ID_TOKEN */ ) {\n                return token;\n            } else if (token.parsed.k === \"acc\" /* ACCESS_TOKEN */ ) {\n                for (const [resource, scopes] of Object.entries(token.parsed.perms)){\n                    if (resource.includes(\"*\") && roomId.startsWith(resource.replace(\"*\", \"\")) || roomId === resource && hasCorrespondingScopes(requestedScope, scopes)) {\n                        return token;\n                    }\n                }\n            }\n        }\n        return void 0;\n    }\n    async function makeAuthRequest(roomId) {\n        var _authOptions_polyfills;\n        var _authOptions_polyfills_fetch;\n        const fetcher = (_authOptions_polyfills_fetch = (_authOptions_polyfills = authOptions.polyfills) === null || _authOptions_polyfills === void 0 ? void 0 : _authOptions_polyfills.fetch) !== null && _authOptions_polyfills_fetch !== void 0 ? _authOptions_polyfills_fetch :  false ? 0 : window.fetch;\n        if (authentication.type === \"private\") {\n            if (fetcher === void 0) {\n                throw new StopRetrying(\"To use Liveblocks client in a non-DOM environment with a url as auth endpoint, you need to provide a fetch polyfill.\");\n            }\n            const response = await fetchAuthEndpoint(fetcher, authentication.url, {\n                room: roomId\n            });\n            const parsed = parseAuthToken(response.token);\n            if (seenTokens.has(parsed.raw)) {\n                throw new StopRetrying(\"The same Liveblocks auth token was issued from the backend before. Caching Liveblocks tokens is not supported.\");\n            }\n            return parsed;\n        }\n        if (authentication.type === \"custom\") {\n            const response = await authentication.callback(roomId);\n            if (response && typeof response === \"object\") {\n                if (typeof response.token === \"string\") {\n                    return parseAuthToken(response.token);\n                } else if (typeof response.error === \"string\") {\n                    const reason = \"Authentication failed: \".concat(\"reason\" in response && typeof response.reason === \"string\" ? response.reason : \"Forbidden\");\n                    if (response.error === \"forbidden\") {\n                        throw new StopRetrying(reason);\n                    } else {\n                        throw new Error(reason);\n                    }\n                }\n            }\n            throw new Error('Your authentication callback function should return a token, but it did not. Hint: the return value should look like: { token: \"...\" }');\n        }\n        throw new Error(\"Unexpected authentication type. Must be private or custom.\");\n    }\n    async function getAuthValue(requestedScope, roomId) {\n        if (authentication.type === \"public\") {\n            return {\n                type: \"public\",\n                publicApiKey: authentication.publicApiKey\n            };\n        }\n        const cachedToken = getCachedToken(requestedScope, roomId);\n        if (cachedToken !== void 0) {\n            return {\n                type: \"secret\",\n                token: cachedToken\n            };\n        }\n        let currentPromise = requestPromises.get(roomId);\n        if (currentPromise === void 0) {\n            currentPromise = makeAuthRequest(roomId);\n            requestPromises.set(roomId, currentPromise);\n        }\n        try {\n            const token = await currentPromise;\n            const BUFFER = 30;\n            const expiresAt = Math.floor(Date.now() / 1e3) + (token.parsed.exp - token.parsed.iat) - BUFFER;\n            seenTokens.add(token.raw);\n            if (token.parsed.k !== \"sec-legacy\" /* SECRET_LEGACY */ ) {\n                tokens.push(token);\n                expiryTimes.push(expiresAt);\n            }\n            return {\n                type: \"secret\",\n                token\n            };\n        } finally{\n            requestPromises.delete(roomId);\n        }\n    }\n    return {\n        reset,\n        getAuthValue\n    };\n}\nfunction prepareAuthentication(authOptions) {\n    const { publicApiKey, authEndpoint } = authOptions;\n    if (authEndpoint !== void 0 && publicApiKey !== void 0) {\n        throw new Error(\"You cannot simultaneously use `publicApiKey` and `authEndpoint` options. Please pick one and leave the other option unspecified. For more information: https://liveblocks.io/docs/api-reference/liveblocks-client#createClient\");\n    }\n    if (typeof publicApiKey === \"string\") {\n        if (publicApiKey.startsWith(\"sk_\")) {\n            throw new Error(\"Invalid `publicApiKey` option. The value you passed is a secret key, which should not be used from the client. Please only ever pass a public key here. For more information: https://liveblocks.io/docs/api-reference/liveblocks-client#createClientPublicKey\");\n        } else if (!publicApiKey.startsWith(\"pk_\")) {\n            throw new Error(\"Invalid key. Please use the public key format: pk_<public key>. For more information: https://liveblocks.io/docs/api-reference/liveblocks-client#createClientPublicKey\");\n        }\n        return {\n            type: \"public\",\n            publicApiKey\n        };\n    }\n    if (typeof authEndpoint === \"string\") {\n        return {\n            type: \"private\",\n            url: authEndpoint\n        };\n    } else if (typeof authEndpoint === \"function\") {\n        return {\n            type: \"custom\",\n            callback: authEndpoint\n        };\n    } else if (authEndpoint !== void 0) {\n        throw new Error(\"The `authEndpoint` option must be a string or a function. For more information: https://liveblocks.io/docs/api-reference/liveblocks-client#createClientAuthEndpoint\");\n    }\n    throw new Error(\"Invalid Liveblocks client options. Please provide either a `publicApiKey` or `authEndpoint` option. They cannot both be empty. For more information: https://liveblocks.io/docs/api-reference/liveblocks-client#createClient\");\n}\nasync function fetchAuthEndpoint(fetch2, endpoint, body) {\n    const res = await fetch2(endpoint, {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n    });\n    if (!res.ok) {\n        const reason = \"\".concat((await res.text()).trim() || \"reason not provided in auth response\", \" (\").concat(res.status, \" returned by POST \").concat(endpoint, \")\");\n        if (res.status === 401 || res.status === 403) {\n            throw new StopRetrying(\"Unauthorized: \".concat(reason));\n        } else {\n            throw new Error(\"Failed to authenticate: \".concat(reason));\n        }\n    }\n    let data;\n    try {\n        data = await res.json();\n    } catch (er) {\n        throw new Error('Expected a JSON response when doing a POST request on \"'.concat(endpoint, '\". ').concat(String(er)));\n    }\n    if (!isPlainObject(data) || typeof data.token !== \"string\") {\n        throw new Error('Expected a JSON response of the form `{ token: \"...\" }` when doing a POST request on \"'.concat(endpoint, '\", but got ').concat(JSON.stringify(data)));\n    }\n    const { token } = data;\n    return {\n        token\n    };\n}\n// src/constants.ts\nvar DEFAULT_BASE_URL = \"https://api.liveblocks.io\";\n// src/devtools/bridge.ts\nvar _bridgeActive = false;\nfunction activateBridge(allowed) {\n    _bridgeActive = allowed;\n}\nfunction sendToPanel(message, options) {\n    if (false) {}\n    const fullMsg = {\n        ...message,\n        source: \"liveblocks-devtools-client\"\n    };\n    if (!((options === null || options === void 0 ? void 0 : options.force) || _bridgeActive)) {\n        return;\n    }\n    window.postMessage(fullMsg, \"*\");\n}\nvar eventSource = makeEventSource();\nif (true) {\n    window.addEventListener(\"message\", (event)=>{\n        var _event_data;\n        if (event.source === window && ((_event_data = event.data) === null || _event_data === void 0 ? void 0 : _event_data.source) === \"liveblocks-devtools-panel\") {\n            eventSource.notify(event.data);\n        } else {}\n    });\n}\nvar onMessageFromPanel = eventSource.observable;\n// src/devtools/index.ts\nvar VERSION = PKG_VERSION || \"dev\";\nvar _devtoolsSetupHasRun = false;\nfunction setupDevTools(getAllRooms) {\n    if (false) {}\n    if (_devtoolsSetupHasRun) {\n        return;\n    }\n    _devtoolsSetupHasRun = true;\n    onMessageFromPanel.subscribe((msg)=>{\n        switch(msg.msg){\n            case \"connect\":\n                {\n                    activateBridge(true);\n                    for (const roomId of getAllRooms()){\n                        sendToPanel({\n                            msg: \"room::available\",\n                            roomId,\n                            clientVersion: VERSION\n                        });\n                    }\n                    break;\n                }\n        }\n    });\n    sendToPanel({\n        msg: \"wake-up-devtools\"\n    }, {\n        force: true\n    });\n}\nvar unsubsByRoomId = /* @__PURE__ */ new Map();\nfunction stopSyncStream(roomId) {\n    var _unsubsByRoomId_get;\n    const unsubs = (_unsubsByRoomId_get = unsubsByRoomId.get(roomId)) !== null && _unsubsByRoomId_get !== void 0 ? _unsubsByRoomId_get : [];\n    unsubsByRoomId.delete(roomId);\n    for (const unsub of unsubs){\n        unsub();\n    }\n}\nfunction startSyncStream(room) {\n    stopSyncStream(room.id);\n    fullSync(room);\n    unsubsByRoomId.set(room.id, [\n        // When the connection status changes\n        room.events.status.subscribe(()=>partialSyncConnection(room)),\n        // When storage initializes, send the update\n        room.events.storageDidLoad.subscribeOnce(()=>partialSyncStorage(room)),\n        // Any time storage updates, send the new storage root\n        room.events.storage.subscribe(()=>partialSyncStorage(room)),\n        // Any time \"me\" or \"others\" updates, send the new values accordingly\n        room.events.self.subscribe(()=>partialSyncMe(room)),\n        room.events.others.subscribe(()=>partialSyncOthers(room)),\n        // Any time ydoc is updated, forward the update\n        room.events.ydoc.subscribe((update)=>syncYdocUpdate(room, update)),\n        // Any time a custom room event is received, forward it\n        room.events.customEvent.subscribe((eventData)=>forwardEvent(room, eventData))\n    ]);\n}\nfunction syncYdocUpdate(room, update) {\n    sendToPanel({\n        msg: \"room::sync::ydoc\",\n        roomId: room.id,\n        update\n    });\n}\nvar loadedAt = Date.now();\nvar eventCounter = 0;\nfunction nextEventId() {\n    return \"event-\".concat(loadedAt, \"-\").concat(eventCounter++);\n}\nfunction forwardEvent(room, eventData) {\n    sendToPanel({\n        msg: \"room::events::custom-event\",\n        roomId: room.id,\n        event: {\n            type: \"CustomEvent\",\n            id: nextEventId(),\n            key: \"Event\",\n            connectionId: eventData.connectionId,\n            payload: eventData.event\n        }\n    });\n}\nfunction partialSyncConnection(room) {\n    sendToPanel({\n        msg: \"room::sync::partial\",\n        roomId: room.id,\n        status: room.getStatus()\n    });\n}\nfunction partialSyncStorage(room) {\n    const root = room.getStorageSnapshot();\n    if (root) {\n        sendToPanel({\n            msg: \"room::sync::partial\",\n            roomId: room.id,\n            storage: root.toTreeNode(\"root\").payload\n        });\n    }\n}\nfunction partialSyncMe(room) {\n    const me = room.__internal.getSelf_forDevTools();\n    if (me) {\n        sendToPanel({\n            msg: \"room::sync::partial\",\n            roomId: room.id,\n            me\n        });\n    }\n}\nfunction partialSyncOthers(room) {\n    const others = room.__internal.getOthers_forDevTools();\n    if (others) {\n        sendToPanel({\n            msg: \"room::sync::partial\",\n            roomId: room.id,\n            others\n        });\n    }\n}\nfunction fullSync(room) {\n    const root = room.getStorageSnapshot();\n    const me = room.__internal.getSelf_forDevTools();\n    const others = room.__internal.getOthers_forDevTools();\n    room.fetchYDoc(\"\");\n    var _root_toTreeNode_payload;\n    sendToPanel({\n        msg: \"room::sync::full\",\n        roomId: room.id,\n        status: room.getStatus(),\n        storage: (_root_toTreeNode_payload = root === null || root === void 0 ? void 0 : root.toTreeNode(\"root\").payload) !== null && _root_toTreeNode_payload !== void 0 ? _root_toTreeNode_payload : null,\n        me,\n        others\n    });\n}\nvar roomChannelListeners = /* @__PURE__ */ new Map();\nfunction stopRoomChannelListener(roomId) {\n    const listener = roomChannelListeners.get(roomId);\n    roomChannelListeners.delete(roomId);\n    if (listener) {\n        listener();\n    }\n}\nfunction linkDevTools(roomId, room) {\n    if (false) {}\n    sendToPanel({\n        msg: \"room::available\",\n        roomId,\n        clientVersion: VERSION\n    });\n    stopRoomChannelListener(roomId);\n    roomChannelListeners.set(roomId, // Returns the unsubscribe callback, that we store in the\n    // roomChannelListeners registry\n    onMessageFromPanel.subscribe((msg)=>{\n        switch(msg.msg){\n            case \"room::subscribe\":\n                {\n                    if (msg.roomId === roomId) {\n                        startSyncStream(room);\n                    }\n                    break;\n                }\n            case \"room::unsubscribe\":\n                {\n                    if (msg.roomId === roomId) {\n                        stopSyncStream(roomId);\n                    }\n                    break;\n                }\n        }\n    }));\n}\nfunction unlinkDevTools(roomId) {\n    if (false) {}\n    stopSyncStream(roomId);\n    stopRoomChannelListener(roomId);\n    sendToPanel({\n        msg: \"room::unavailable\",\n        roomId\n    });\n}\n// src/lib/deprecation.ts\nvar _emittedDeprecationWarnings = /* @__PURE__ */ new Set();\nfunction deprecate(message) {\n    let key = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : message;\n    if (true) {\n        if (!_emittedDeprecationWarnings.has(key)) {\n            _emittedDeprecationWarnings.add(key);\n            errorWithTitle(\"Deprecation warning\", message);\n        }\n    }\n}\nfunction deprecateIf(condition, message) {\n    let key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : message;\n    if (true) {\n        if (condition) {\n            deprecate(message, key);\n        }\n    }\n}\nfunction throwUsageError(message) {\n    if (true) {\n        const usageError = new Error(message);\n        usageError.name = \"Usage error\";\n        errorWithTitle(\"Usage error\", message);\n        throw usageError;\n    }\n}\nfunction errorIf(condition, message) {\n    if (true) {\n        if (condition) {\n            throwUsageError(message);\n        }\n    }\n}\n// src/comments/comment-body.ts\nfunction isCommentBodyParagraph(element) {\n    return \"type\" in element && element.type === \"mention\";\n}\nfunction isCommentBodyText(element) {\n    return \"text\" in element && typeof element.text === \"string\";\n}\nfunction isCommentBodyMention(element) {\n    return \"type\" in element && element.type === \"mention\";\n}\nfunction isCommentBodyLink(element) {\n    return \"type\" in element && element.type === \"link\";\n}\nvar commentBodyElementsGuards = {\n    paragraph: isCommentBodyParagraph,\n    text: isCommentBodyText,\n    link: isCommentBodyLink,\n    mention: isCommentBodyMention\n};\nvar commentBodyElementsTypes = {\n    paragraph: \"block\",\n    text: \"inline\",\n    link: \"inline\",\n    mention: \"inline\"\n};\nfunction traverseCommentBody(body, elementOrVisitor, possiblyVisitor) {\n    if (!body || !(body === null || body === void 0 ? void 0 : body.content)) {\n        return;\n    }\n    const element = typeof elementOrVisitor === \"string\" ? elementOrVisitor : void 0;\n    const type = element ? commentBodyElementsTypes[element] : \"all\";\n    const guard = element ? commentBodyElementsGuards[element] : ()=>true;\n    const visitor = typeof elementOrVisitor === \"function\" ? elementOrVisitor : possiblyVisitor;\n    for (const block of body.content){\n        if (type === \"all\" || type === \"block\") {\n            if (guard(block)) {\n                visitor === null || visitor === void 0 ? void 0 : visitor(block);\n            }\n        }\n        if (type === \"all\" || type === \"inline\") {\n            for (const inline of block.children){\n                if (guard(inline)) {\n                    visitor === null || visitor === void 0 ? void 0 : visitor(inline);\n                }\n            }\n        }\n    }\n}\nfunction getMentionedIdsFromCommentBody(body) {\n    const mentionedIds = /* @__PURE__ */ new Set();\n    traverseCommentBody(body, \"mention\", (mention)=>mentionedIds.add(mention.id));\n    return Array.from(mentionedIds);\n}\nasync function resolveUsersInCommentBody(body, resolveUsers) {\n    const resolvedUsers = /* @__PURE__ */ new Map();\n    if (!resolveUsers) {\n        return resolvedUsers;\n    }\n    const userIds = getMentionedIdsFromCommentBody(body);\n    const users = await resolveUsers({\n        userIds\n    });\n    for (const [index, userId] of userIds.entries()){\n        const user = users === null || users === void 0 ? void 0 : users[index];\n        if (user) {\n            resolvedUsers.set(userId, user);\n        }\n    }\n    return resolvedUsers;\n}\nvar htmlEscapables = {\n    \"&\": \"&amp;\",\n    \"<\": \"&lt;\",\n    \">\": \"&gt;\",\n    '\"': \"&quot;\",\n    \"'\": \"&#39;\"\n};\nvar htmlEscapablesRegex = new RegExp(Object.keys(htmlEscapables).map((entity)=>\"\\\\\".concat(entity)).join(\"|\"), \"g\");\nfunction htmlSafe(value) {\n    return new HtmlSafeString([\n        String(value)\n    ], []);\n}\nfunction joinHtml(strings) {\n    if (strings.length <= 0) {\n        return new HtmlSafeString([\n            \"\"\n        ], []);\n    }\n    return new HtmlSafeString([\n        \"\",\n        ...Array(strings.length - 1).fill(\"\"),\n        \"\"\n    ], strings);\n}\nfunction escapeHtml(value) {\n    if (value instanceof HtmlSafeString) {\n        return value.toString();\n    }\n    if (Array.isArray(value)) {\n        return joinHtml(value).toString();\n    }\n    return String(value).replace(htmlEscapablesRegex, (character)=>htmlEscapables[character]);\n}\nvar HtmlSafeString = class {\n    toString() {\n        return this._strings.reduce((result, str, i)=>{\n            return result + escapeHtml(nn(this._values[i - 1])) + str;\n        });\n    }\n    constructor(strings, values){\n        this._strings = strings;\n        this._values = values;\n    }\n};\nfunction html(strings) {\n    for(var _len = arguments.length, values = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        values[_key - 1] = arguments[_key];\n    }\n    return new HtmlSafeString(strings, values);\n}\nvar markdownEscapables = {\n    _: \"\\\\_\",\n    \"*\": \"\\\\*\",\n    \"#\": \"\\\\#\",\n    \"`\": \"\\\\`\",\n    \"~\": \"\\\\~\",\n    \"!\": \"\\\\!\",\n    \"|\": \"\\\\|\",\n    \"(\": \"\\\\(\",\n    \")\": \"\\\\)\",\n    \"{\": \"\\\\{\",\n    \"}\": \"\\\\}\",\n    \"[\": \"\\\\[\",\n    \"]\": \"\\\\]\"\n};\nvar markdownEscapablesRegex = new RegExp(Object.keys(markdownEscapables).map((entity)=>\"\\\\\".concat(entity)).join(\"|\"), \"g\");\nfunction joinMarkdown(strings) {\n    if (strings.length <= 0) {\n        return new MarkdownSafeString([\n            \"\"\n        ], []);\n    }\n    return new MarkdownSafeString([\n        \"\",\n        ...Array(strings.length - 1).fill(\"\"),\n        \"\"\n    ], strings);\n}\nfunction escapeMarkdown(value) {\n    if (value instanceof MarkdownSafeString) {\n        return value.toString();\n    }\n    if (Array.isArray(value)) {\n        return joinMarkdown(value).toString();\n    }\n    return String(value).replace(markdownEscapablesRegex, (character)=>markdownEscapables[character]);\n}\nvar MarkdownSafeString = class {\n    toString() {\n        return this._strings.reduce((result, str, i)=>{\n            return result + escapeMarkdown(nn(this._values[i - 1])) + str;\n        });\n    }\n    constructor(strings, values){\n        this._strings = strings;\n        this._values = values;\n    }\n};\nfunction markdown(strings) {\n    for(var _len = arguments.length, values = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        values[_key - 1] = arguments[_key];\n    }\n    return new MarkdownSafeString(strings, values);\n}\nfunction toAbsoluteUrl(url) {\n    if (url.startsWith(\"http://\") || url.startsWith(\"https://\")) {\n        return url;\n    } else if (url.startsWith(\"www.\")) {\n        return \"https://\" + url;\n    }\n    return;\n}\nvar stringifyCommentBodyPlainElements = {\n    paragraph: (param)=>{\n        let { children } = param;\n        return children;\n    },\n    text: (param)=>{\n        let { element } = param;\n        return element.text;\n    },\n    link: (param)=>{\n        let { element } = param;\n        return element.url;\n    },\n    mention: (param)=>{\n        let { element, user } = param;\n        var _user_name;\n        return \"@\".concat((_user_name = user === null || user === void 0 ? void 0 : user.name) !== null && _user_name !== void 0 ? _user_name : element.id);\n    }\n};\nvar stringifyCommentBodyHtmlElements = {\n    paragraph: (param)=>{\n        let { children } = param;\n        return children ? html(_templateObject(), htmlSafe(children)) : children;\n    },\n    text: (param)=>{\n        let { element } = param;\n        let children = element.text;\n        if (!children) {\n            return children;\n        }\n        if (element.bold) {\n            children = html(_templateObject1(), children);\n        }\n        if (element.italic) {\n            children = html(_templateObject2(), children);\n        }\n        if (element.strikethrough) {\n            children = html(_templateObject3(), children);\n        }\n        if (element.code) {\n            children = html(_templateObject4(), children);\n        }\n        return children;\n    },\n    link: (param)=>{\n        let { element, href } = param;\n        return html(_templateObject5(), href, element.url);\n    },\n    mention: (param)=>{\n        let { element, user } = param;\n        var _user_name;\n        return html(_templateObject6(), (_user_name = user === null || user === void 0 ? void 0 : user.name) !== null && _user_name !== void 0 ? _user_name : element.id);\n    }\n};\nvar stringifyCommentBodyMarkdownElements = {\n    paragraph: (param)=>{\n        let { children } = param;\n        return children;\n    },\n    text: (param)=>{\n        let { element } = param;\n        let children = element.text;\n        if (!children) {\n            return children;\n        }\n        if (element.bold) {\n            children = markdown(_templateObject7(), children);\n        }\n        if (element.italic) {\n            children = markdown(_templateObject8(), children);\n        }\n        if (element.strikethrough) {\n            children = markdown(_templateObject9(), children);\n        }\n        if (element.code) {\n            children = markdown(_templateObject10(), children);\n        }\n        return children;\n    },\n    link: (param)=>{\n        let { element, href } = param;\n        return markdown(_templateObject11(), element.url, href);\n    },\n    mention: (param)=>{\n        let { element, user } = param;\n        var _user_name;\n        return markdown(_templateObject12(), (_user_name = user === null || user === void 0 ? void 0 : user.name) !== null && _user_name !== void 0 ? _user_name : element.id);\n    }\n};\nasync function stringifyCommentBody(body, options) {\n    var _options_format;\n    const format = (_options_format = options === null || options === void 0 ? void 0 : options.format) !== null && _options_format !== void 0 ? _options_format : \"plain\";\n    var _options_separator;\n    const separator = (_options_separator = options === null || options === void 0 ? void 0 : options.separator) !== null && _options_separator !== void 0 ? _options_separator : format === \"markdown\" ? \"\\n\\n\" : \"\\n\";\n    const elements = {\n        ...format === \"html\" ? stringifyCommentBodyHtmlElements : format === \"markdown\" ? stringifyCommentBodyMarkdownElements : stringifyCommentBodyPlainElements,\n        ...options === null || options === void 0 ? void 0 : options.elements\n    };\n    const resolvedUsers = await resolveUsersInCommentBody(body, options === null || options === void 0 ? void 0 : options.resolveUsers);\n    const blocks = body.content.flatMap((block, blockIndex)=>{\n        switch(block.type){\n            case \"paragraph\":\n                {\n                    const inlines = block.children.flatMap((inline, inlineIndex)=>{\n                        if (isCommentBodyMention(inline)) {\n                            return inline.id ? [\n                                elements.mention({\n                                    element: inline,\n                                    user: resolvedUsers.get(inline.id)\n                                }, inlineIndex)\n                            ] : [];\n                        }\n                        if (isCommentBodyLink(inline)) {\n                            var _toAbsoluteUrl;\n                            return [\n                                elements.link({\n                                    element: inline,\n                                    href: (_toAbsoluteUrl = toAbsoluteUrl(inline.url)) !== null && _toAbsoluteUrl !== void 0 ? _toAbsoluteUrl : inline.url\n                                }, inlineIndex)\n                            ];\n                        }\n                        if (isCommentBodyText(inline)) {\n                            return [\n                                elements.text({\n                                    element: inline\n                                }, inlineIndex)\n                            ];\n                        }\n                        return [];\n                    });\n                    return [\n                        elements.paragraph({\n                            element: block,\n                            children: inlines.join(\"\")\n                        }, blockIndex)\n                    ];\n                }\n            default:\n                return [];\n        }\n    });\n    return blocks.join(separator);\n}\nfunction convertToCommentData(data) {\n    const editedAt = data.editedAt ? new Date(data.editedAt) : void 0;\n    const createdAt = new Date(data.createdAt);\n    const reactions = data.reactions.map((reaction)=>({\n            ...reaction,\n            createdAt: new Date(reaction.createdAt)\n        }));\n    if (data.body) {\n        return {\n            ...data,\n            reactions,\n            createdAt,\n            editedAt\n        };\n    } else {\n        const deletedAt = new Date(data.deletedAt);\n        return {\n            ...data,\n            reactions,\n            createdAt,\n            editedAt,\n            deletedAt\n        };\n    }\n}\nfunction convertToThreadData(data) {\n    const updatedAt = data.updatedAt ? new Date(data.updatedAt) : void 0;\n    const createdAt = new Date(data.createdAt);\n    const comments = data.comments.map((comment)=>convertToCommentData(comment));\n    return {\n        ...data,\n        createdAt,\n        updatedAt,\n        comments\n    };\n}\nfunction convertToCommentUserReaction(data) {\n    return {\n        ...data,\n        createdAt: new Date(data.createdAt)\n    };\n}\n// src/comments/index.ts\nfunction getAuthBearerHeaderFromAuthValue(authValue) {\n    if (authValue.type === \"public\") {\n        return authValue.publicApiKey;\n    } else {\n        return authValue.token.raw;\n    }\n}\nvar CommentsApiError = class extends Error {\n    constructor(message, status, details){\n        super(message);\n        this.message = message;\n        this.status = status;\n        this.details = details;\n    }\n};\nfunction createCommentsApi(roomId, getAuthValue, config) {\n    async function fetchJson(endpoint, options) {\n        const response = await fetchApi(roomId, endpoint, options);\n        if (!response.ok) {\n            if (response.status >= 400 && response.status < 600) {\n                let error3;\n                try {\n                    const errorBody = await response.json();\n                    error3 = new CommentsApiError(errorBody.message, response.status, errorBody);\n                } catch (e) {\n                    error3 = new CommentsApiError(response.statusText, response.status);\n                }\n                throw error3;\n            }\n        }\n        let body;\n        try {\n            body = await response.json();\n        } catch (e) {\n            body = {};\n        }\n        return body;\n    }\n    async function fetchApi(roomId2, endpoint, options) {\n        const authValue = await getAuthValue();\n        const url = new URL(\"/v2/c/rooms/\".concat(encodeURIComponent(roomId2)).concat(endpoint), config.baseUrl);\n        return await fetch(url.toString(), {\n            ...options,\n            headers: {\n                ...options === null || options === void 0 ? void 0 : options.headers,\n                Authorization: \"Bearer \".concat(getAuthBearerHeaderFromAuthValue(authValue))\n            }\n        });\n    }\n    async function getThreads(options) {\n        var _options_query;\n        const response = await fetchApi(roomId, \"/threads/search\", {\n            body: JSON.stringify({\n                ...(options === null || options === void 0 ? void 0 : (_options_query = options.query) === null || _options_query === void 0 ? void 0 : _options_query.metadata) && {\n                    metadata: options.query.metadata\n                }\n            }),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            method: \"POST\"\n        });\n        if (response.ok) {\n            const json = await response.json();\n            return json.data.map((thread)=>convertToThreadData(thread));\n        } else if (response.status === 404) {\n            return [];\n        } else {\n            throw new Error(\"There was an error while getting threads.\");\n        }\n    }\n    async function createThread(param) {\n        let { metadata, body, commentId, threadId } = param;\n        const thread = await fetchJson(\"/threads\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                id: threadId,\n                comment: {\n                    id: commentId,\n                    body\n                },\n                metadata\n            })\n        });\n        return convertToThreadData(thread);\n    }\n    async function editThreadMetadata(param) {\n        let { metadata, threadId } = param;\n        return await fetchJson(\"/threads/\".concat(encodeURIComponent(threadId), \"/metadata\"), {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(metadata)\n        });\n    }\n    async function createComment(param) {\n        let { threadId, commentId, body } = param;\n        const comment = await fetchJson(\"/threads/\".concat(encodeURIComponent(threadId), \"/comments\"), {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                id: commentId,\n                body\n            })\n        });\n        return convertToCommentData(comment);\n    }\n    async function editComment(param) {\n        let { threadId, commentId, body } = param;\n        const comment = await fetchJson(\"/threads/\".concat(encodeURIComponent(threadId), \"/comments/\").concat(encodeURIComponent(commentId)), {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                body\n            })\n        });\n        return convertToCommentData(comment);\n    }\n    async function deleteComment(param) {\n        let { threadId, commentId } = param;\n        await fetchJson(\"/threads/\".concat(encodeURIComponent(threadId), \"/comments/\").concat(encodeURIComponent(commentId)), {\n            method: \"DELETE\"\n        });\n    }\n    async function addReaction(param) {\n        let { threadId, commentId, emoji } = param;\n        const reaction = await fetchJson(\"/threads/\".concat(encodeURIComponent(threadId), \"/comments/\").concat(encodeURIComponent(commentId), \"/reactions\"), {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                emoji\n            })\n        });\n        return convertToCommentUserReaction(reaction);\n    }\n    async function removeReaction(param) {\n        let { threadId, commentId, emoji } = param;\n        await fetchJson(\"/threads/\".concat(encodeURIComponent(threadId), \"/comments/\").concat(encodeURIComponent(commentId), \"/reactions/\").concat(encodeURIComponent(emoji)), {\n            method: \"DELETE\"\n        });\n    }\n    return {\n        getThreads,\n        createThread,\n        editThreadMetadata,\n        createComment,\n        editComment,\n        deleteComment,\n        addReaction,\n        removeReaction\n    };\n}\n// src/lib/position.ts\nvar MIN_CODE = 32;\nvar MAX_CODE = 126;\nvar NUM_DIGITS = MAX_CODE - MIN_CODE + 1;\nvar ZERO = nthDigit(0);\nvar ONE = nthDigit(1);\nvar ZERO_NINE = ZERO + nthDigit(-1);\nfunction nthDigit(n) {\n    const code = MIN_CODE + (n < 0 ? NUM_DIGITS + n : n);\n    if (code < MIN_CODE || code > MAX_CODE) {\n        throw new Error(\"Invalid n value: \".concat(n));\n    }\n    return String.fromCharCode(code);\n}\nfunction makePosition(x, y) {\n    if (x !== void 0 && y !== void 0) {\n        return between(x, y);\n    } else if (x !== void 0) {\n        return after(x);\n    } else if (y !== void 0) {\n        return before(y);\n    } else {\n        return ONE;\n    }\n}\nfunction before(pos) {\n    const lastIndex = pos.length - 1;\n    for(let i = 0; i <= lastIndex; i++){\n        const code = pos.charCodeAt(i);\n        if (code <= MIN_CODE) {\n            continue;\n        }\n        if (i === lastIndex) {\n            if (code === MIN_CODE + 1) {\n                return pos.substring(0, i) + ZERO_NINE;\n            } else {\n                return pos.substring(0, i) + String.fromCharCode(code - 1);\n            }\n        } else {\n            return pos.substring(0, i + 1);\n        }\n    }\n    return ONE;\n}\nfunction after(pos) {\n    for(let i = 0; i <= pos.length - 1; i++){\n        const code = pos.charCodeAt(i);\n        if (code >= MAX_CODE) {\n            continue;\n        }\n        return pos.substring(0, i) + String.fromCharCode(code + 1);\n    }\n    return pos + ONE;\n}\nfunction between(lo, hi) {\n    if (lo < hi) {\n        return _between(lo, hi);\n    } else if (lo > hi) {\n        return _between(hi, lo);\n    } else {\n        throw new Error(\"Cannot compute value between two equal positions\");\n    }\n}\nfunction _between(lo, hi) {\n    let index = 0;\n    const loLen = lo.length;\n    const hiLen = hi.length;\n    while(true){\n        const loCode = index < loLen ? lo.charCodeAt(index) : MIN_CODE;\n        const hiCode = index < hiLen ? hi.charCodeAt(index) : MAX_CODE;\n        if (loCode === hiCode) {\n            index++;\n            continue;\n        }\n        if (hiCode - loCode === 1) {\n            const size = index + 1;\n            let prefix = lo.substring(0, size);\n            if (prefix.length < size) {\n                prefix += ZERO.repeat(size - prefix.length);\n            }\n            const suffix = lo.substring(size);\n            const nines = \"\";\n            return prefix + _between(suffix, nines);\n        } else {\n            return takeN(lo, index) + String.fromCharCode(hiCode + loCode >> 1);\n        }\n    }\n}\nfunction takeN(pos, n) {\n    return n < pos.length ? pos.substring(0, n) : pos + ZERO.repeat(n - pos.length);\n}\nvar MIN_NON_ZERO_CODE = MIN_CODE + 1;\nfunction isPos(str) {\n    if (str === \"\") {\n        return false;\n    }\n    const lastIdx = str.length - 1;\n    const last = str.charCodeAt(lastIdx);\n    if (last < MIN_NON_ZERO_CODE || last > MAX_CODE) {\n        return false;\n    }\n    for(let i = 0; i < lastIdx; i++){\n        const code = str.charCodeAt(i);\n        if (code < MIN_CODE || code > MAX_CODE) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction convertToPos(str) {\n    const codes = [];\n    for(let i = 0; i < str.length; i++){\n        const code = str.charCodeAt(i);\n        codes.push(code < MIN_CODE ? MIN_CODE : code > MAX_CODE ? MAX_CODE : code);\n    }\n    while(codes.length > 0 && codes[codes.length - 1] === MIN_CODE){\n        codes.length--;\n    }\n    return codes.length > 0 ? String.fromCharCode(...codes) : // Edge case: the str was a 0-only string, which is invalid. Default back to .1\n    ONE;\n}\nfunction asPos(str) {\n    return isPos(str) ? str : convertToPos(str);\n}\n// src/protocol/Op.ts\nvar OpCode = /* @__PURE__ */ ((OpCode2)=>{\n    OpCode2[OpCode2[\"INIT\"] = 0] = \"INIT\";\n    OpCode2[OpCode2[\"SET_PARENT_KEY\"] = 1] = \"SET_PARENT_KEY\";\n    OpCode2[OpCode2[\"CREATE_LIST\"] = 2] = \"CREATE_LIST\";\n    OpCode2[OpCode2[\"UPDATE_OBJECT\"] = 3] = \"UPDATE_OBJECT\";\n    OpCode2[OpCode2[\"CREATE_OBJECT\"] = 4] = \"CREATE_OBJECT\";\n    OpCode2[OpCode2[\"DELETE_CRDT\"] = 5] = \"DELETE_CRDT\";\n    OpCode2[OpCode2[\"DELETE_OBJECT_KEY\"] = 6] = \"DELETE_OBJECT_KEY\";\n    OpCode2[OpCode2[\"CREATE_MAP\"] = 7] = \"CREATE_MAP\";\n    OpCode2[OpCode2[\"CREATE_REGISTER\"] = 8] = \"CREATE_REGISTER\";\n    return OpCode2;\n})(OpCode || {});\nfunction ackOp(opId) {\n    return {\n        type: 5 /* DELETE_CRDT */ ,\n        id: \"ACK\",\n        // (H)ACK\n        opId\n    };\n}\nfunction isAckOp(op) {\n    return op.type === 5 /* DELETE_CRDT */  && op.id === \"ACK\";\n}\n// src/crdts/AbstractCrdt.ts\nfunction crdtAsLiveNode(value) {\n    return value;\n}\nfunction HasParent(node, key) {\n    let pos = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : asPos(key);\n    return Object.freeze({\n        type: \"HasParent\",\n        node,\n        key,\n        pos\n    });\n}\n_c = HasParent;\nvar NoParent = Object.freeze({\n    type: \"NoParent\"\n});\nfunction Orphaned(oldKey) {\n    let oldPos = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : asPos(oldKey);\n    return Object.freeze({\n        type: \"Orphaned\",\n        oldKey,\n        oldPos\n    });\n}\n_c1 = Orphaned;\nvar AbstractCrdt = class {\n    /** @internal */ _getParentKeyOrThrow() {\n        switch(this.parent.type){\n            case \"HasParent\":\n                return this.parent.key;\n            case \"NoParent\":\n                throw new Error(\"Parent key is missing\");\n            case \"Orphaned\":\n                return this.parent.oldKey;\n            default:\n                return assertNever(this.parent, \"Unknown state\");\n        }\n    }\n    /** @internal */ get _parentPos() {\n        switch(this.parent.type){\n            case \"HasParent\":\n                return this.parent.pos;\n            case \"NoParent\":\n                throw new Error(\"Parent key is missing\");\n            case \"Orphaned\":\n                return this.parent.oldPos;\n            default:\n                return assertNever(this.parent, \"Unknown state\");\n        }\n    }\n    /** @internal */ get _pool() {\n        return this.__pool;\n    }\n    get roomId() {\n        return this.__pool ? this.__pool.roomId : null;\n    }\n    /** @internal */ get _id() {\n        return this.__id;\n    }\n    /** @internal */ get parent() {\n        return this._parent;\n    }\n    /** @internal */ get _parentKey() {\n        switch(this.parent.type){\n            case \"HasParent\":\n                return this.parent.key;\n            case \"NoParent\":\n                return null;\n            case \"Orphaned\":\n                return this.parent.oldKey;\n            default:\n                return assertNever(this.parent, \"Unknown state\");\n        }\n    }\n    /** @internal */ _apply(op, _isLocal) {\n        switch(op.type){\n            case 5 /* DELETE_CRDT */ :\n                {\n                    if (this.parent.type === \"HasParent\") {\n                        return this.parent.node._detachChild(crdtAsLiveNode(this));\n                    }\n                    return {\n                        modified: false\n                    };\n                }\n        }\n        return {\n            modified: false\n        };\n    }\n    /** @internal */ _setParentLink(newParentNode, newParentKey) {\n        switch(this.parent.type){\n            case \"HasParent\":\n                if (this.parent.node !== newParentNode) {\n                    throw new Error(\"Cannot set parent: node already has a parent\");\n                } else {\n                    this._parent = HasParent(newParentNode, newParentKey);\n                    return;\n                }\n            case \"Orphaned\":\n            case \"NoParent\":\n                {\n                    this._parent = HasParent(newParentNode, newParentKey);\n                    return;\n                }\n            default:\n                return assertNever(this.parent, \"Unknown state\");\n        }\n    }\n    /** @internal */ _attach(id, pool) {\n        if (this.__id || this.__pool) {\n            throw new Error(\"Cannot attach node: already attached\");\n        }\n        pool.addNode(id, crdtAsLiveNode(this));\n        this.__id = id;\n        this.__pool = pool;\n    }\n    /** @internal */ _detach() {\n        if (this.__pool && this.__id) {\n            this.__pool.deleteNode(this.__id);\n        }\n        switch(this.parent.type){\n            case \"HasParent\":\n                {\n                    this._parent = Orphaned(this.parent.key, this.parent.pos);\n                    break;\n                }\n            case \"NoParent\":\n                {\n                    this._parent = NoParent;\n                    break;\n                }\n            case \"Orphaned\":\n                {\n                    break;\n                }\n            default:\n                assertNever(this.parent, \"Unknown state\");\n        }\n        this.__pool = void 0;\n    }\n    /**\n   * @internal\n   *\n   * Clear the Immutable cache, so that the next call to `.toImmutable()` will\n   * recompute the equivalent Immutable value again.  Call this after every\n   * mutation to the Live node.\n   */ invalidate() {\n        if (this._cachedImmutable !== void 0 || this._cachedTreeNode !== void 0) {\n            this._cachedImmutable = void 0;\n            this._cachedTreeNode = void 0;\n            if (this.parent.type === \"HasParent\") {\n                this.parent.node.invalidate();\n            }\n        }\n    }\n    /**\n   * @internal\n   *\n   * Return an snapshot of this Live tree for use in DevTools.\n   */ toTreeNode(key) {\n        if (this._cachedTreeNode === void 0 || this._cachedTreeNodeKey !== key) {\n            this._cachedTreeNodeKey = key;\n            this._cachedTreeNode = this._toTreeNode(key);\n        }\n        return this._cachedTreeNode;\n    }\n    /**\n   * Return an immutable snapshot of this Live node and its children.\n   */ toImmutable() {\n        if (this._cachedImmutable === void 0) {\n            this._cachedImmutable = this._toImmutable();\n        }\n        return this._cachedImmutable;\n    }\n    constructor(){\n        /** @internal */ this._parent = NoParent;\n    }\n};\n// src/protocol/SerializedCrdt.ts\nvar CrdtType = /* @__PURE__ */ ((CrdtType2)=>{\n    CrdtType2[CrdtType2[\"OBJECT\"] = 0] = \"OBJECT\";\n    CrdtType2[CrdtType2[\"LIST\"] = 1] = \"LIST\";\n    CrdtType2[CrdtType2[\"MAP\"] = 2] = \"MAP\";\n    CrdtType2[CrdtType2[\"REGISTER\"] = 3] = \"REGISTER\";\n    return CrdtType2;\n})(CrdtType || {});\nfunction isRootCrdt(crdt) {\n    return crdt.type === 0 /* OBJECT */  && !isChildCrdt(crdt);\n}\nfunction isChildCrdt(crdt) {\n    return crdt.parentId !== void 0 && crdt.parentKey !== void 0;\n}\n// src/lib/nanoid.ts\nfunction nanoid() {\n    let length = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 7;\n    const alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789,./;[]~!@#$%&*()_+=-\";\n    const len = alphabet.length;\n    return Array.from({\n        length\n    }, ()=>alphabet.charAt(Math.floor(Math.random() * len))).join(\"\");\n}\n// src/crdts/LiveRegister.ts\nvar LiveRegister = class _LiveRegister extends AbstractCrdt {\n    get data() {\n        return this._data;\n    }\n    /** @internal */ static _deserialize(param, _parentToChildren, pool) {\n        let [id, item] = param;\n        const register = new _LiveRegister(item.data);\n        register._attach(id, pool);\n        return register;\n    }\n    /** @internal */ _toOps(parentId, parentKey, pool) {\n        if (this._id === void 0) {\n            throw new Error(\"Cannot serialize register if parentId or parentKey is undefined\");\n        }\n        return [\n            {\n                type: 8 /* CREATE_REGISTER */ ,\n                opId: pool === null || pool === void 0 ? void 0 : pool.generateOpId(),\n                id: this._id,\n                parentId,\n                parentKey,\n                data: this.data\n            }\n        ];\n    }\n    /** @internal */ _serialize() {\n        if (this.parent.type !== \"HasParent\") {\n            throw new Error(\"Cannot serialize LiveRegister if parent is missing\");\n        }\n        return {\n            type: 3 /* REGISTER */ ,\n            parentId: nn(this.parent.node._id, \"Parent node expected to have ID\"),\n            parentKey: this.parent.key,\n            data: this.data\n        };\n    }\n    /** @internal */ _attachChild(_op) {\n        throw new Error(\"Method not implemented.\");\n    }\n    /** @internal */ _detachChild(_crdt) {\n        throw new Error(\"Method not implemented.\");\n    }\n    /** @internal */ _apply(op, isLocal) {\n        return super._apply(op, isLocal);\n    }\n    /** @internal */ _toTreeNode(key) {\n        var _this__id;\n        return {\n            type: \"Json\",\n            id: (_this__id = this._id) !== null && _this__id !== void 0 ? _this__id : nanoid(),\n            key,\n            payload: this._data\n        };\n    }\n    /** @internal */ _toImmutable() {\n        return this._data;\n    }\n    clone() {\n        return deepClone(this.data);\n    }\n    constructor(data){\n        super();\n        this._data = data;\n    }\n};\n// src/crdts/LiveList.ts\nfunction compareNodePosition(itemA, itemB) {\n    const posA = itemA._parentPos;\n    const posB = itemB._parentPos;\n    return posA === posB ? 0 : posA < posB ? -1 : 1;\n}\nvar LiveList = class _LiveList extends AbstractCrdt {\n    /** @internal */ static _deserialize(param, parentToChildren, pool) {\n        let [id] = param;\n        const list = new _LiveList();\n        list._attach(id, pool);\n        const children = parentToChildren.get(id);\n        if (children === void 0) {\n            return list;\n        }\n        for (const [id2, crdt] of children){\n            const child = deserialize([\n                id2,\n                crdt\n            ], parentToChildren, pool);\n            child._setParentLink(list, crdt.parentKey);\n            list._insertAndSort(child);\n        }\n        return list;\n    }\n    /**\n   * @internal\n   * This function assumes that the resulting ops will be sent to the server if they have an 'opId'\n   * so we mutate _unacknowledgedSets to avoid potential flickering\n   * https://github.com/liveblocks/liveblocks/pull/1177\n   *\n   * This is quite unintuitive and should disappear as soon as\n   * we introduce an explicit LiveList.Set operation\n   */ _toOps(parentId, parentKey, pool) {\n        if (this._id === void 0) {\n            throw new Error(\"Cannot serialize item is not attached\");\n        }\n        const ops = [];\n        const op = {\n            id: this._id,\n            opId: pool === null || pool === void 0 ? void 0 : pool.generateOpId(),\n            type: 2 /* CREATE_LIST */ ,\n            parentId,\n            parentKey\n        };\n        ops.push(op);\n        for (const item of this._items){\n            const parentKey2 = item._getParentKeyOrThrow();\n            const childOps = HACK_addIntentAndDeletedIdToOperation(item._toOps(this._id, parentKey2, pool), void 0);\n            const childOpId = childOps[0].opId;\n            if (childOpId !== void 0) {\n                this._unacknowledgedSets.set(parentKey2, childOpId);\n            }\n            ops.push(...childOps);\n        }\n        return ops;\n    }\n    /**\n   * @internal\n   *\n   * Adds a new item into the sorted list, in the correct position.\n   */ _insertAndSort(item) {\n        this._items.push(item);\n        this._sortItems();\n    }\n    /** @internal */ _sortItems() {\n        this._items.sort(compareNodePosition);\n        this.invalidate();\n    }\n    /** @internal */ _indexOfPosition(position) {\n        return this._items.findIndex((item)=>item._getParentKeyOrThrow() === position);\n    }\n    /** @internal */ _attach(id, pool) {\n        super._attach(id, pool);\n        for (const item of this._items){\n            item._attach(pool.generateId(), pool);\n        }\n    }\n    /** @internal */ _detach() {\n        super._detach();\n        for (const item of this._items){\n            item._detach();\n        }\n    }\n    /** @internal */ _applySetRemote(op) {\n        if (this._pool === void 0) {\n            throw new Error(\"Can't attach child if managed pool is not present\");\n        }\n        const { id, parentKey: key } = op;\n        const child = creationOpToLiveNode(op);\n        child._attach(id, this._pool);\n        child._setParentLink(this, key);\n        const deletedId = op.deletedId;\n        const indexOfItemWithSamePosition = this._indexOfPosition(key);\n        if (indexOfItemWithSamePosition !== -1) {\n            const itemWithSamePosition = this._items[indexOfItemWithSamePosition];\n            if (itemWithSamePosition._id === deletedId) {\n                itemWithSamePosition._detach();\n                this._items[indexOfItemWithSamePosition] = child;\n                return {\n                    modified: makeUpdate(this, [\n                        setDelta(indexOfItemWithSamePosition, child)\n                    ]),\n                    reverse: []\n                };\n            } else {\n                this._implicitlyDeletedItems.add(itemWithSamePosition);\n                this._items[indexOfItemWithSamePosition] = child;\n                const delta = [\n                    setDelta(indexOfItemWithSamePosition, child)\n                ];\n                const deleteDelta2 = this._detachItemAssociatedToSetOperation(op.deletedId);\n                if (deleteDelta2) {\n                    delta.push(deleteDelta2);\n                }\n                return {\n                    modified: makeUpdate(this, delta),\n                    reverse: []\n                };\n            }\n        } else {\n            const updates = [];\n            const deleteDelta2 = this._detachItemAssociatedToSetOperation(op.deletedId);\n            if (deleteDelta2) {\n                updates.push(deleteDelta2);\n            }\n            this._insertAndSort(child);\n            updates.push(insertDelta(this._indexOfPosition(key), child));\n            return {\n                reverse: [],\n                modified: makeUpdate(this, updates)\n            };\n        }\n    }\n    /** @internal */ _applySetAck(op) {\n        if (this._pool === void 0) {\n            throw new Error(\"Can't attach child if managed pool is not present\");\n        }\n        const delta = [];\n        const deletedDelta = this._detachItemAssociatedToSetOperation(op.deletedId);\n        if (deletedDelta) {\n            delta.push(deletedDelta);\n        }\n        const unacknowledgedOpId = this._unacknowledgedSets.get(op.parentKey);\n        if (unacknowledgedOpId !== void 0) {\n            if (unacknowledgedOpId !== op.opId) {\n                return delta.length === 0 ? {\n                    modified: false\n                } : {\n                    modified: makeUpdate(this, delta),\n                    reverse: []\n                };\n            } else {\n                this._unacknowledgedSets.delete(op.parentKey);\n            }\n        }\n        const indexOfItemWithSamePosition = this._indexOfPosition(op.parentKey);\n        const existingItem = this._items.find((item)=>item._id === op.id);\n        if (existingItem !== void 0) {\n            if (existingItem._parentKey === op.parentKey) {\n                return {\n                    modified: delta.length > 0 ? makeUpdate(this, delta) : false,\n                    reverse: []\n                };\n            }\n            if (indexOfItemWithSamePosition !== -1) {\n                this._implicitlyDeletedItems.add(this._items[indexOfItemWithSamePosition]);\n                this._items.splice(indexOfItemWithSamePosition, 1);\n                delta.push(deleteDelta(indexOfItemWithSamePosition));\n            }\n            const previousIndex = this._items.indexOf(existingItem);\n            existingItem._setParentLink(this, op.parentKey);\n            this._sortItems();\n            const newIndex = this._items.indexOf(existingItem);\n            if (newIndex !== previousIndex) {\n                delta.push(moveDelta(previousIndex, newIndex, existingItem));\n            }\n            return {\n                modified: delta.length > 0 ? makeUpdate(this, delta) : false,\n                reverse: []\n            };\n        } else {\n            const orphan = this._pool.getNode(op.id);\n            if (orphan && this._implicitlyDeletedItems.has(orphan)) {\n                orphan._setParentLink(this, op.parentKey);\n                this._implicitlyDeletedItems.delete(orphan);\n                this._insertAndSort(orphan);\n                const recreatedItemIndex = this._items.indexOf(orphan);\n                return {\n                    modified: makeUpdate(this, [\n                        // If there is an item at this position, update is a set, else it's an insert\n                        indexOfItemWithSamePosition === -1 ? insertDelta(recreatedItemIndex, orphan) : setDelta(recreatedItemIndex, orphan),\n                        ...delta\n                    ]),\n                    reverse: []\n                };\n            } else {\n                if (indexOfItemWithSamePosition !== -1) {\n                    this._items.splice(indexOfItemWithSamePosition, 1);\n                }\n                const { newItem, newIndex } = this._createAttachItemAndSort(op, op.parentKey);\n                return {\n                    modified: makeUpdate(this, [\n                        // If there is an item at this position, update is a set, else it's an insert\n                        indexOfItemWithSamePosition === -1 ? insertDelta(newIndex, newItem) : setDelta(newIndex, newItem),\n                        ...delta\n                    ]),\n                    reverse: []\n                };\n            }\n        }\n    }\n    /**\n   * Returns the update delta of the deletion or null\n   * @internal\n   */ _detachItemAssociatedToSetOperation(deletedId) {\n        if (deletedId === void 0 || this._pool === void 0) {\n            return null;\n        }\n        const deletedItem = this._pool.getNode(deletedId);\n        if (deletedItem === void 0) {\n            return null;\n        }\n        const result = this._detachChild(deletedItem);\n        if (result.modified === false) {\n            return null;\n        }\n        return result.modified.updates[0];\n    }\n    /** @internal */ _applyRemoteInsert(op) {\n        if (this._pool === void 0) {\n            throw new Error(\"Can't attach child if managed pool is not present\");\n        }\n        const key = asPos(op.parentKey);\n        const existingItemIndex = this._indexOfPosition(key);\n        if (existingItemIndex !== -1) {\n            this._shiftItemPosition(existingItemIndex, key);\n        }\n        const { newItem, newIndex } = this._createAttachItemAndSort(op, key);\n        return {\n            modified: makeUpdate(this, [\n                insertDelta(newIndex, newItem)\n            ]),\n            reverse: []\n        };\n    }\n    /** @internal */ _applyInsertAck(op) {\n        const existingItem = this._items.find((item)=>item._id === op.id);\n        const key = asPos(op.parentKey);\n        const itemIndexAtPosition = this._indexOfPosition(key);\n        if (existingItem) {\n            if (existingItem._parentKey === key) {\n                return {\n                    modified: false\n                };\n            } else {\n                const oldPositionIndex = this._items.indexOf(existingItem);\n                if (itemIndexAtPosition !== -1) {\n                    this._shiftItemPosition(itemIndexAtPosition, key);\n                }\n                existingItem._setParentLink(this, key);\n                this._sortItems();\n                const newIndex = this._indexOfPosition(key);\n                if (newIndex === oldPositionIndex) {\n                    return {\n                        modified: false\n                    };\n                }\n                return {\n                    modified: makeUpdate(this, [\n                        moveDelta(oldPositionIndex, newIndex, existingItem)\n                    ]),\n                    reverse: []\n                };\n            }\n        } else {\n            const orphan = nn(this._pool).getNode(op.id);\n            if (orphan && this._implicitlyDeletedItems.has(orphan)) {\n                orphan._setParentLink(this, key);\n                this._implicitlyDeletedItems.delete(orphan);\n                this._insertAndSort(orphan);\n                const newIndex = this._indexOfPosition(key);\n                return {\n                    modified: makeUpdate(this, [\n                        insertDelta(newIndex, orphan)\n                    ]),\n                    reverse: []\n                };\n            } else {\n                if (itemIndexAtPosition !== -1) {\n                    this._shiftItemPosition(itemIndexAtPosition, key);\n                }\n                const { newItem, newIndex } = this._createAttachItemAndSort(op, key);\n                return {\n                    modified: makeUpdate(this, [\n                        insertDelta(newIndex, newItem)\n                    ]),\n                    reverse: []\n                };\n            }\n        }\n    }\n    /** @internal */ _applyInsertUndoRedo(op) {\n        var _this__pool;\n        const { id, parentKey: key } = op;\n        const child = creationOpToLiveNode(op);\n        if (((_this__pool = this._pool) === null || _this__pool === void 0 ? void 0 : _this__pool.getNode(id)) !== void 0) {\n            return {\n                modified: false\n            };\n        }\n        child._attach(id, nn(this._pool));\n        child._setParentLink(this, key);\n        const existingItemIndex = this._indexOfPosition(key);\n        let newKey = key;\n        if (existingItemIndex !== -1) {\n            var _this__items_existingItemIndex, _this__items_;\n            const before2 = (_this__items_existingItemIndex = this._items[existingItemIndex]) === null || _this__items_existingItemIndex === void 0 ? void 0 : _this__items_existingItemIndex._parentPos;\n            const after2 = (_this__items_ = this._items[existingItemIndex + 1]) === null || _this__items_ === void 0 ? void 0 : _this__items_._parentPos;\n            newKey = makePosition(before2, after2);\n            child._setParentLink(this, newKey);\n        }\n        this._insertAndSort(child);\n        const newIndex = this._indexOfPosition(newKey);\n        return {\n            modified: makeUpdate(this, [\n                insertDelta(newIndex, child)\n            ]),\n            reverse: [\n                {\n                    type: 5 /* DELETE_CRDT */ ,\n                    id\n                }\n            ]\n        };\n    }\n    /** @internal */ _applySetUndoRedo(op) {\n        var _this__pool;\n        const { id, parentKey: key } = op;\n        const child = creationOpToLiveNode(op);\n        if (((_this__pool = this._pool) === null || _this__pool === void 0 ? void 0 : _this__pool.getNode(id)) !== void 0) {\n            return {\n                modified: false\n            };\n        }\n        this._unacknowledgedSets.set(key, nn(op.opId));\n        const indexOfItemWithSameKey = this._indexOfPosition(key);\n        child._attach(id, nn(this._pool));\n        child._setParentLink(this, key);\n        const newKey = key;\n        if (indexOfItemWithSameKey !== -1) {\n            const existingItem = this._items[indexOfItemWithSameKey];\n            existingItem._detach();\n            this._items[indexOfItemWithSameKey] = child;\n            const reverse = HACK_addIntentAndDeletedIdToOperation(existingItem._toOps(nn(this._id), key, this._pool), op.id);\n            const delta = [\n                setDelta(indexOfItemWithSameKey, child)\n            ];\n            const deletedDelta = this._detachItemAssociatedToSetOperation(op.deletedId);\n            if (deletedDelta) {\n                delta.push(deletedDelta);\n            }\n            return {\n                modified: makeUpdate(this, delta),\n                reverse\n            };\n        } else {\n            this._insertAndSort(child);\n            this._detachItemAssociatedToSetOperation(op.deletedId);\n            const newIndex = this._indexOfPosition(newKey);\n            return {\n                reverse: [\n                    {\n                        type: 5 /* DELETE_CRDT */ ,\n                        id\n                    }\n                ],\n                modified: makeUpdate(this, [\n                    insertDelta(newIndex, child)\n                ])\n            };\n        }\n    }\n    /** @internal */ _attachChild(op, source) {\n        if (this._pool === void 0) {\n            throw new Error(\"Can't attach child if managed pool is not present\");\n        }\n        let result;\n        if (op.intent === \"set\") {\n            if (source === 1 /* REMOTE */ ) {\n                result = this._applySetRemote(op);\n            } else if (source === 2 /* ACK */ ) {\n                result = this._applySetAck(op);\n            } else {\n                result = this._applySetUndoRedo(op);\n            }\n        } else {\n            if (source === 1 /* REMOTE */ ) {\n                result = this._applyRemoteInsert(op);\n            } else if (source === 2 /* ACK */ ) {\n                result = this._applyInsertAck(op);\n            } else {\n                result = this._applyInsertUndoRedo(op);\n            }\n        }\n        if (result.modified !== false) {\n            this.invalidate();\n        }\n        return result;\n    }\n    /** @internal */ _detachChild(child) {\n        if (child) {\n            const parentKey = nn(child._parentKey);\n            const reverse = child._toOps(nn(this._id), parentKey, this._pool);\n            const indexToDelete = this._items.indexOf(child);\n            if (indexToDelete === -1) {\n                return {\n                    modified: false\n                };\n            }\n            this._items.splice(indexToDelete, 1);\n            this.invalidate();\n            child._detach();\n            return {\n                modified: makeUpdate(this, [\n                    deleteDelta(indexToDelete)\n                ]),\n                reverse\n            };\n        }\n        return {\n            modified: false\n        };\n    }\n    /** @internal */ _applySetChildKeyRemote(newKey, child) {\n        if (this._implicitlyDeletedItems.has(child)) {\n            this._implicitlyDeletedItems.delete(child);\n            child._setParentLink(this, newKey);\n            this._insertAndSort(child);\n            const newIndex = this._items.indexOf(child);\n            return {\n                modified: makeUpdate(this, [\n                    insertDelta(newIndex, child)\n                ]),\n                reverse: []\n            };\n        }\n        const previousKey = child._parentKey;\n        if (newKey === previousKey) {\n            return {\n                modified: false\n            };\n        }\n        const existingItemIndex = this._indexOfPosition(newKey);\n        if (existingItemIndex === -1) {\n            const previousIndex = this._items.indexOf(child);\n            child._setParentLink(this, newKey);\n            this._sortItems();\n            const newIndex = this._items.indexOf(child);\n            if (newIndex === previousIndex) {\n                return {\n                    modified: false\n                };\n            }\n            return {\n                modified: makeUpdate(this, [\n                    moveDelta(previousIndex, newIndex, child)\n                ]),\n                reverse: []\n            };\n        } else {\n            var _this__items_;\n            this._items[existingItemIndex]._setParentLink(this, makePosition(newKey, (_this__items_ = this._items[existingItemIndex + 1]) === null || _this__items_ === void 0 ? void 0 : _this__items_._parentPos));\n            const previousIndex = this._items.indexOf(child);\n            child._setParentLink(this, newKey);\n            this._sortItems();\n            const newIndex = this._items.indexOf(child);\n            if (newIndex === previousIndex) {\n                return {\n                    modified: false\n                };\n            }\n            return {\n                modified: makeUpdate(this, [\n                    moveDelta(previousIndex, newIndex, child)\n                ]),\n                reverse: []\n            };\n        }\n    }\n    /** @internal */ _applySetChildKeyAck(newKey, child) {\n        const previousKey = nn(child._parentKey);\n        if (this._implicitlyDeletedItems.has(child)) {\n            const existingItemIndex = this._indexOfPosition(newKey);\n            this._implicitlyDeletedItems.delete(child);\n            if (existingItemIndex !== -1) {\n                var _this__items_;\n                this._items[existingItemIndex]._setParentLink(this, makePosition(newKey, (_this__items_ = this._items[existingItemIndex + 1]) === null || _this__items_ === void 0 ? void 0 : _this__items_._parentPos));\n            }\n            child._setParentLink(this, newKey);\n            this._insertAndSort(child);\n            return {\n                modified: false\n            };\n        } else {\n            if (newKey === previousKey) {\n                return {\n                    modified: false\n                };\n            }\n            const previousIndex = this._items.indexOf(child);\n            const existingItemIndex = this._indexOfPosition(newKey);\n            if (existingItemIndex !== -1) {\n                var _this__items_1;\n                this._items[existingItemIndex]._setParentLink(this, makePosition(newKey, (_this__items_1 = this._items[existingItemIndex + 1]) === null || _this__items_1 === void 0 ? void 0 : _this__items_1._parentPos));\n            }\n            child._setParentLink(this, newKey);\n            this._sortItems();\n            const newIndex = this._items.indexOf(child);\n            if (previousIndex === newIndex) {\n                return {\n                    modified: false\n                };\n            } else {\n                return {\n                    modified: makeUpdate(this, [\n                        moveDelta(previousIndex, newIndex, child)\n                    ]),\n                    reverse: []\n                };\n            }\n        }\n    }\n    /** @internal */ _applySetChildKeyUndoRedo(newKey, child) {\n        const previousKey = nn(child._parentKey);\n        const previousIndex = this._items.indexOf(child);\n        const existingItemIndex = this._indexOfPosition(newKey);\n        if (existingItemIndex !== -1) {\n            var _this__items_;\n            this._items[existingItemIndex]._setParentLink(this, makePosition(newKey, (_this__items_ = this._items[existingItemIndex + 1]) === null || _this__items_ === void 0 ? void 0 : _this__items_._parentPos));\n        }\n        child._setParentLink(this, newKey);\n        this._sortItems();\n        const newIndex = this._items.indexOf(child);\n        if (previousIndex === newIndex) {\n            return {\n                modified: false\n            };\n        }\n        return {\n            modified: makeUpdate(this, [\n                moveDelta(previousIndex, newIndex, child)\n            ]),\n            reverse: [\n                {\n                    type: 1 /* SET_PARENT_KEY */ ,\n                    id: nn(child._id),\n                    parentKey: previousKey\n                }\n            ]\n        };\n    }\n    /** @internal */ _setChildKey(newKey, child, source) {\n        if (source === 1 /* REMOTE */ ) {\n            return this._applySetChildKeyRemote(newKey, child);\n        } else if (source === 2 /* ACK */ ) {\n            return this._applySetChildKeyAck(newKey, child);\n        } else {\n            return this._applySetChildKeyUndoRedo(newKey, child);\n        }\n    }\n    /** @internal */ _apply(op, isLocal) {\n        return super._apply(op, isLocal);\n    }\n    /** @internal */ _serialize() {\n        if (this.parent.type !== \"HasParent\") {\n            throw new Error(\"Cannot serialize LiveList if parent is missing\");\n        }\n        return {\n            type: 1 /* LIST */ ,\n            parentId: nn(this.parent.node._id, \"Parent node expected to have ID\"),\n            parentKey: this.parent.key\n        };\n    }\n    /**\n   * Returns the number of elements.\n   */ get length() {\n        return this._items.length;\n    }\n    /**\n   * Adds one element to the end of the LiveList.\n   * @param element The element to add to the end of the LiveList.\n   */ push(element) {\n        var _this__pool;\n        (_this__pool = this._pool) === null || _this__pool === void 0 ? void 0 : _this__pool.assertStorageIsWritable();\n        return this.insert(element, this.length);\n    }\n    /**\n   * Inserts one element at a specified index.\n   * @param element The element to insert.\n   * @param index The index at which you want to insert the element.\n   */ insert(element, index) {\n        var _this__pool;\n        (_this__pool = this._pool) === null || _this__pool === void 0 ? void 0 : _this__pool.assertStorageIsWritable();\n        if (index < 0 || index > this._items.length) {\n            throw new Error('Cannot insert list item at index \"\\x1d'.concat(index, '\". index should be between 0 and ').concat(this._items.length));\n        }\n        const before2 = this._items[index - 1] ? this._items[index - 1]._parentPos : void 0;\n        const after2 = this._items[index] ? this._items[index]._parentPos : void 0;\n        const position = makePosition(before2, after2);\n        const value = lsonToLiveNode(element);\n        value._setParentLink(this, position);\n        this._insertAndSort(value);\n        if (this._pool && this._id) {\n            const id = this._pool.generateId();\n            value._attach(id, this._pool);\n            this._pool.dispatch(value._toOps(this._id, position, this._pool), [\n                {\n                    type: 5 /* DELETE_CRDT */ ,\n                    id\n                }\n            ], /* @__PURE__ */ new Map([\n                [\n                    this._id,\n                    makeUpdate(this, [\n                        insertDelta(index, value)\n                    ])\n                ]\n            ]));\n        }\n    }\n    /**\n   * Move one element from one index to another.\n   * @param index The index of the element to move\n   * @param targetIndex The index where the element should be after moving.\n   */ move(index, targetIndex) {\n        var _this__pool;\n        (_this__pool = this._pool) === null || _this__pool === void 0 ? void 0 : _this__pool.assertStorageIsWritable();\n        if (targetIndex < 0) {\n            throw new Error(\"targetIndex cannot be less than 0\");\n        }\n        if (targetIndex >= this._items.length) {\n            throw new Error(\"targetIndex cannot be greater or equal than the list length\");\n        }\n        if (index < 0) {\n            throw new Error(\"index cannot be less than 0\");\n        }\n        if (index >= this._items.length) {\n            throw new Error(\"index cannot be greater or equal than the list length\");\n        }\n        let beforePosition = null;\n        let afterPosition = null;\n        if (index < targetIndex) {\n            afterPosition = targetIndex === this._items.length - 1 ? void 0 : this._items[targetIndex + 1]._parentPos;\n            beforePosition = this._items[targetIndex]._parentPos;\n        } else {\n            afterPosition = this._items[targetIndex]._parentPos;\n            beforePosition = targetIndex === 0 ? void 0 : this._items[targetIndex - 1]._parentPos;\n        }\n        const position = makePosition(beforePosition, afterPosition);\n        const item = this._items[index];\n        const previousPosition = item._getParentKeyOrThrow();\n        item._setParentLink(this, position);\n        this._sortItems();\n        if (this._pool && this._id) {\n            const storageUpdates = /* @__PURE__ */ new Map([\n                [\n                    this._id,\n                    makeUpdate(this, [\n                        moveDelta(index, targetIndex, item)\n                    ])\n                ]\n            ]);\n            this._pool.dispatch([\n                {\n                    type: 1 /* SET_PARENT_KEY */ ,\n                    id: nn(item._id),\n                    opId: this._pool.generateOpId(),\n                    parentKey: position\n                }\n            ], [\n                {\n                    type: 1 /* SET_PARENT_KEY */ ,\n                    id: nn(item._id),\n                    parentKey: previousPosition\n                }\n            ], storageUpdates);\n        }\n    }\n    /**\n   * Deletes an element at the specified index\n   * @param index The index of the element to delete\n   */ delete(index) {\n        var _this__pool;\n        (_this__pool = this._pool) === null || _this__pool === void 0 ? void 0 : _this__pool.assertStorageIsWritable();\n        if (index < 0 || index >= this._items.length) {\n            throw new Error('Cannot delete list item at index \"'.concat(index, '\". index should be between 0 and ').concat(this._items.length - 1));\n        }\n        const item = this._items[index];\n        item._detach();\n        this._items.splice(index, 1);\n        this.invalidate();\n        if (this._pool) {\n            const childRecordId = item._id;\n            if (childRecordId) {\n                const storageUpdates = /* @__PURE__ */ new Map();\n                storageUpdates.set(nn(this._id), makeUpdate(this, [\n                    deleteDelta(index)\n                ]));\n                this._pool.dispatch([\n                    {\n                        id: childRecordId,\n                        opId: this._pool.generateOpId(),\n                        type: 5 /* DELETE_CRDT */ \n                    }\n                ], item._toOps(nn(this._id), item._getParentKeyOrThrow()), storageUpdates);\n            }\n        }\n    }\n    clear() {\n        var _this__pool;\n        (_this__pool = this._pool) === null || _this__pool === void 0 ? void 0 : _this__pool.assertStorageIsWritable();\n        if (this._pool) {\n            const ops = [];\n            const reverseOps = [];\n            const updateDelta = [];\n            for (const item of this._items){\n                item._detach();\n                const childId = item._id;\n                if (childId) {\n                    ops.push({\n                        type: 5 /* DELETE_CRDT */ ,\n                        id: childId,\n                        opId: this._pool.generateOpId()\n                    });\n                    reverseOps.push(...item._toOps(nn(this._id), item._getParentKeyOrThrow()));\n                    updateDelta.push(deleteDelta(0));\n                }\n            }\n            this._items = [];\n            this.invalidate();\n            const storageUpdates = /* @__PURE__ */ new Map();\n            storageUpdates.set(nn(this._id), makeUpdate(this, updateDelta));\n            this._pool.dispatch(ops, reverseOps, storageUpdates);\n        } else {\n            for (const item of this._items){\n                item._detach();\n            }\n            this._items = [];\n            this.invalidate();\n        }\n    }\n    set(index, item) {\n        var _this__pool;\n        (_this__pool = this._pool) === null || _this__pool === void 0 ? void 0 : _this__pool.assertStorageIsWritable();\n        if (index < 0 || index >= this._items.length) {\n            throw new Error('Cannot set list item at index \"\\x1d'.concat(index, '\". index should be between 0 and ').concat(this._items.length - 1));\n        }\n        const existingItem = this._items[index];\n        const position = existingItem._getParentKeyOrThrow();\n        const existingId = existingItem._id;\n        existingItem._detach();\n        const value = lsonToLiveNode(item);\n        value._setParentLink(this, position);\n        this._items[index] = value;\n        this.invalidate();\n        if (this._pool && this._id) {\n            const id = this._pool.generateId();\n            value._attach(id, this._pool);\n            const storageUpdates = /* @__PURE__ */ new Map();\n            storageUpdates.set(this._id, makeUpdate(this, [\n                setDelta(index, value)\n            ]));\n            const ops = HACK_addIntentAndDeletedIdToOperation(value._toOps(this._id, position, this._pool), existingId);\n            this._unacknowledgedSets.set(position, nn(ops[0].opId));\n            const reverseOps = HACK_addIntentAndDeletedIdToOperation(existingItem._toOps(this._id, position, void 0), id);\n            this._pool.dispatch(ops, reverseOps, storageUpdates);\n        }\n    }\n    /**\n   * Returns an Array of all the elements in the LiveList.\n   */ toArray() {\n        return this._items.map((entry)=>liveNodeToLson(entry));\n    }\n    /**\n   * Tests whether all elements pass the test implemented by the provided function.\n   * @param predicate Function to test for each element, taking two arguments (the element and its index).\n   * @returns true if the predicate function returns a truthy value for every element. Otherwise, false.\n   */ every(predicate) {\n        return this.toArray().every(predicate);\n    }\n    /**\n   * Creates an array with all elements that pass the test implemented by the provided function.\n   * @param predicate Function to test each element of the LiveList. Return a value that coerces to true to keep the element, or to false otherwise.\n   * @returns An array with the elements that pass the test.\n   */ filter(predicate) {\n        return this.toArray().filter(predicate);\n    }\n    /**\n   * Returns the first element that satisfies the provided testing function.\n   * @param predicate Function to execute on each value.\n   * @returns The value of the first element in the LiveList that satisfies the provided testing function. Otherwise, undefined is returned.\n   */ find(predicate) {\n        return this.toArray().find(predicate);\n    }\n    /**\n   * Returns the index of the first element in the LiveList that satisfies the provided testing function.\n   * @param predicate Function to execute on each value until the function returns true, indicating that the satisfying element was found.\n   * @returns The index of the first element in the LiveList that passes the test. Otherwise, -1.\n   */ findIndex(predicate) {\n        return this.toArray().findIndex(predicate);\n    }\n    /**\n   * Executes a provided function once for each element.\n   * @param callbackfn Function to execute on each element.\n   */ forEach(callbackfn) {\n        return this.toArray().forEach(callbackfn);\n    }\n    /**\n   * Get the element at the specified index.\n   * @param index The index on the element to get.\n   * @returns The element at the specified index or undefined.\n   */ get(index) {\n        if (index < 0 || index >= this._items.length) {\n            return void 0;\n        }\n        return liveNodeToLson(this._items[index]);\n    }\n    /**\n   * Returns the first index at which a given element can be found in the LiveList, or -1 if it is not present.\n   * @param searchElement Element to locate.\n   * @param fromIndex The index to start the search at.\n   * @returns The first index of the element in the LiveList; -1 if not found.\n   */ indexOf(searchElement, fromIndex) {\n        return this.toArray().indexOf(searchElement, fromIndex);\n    }\n    /**\n   * Returns the last index at which a given element can be found in the LiveList, or -1 if it is not present. The LiveLsit is searched backwards, starting at fromIndex.\n   * @param searchElement Element to locate.\n   * @param fromIndex The index at which to start searching backwards.\n   * @returns\n   */ lastIndexOf(searchElement, fromIndex) {\n        return this.toArray().lastIndexOf(searchElement, fromIndex);\n    }\n    /**\n   * Creates an array populated with the results of calling a provided function on every element.\n   * @param callback Function that is called for every element.\n   * @returns An array with each element being the result of the callback function.\n   */ map(callback) {\n        return this._items.map((entry, i)=>callback(liveNodeToLson(entry), //                    ^^^^^^^^\n            //                    FIXME! This isn't safe.\n            i));\n    }\n    /**\n   * Tests whether at least one element in the LiveList passes the test implemented by the provided function.\n   * @param predicate Function to test for each element.\n   * @returns true if the callback function returns a truthy value for at least one element. Otherwise, false.\n   */ some(predicate) {\n        return this.toArray().some(predicate);\n    }\n    [Symbol.iterator]() {\n        return new LiveListIterator(this._items);\n    }\n    /** @internal */ _createAttachItemAndSort(op, key) {\n        const newItem = creationOpToLiveNode(op);\n        newItem._attach(op.id, nn(this._pool));\n        newItem._setParentLink(this, key);\n        this._insertAndSort(newItem);\n        const newIndex = this._indexOfPosition(key);\n        return {\n            newItem,\n            newIndex\n        };\n    }\n    /** @internal */ _shiftItemPosition(index, key) {\n        var _this__items_;\n        const shiftedPosition = makePosition(key, this._items.length > index + 1 ? (_this__items_ = this._items[index + 1]) === null || _this__items_ === void 0 ? void 0 : _this__items_._parentPos : void 0);\n        this._items[index]._setParentLink(this, shiftedPosition);\n    }\n    /** @internal */ _toTreeNode(key) {\n        var _this__id;\n        return {\n            type: \"LiveList\",\n            id: (_this__id = this._id) !== null && _this__id !== void 0 ? _this__id : nanoid(),\n            key,\n            payload: this._items.map((item, index)=>item.toTreeNode(index.toString()))\n        };\n    }\n    toImmutable() {\n        return super.toImmutable();\n    }\n    /** @internal */ _toImmutable() {\n        const result = this._items.map((node)=>node.toImmutable());\n        return  false ? 0 : Object.freeze(result);\n    }\n    clone() {\n        return new _LiveList(this._items.map((item)=>item.clone()));\n    }\n    constructor(items = []){\n        super();\n        this._items = [];\n        this._implicitlyDeletedItems = /* @__PURE__ */ new WeakSet();\n        this._unacknowledgedSets = /* @__PURE__ */ new Map();\n        let position = void 0;\n        for (const item of items){\n            const newPosition = makePosition(position);\n            const node = lsonToLiveNode(item);\n            node._setParentLink(this, newPosition);\n            this._items.push(node);\n            position = newPosition;\n        }\n    }\n};\nvar LiveListIterator = class {\n    [Symbol.iterator]() {\n        return this;\n    }\n    next() {\n        const result = this._innerIterator.next();\n        if (result.done) {\n            return {\n                done: true,\n                value: void 0\n            };\n        }\n        const value = liveNodeToLson(result.value);\n        return {\n            value\n        };\n    }\n    constructor(items){\n        this._innerIterator = items[Symbol.iterator]();\n    }\n};\nfunction makeUpdate(liveList, deltaUpdates) {\n    return {\n        node: liveList,\n        type: \"LiveList\",\n        updates: deltaUpdates\n    };\n}\nfunction setDelta(index, item) {\n    return {\n        index,\n        type: \"set\",\n        item: item instanceof LiveRegister ? item.data : item\n    };\n}\nfunction deleteDelta(index) {\n    return {\n        index,\n        type: \"delete\"\n    };\n}\nfunction insertDelta(index, item) {\n    return {\n        index,\n        type: \"insert\",\n        item: item instanceof LiveRegister ? item.data : item\n    };\n}\nfunction moveDelta(previousIndex, index, item) {\n    return {\n        index,\n        type: \"move\",\n        previousIndex,\n        item: item instanceof LiveRegister ? item.data : item\n    };\n}\nfunction HACK_addIntentAndDeletedIdToOperation(ops, deletedId) {\n    return ops.map((op, index)=>{\n        if (index === 0) {\n            const firstOp = op;\n            return {\n                ...firstOp,\n                intent: \"set\",\n                deletedId\n            };\n        } else {\n            return op;\n        }\n    });\n}\n_c2 = HACK_addIntentAndDeletedIdToOperation;\n// src/lib/freeze.ts\nvar freeze =  false ? /* istanbul ignore next */ 0 : Object.freeze;\n// src/crdts/LiveMap.ts\nvar LiveMap = class _LiveMap extends AbstractCrdt {\n    /**\n   * @internal\n   */ _toOps(parentId, parentKey, pool) {\n        if (this._id === void 0) {\n            throw new Error(\"Cannot serialize item is not attached\");\n        }\n        const ops = [];\n        const op = {\n            id: this._id,\n            opId: pool === null || pool === void 0 ? void 0 : pool.generateOpId(),\n            type: 7 /* CREATE_MAP */ ,\n            parentId,\n            parentKey\n        };\n        ops.push(op);\n        for (const [key, value] of this._map){\n            ops.push(...value._toOps(this._id, key, pool));\n        }\n        return ops;\n    }\n    /**\n   * @internal\n   */ static _deserialize(param, parentToChildren, pool) {\n        let [id, _item] = param;\n        const map = new _LiveMap();\n        map._attach(id, pool);\n        const children = parentToChildren.get(id);\n        if (children === void 0) {\n            return map;\n        }\n        for (const [id2, crdt] of children){\n            const child = deserialize([\n                id2,\n                crdt\n            ], parentToChildren, pool);\n            child._setParentLink(map, crdt.parentKey);\n            map._map.set(crdt.parentKey, child);\n            map.invalidate();\n        }\n        return map;\n    }\n    /**\n   * @internal\n   */ _attach(id, pool) {\n        super._attach(id, pool);\n        for (const [_key, value] of this._map){\n            if (isLiveNode(value)) {\n                value._attach(pool.generateId(), pool);\n            }\n        }\n    }\n    /**\n   * @internal\n   */ _attachChild(op, source) {\n        if (this._pool === void 0) {\n            throw new Error(\"Can't attach child if managed pool is not present\");\n        }\n        const { id, parentKey, opId } = op;\n        const key = parentKey;\n        const child = creationOpToLiveNode(op);\n        if (this._pool.getNode(id) !== void 0) {\n            return {\n                modified: false\n            };\n        }\n        if (source === 2 /* ACK */ ) {\n            const lastUpdateOpId = this.unacknowledgedSet.get(key);\n            if (lastUpdateOpId === opId) {\n                this.unacknowledgedSet.delete(key);\n                return {\n                    modified: false\n                };\n            } else if (lastUpdateOpId !== void 0) {\n                return {\n                    modified: false\n                };\n            }\n        } else if (source === 1 /* REMOTE */ ) {\n            this.unacknowledgedSet.delete(key);\n        }\n        const previousValue = this._map.get(key);\n        let reverse;\n        if (previousValue) {\n            const thisId = nn(this._id);\n            reverse = previousValue._toOps(thisId, key);\n            previousValue._detach();\n        } else {\n            reverse = [\n                {\n                    type: 5 /* DELETE_CRDT */ ,\n                    id\n                }\n            ];\n        }\n        child._setParentLink(this, key);\n        child._attach(id, this._pool);\n        this._map.set(key, child);\n        this.invalidate();\n        return {\n            modified: {\n                node: this,\n                type: \"LiveMap\",\n                updates: {\n                    [key]: {\n                        type: \"update\"\n                    }\n                }\n            },\n            reverse\n        };\n    }\n    /**\n   * @internal\n   */ _detach() {\n        super._detach();\n        for (const item of this._map.values()){\n            item._detach();\n        }\n    }\n    /**\n   * @internal\n   */ _detachChild(child) {\n        const id = nn(this._id);\n        const parentKey = nn(child._parentKey);\n        const reverse = child._toOps(id, parentKey, this._pool);\n        for (const [key, value] of this._map){\n            if (value === child) {\n                this._map.delete(key);\n                this.invalidate();\n            }\n        }\n        child._detach();\n        const storageUpdate = {\n            node: this,\n            type: \"LiveMap\",\n            updates: {\n                [parentKey]: {\n                    type: \"delete\"\n                }\n            }\n        };\n        return {\n            modified: storageUpdate,\n            reverse\n        };\n    }\n    /**\n   * @internal\n   */ _serialize() {\n        if (this.parent.type !== \"HasParent\") {\n            throw new Error(\"Cannot serialize LiveMap if parent is missing\");\n        }\n        return {\n            type: 2 /* MAP */ ,\n            parentId: nn(this.parent.node._id, \"Parent node expected to have ID\"),\n            parentKey: this.parent.key\n        };\n    }\n    /**\n   * Returns a specified element from the LiveMap.\n   * @param key The key of the element to return.\n   * @returns The element associated with the specified key, or undefined if the key can't be found in the LiveMap.\n   */ get(key) {\n        const value = this._map.get(key);\n        if (value === void 0) {\n            return void 0;\n        }\n        return liveNodeToLson(value);\n    }\n    /**\n   * Adds or updates an element with a specified key and a value.\n   * @param key The key of the element to add. Should be a string.\n   * @param value The value of the element to add. Should be serializable to JSON.\n   */ set(key, value) {\n        var _this__pool;\n        (_this__pool = this._pool) === null || _this__pool === void 0 ? void 0 : _this__pool.assertStorageIsWritable();\n        const oldValue = this._map.get(key);\n        if (oldValue) {\n            oldValue._detach();\n        }\n        const item = lsonToLiveNode(value);\n        item._setParentLink(this, key);\n        this._map.set(key, item);\n        this.invalidate();\n        if (this._pool && this._id) {\n            const id = this._pool.generateId();\n            item._attach(id, this._pool);\n            const storageUpdates = /* @__PURE__ */ new Map();\n            storageUpdates.set(this._id, {\n                node: this,\n                type: \"LiveMap\",\n                updates: {\n                    [key]: {\n                        type: \"update\"\n                    }\n                }\n            });\n            const ops = item._toOps(this._id, key, this._pool);\n            this.unacknowledgedSet.set(key, nn(ops[0].opId));\n            this._pool.dispatch(item._toOps(this._id, key, this._pool), oldValue ? oldValue._toOps(this._id, key) : [\n                {\n                    type: 5 /* DELETE_CRDT */ ,\n                    id\n                }\n            ], storageUpdates);\n        }\n    }\n    /**\n   * Returns the number of elements in the LiveMap.\n   */ get size() {\n        return this._map.size;\n    }\n    /**\n   * Returns a boolean indicating whether an element with the specified key exists or not.\n   * @param key The key of the element to test for presence.\n   */ has(key) {\n        return this._map.has(key);\n    }\n    /**\n   * Removes the specified element by key.\n   * @param key The key of the element to remove.\n   * @returns true if an element existed and has been removed, or false if the element does not exist.\n   */ delete(key) {\n        var _this__pool;\n        (_this__pool = this._pool) === null || _this__pool === void 0 ? void 0 : _this__pool.assertStorageIsWritable();\n        const item = this._map.get(key);\n        if (item === void 0) {\n            return false;\n        }\n        item._detach();\n        this._map.delete(key);\n        this.invalidate();\n        if (this._pool && item._id) {\n            const thisId = nn(this._id);\n            const storageUpdates = /* @__PURE__ */ new Map();\n            storageUpdates.set(thisId, {\n                node: this,\n                type: \"LiveMap\",\n                updates: {\n                    [key]: {\n                        type: \"delete\"\n                    }\n                }\n            });\n            this._pool.dispatch([\n                {\n                    type: 5 /* DELETE_CRDT */ ,\n                    id: item._id,\n                    opId: this._pool.generateOpId()\n                }\n            ], item._toOps(thisId, key), storageUpdates);\n        }\n        return true;\n    }\n    /**\n   * Returns a new Iterator object that contains the [key, value] pairs for each element.\n   */ entries() {\n        const innerIterator = this._map.entries();\n        return {\n            [Symbol.iterator] () {\n                return this;\n            },\n            next () {\n                const iteratorValue = innerIterator.next();\n                if (iteratorValue.done) {\n                    return {\n                        done: true,\n                        value: void 0\n                    };\n                }\n                const entry = iteratorValue.value;\n                const key = entry[0];\n                const value = liveNodeToLson(iteratorValue.value[1]);\n                return {\n                    value: [\n                        key,\n                        value\n                    ]\n                };\n            }\n        };\n    }\n    /**\n   * Same function object as the initial value of the entries method.\n   */ [Symbol.iterator]() {\n        return this.entries();\n    }\n    /**\n   * Returns a new Iterator object that contains the keys for each element.\n   */ keys() {\n        return this._map.keys();\n    }\n    /**\n   * Returns a new Iterator object that contains the values for each element.\n   */ values() {\n        const innerIterator = this._map.values();\n        return {\n            [Symbol.iterator] () {\n                return this;\n            },\n            next () {\n                const iteratorValue = innerIterator.next();\n                if (iteratorValue.done) {\n                    return {\n                        done: true,\n                        value: void 0\n                    };\n                }\n                const value = liveNodeToLson(iteratorValue.value);\n                return {\n                    value\n                };\n            }\n        };\n    }\n    /**\n   * Executes a provided function once per each key/value pair in the Map object, in insertion order.\n   * @param callback Function to execute for each entry in the map.\n   */ forEach(callback) {\n        for (const entry of this){\n            callback(entry[1], entry[0], this);\n        }\n    }\n    /** @internal */ _toTreeNode(key) {\n        var _this__id;\n        return {\n            type: \"LiveMap\",\n            id: (_this__id = this._id) !== null && _this__id !== void 0 ? _this__id : nanoid(),\n            key,\n            payload: Array.from(this._map.entries()).map((param)=>{\n                let [key2, val] = param;\n                return val.toTreeNode(key2);\n            })\n        };\n    }\n    toImmutable() {\n        return super.toImmutable();\n    }\n    /** @internal */ _toImmutable() {\n        const result = /* @__PURE__ */ new Map();\n        for (const [key, value] of this._map){\n            result.set(key, value.toImmutable());\n        }\n        return freeze(result);\n    }\n    clone() {\n        return new _LiveMap(Array.from(this._map).map((param)=>{\n            let [key, node] = param;\n            return [\n                key,\n                node.clone()\n            ];\n        }));\n    }\n    constructor(entries2){\n        super();\n        this.unacknowledgedSet = /* @__PURE__ */ new Map();\n        if (entries2) {\n            const mappedEntries = [];\n            for (const [key, value] of entries2){\n                const node = lsonToLiveNode(value);\n                node._setParentLink(this, key);\n                mappedEntries.push([\n                    key,\n                    node\n                ]);\n            }\n            this._map = new Map(mappedEntries);\n        } else {\n            this._map = /* @__PURE__ */ new Map();\n        }\n    }\n};\n// src/crdts/LiveObject.ts\nvar LiveObject = class _LiveObject extends AbstractCrdt {\n    /** @internal */ static _buildRootAndParentToChildren(items) {\n        const parentToChildren = /* @__PURE__ */ new Map();\n        let root = null;\n        for (const [id, crdt] of items){\n            if (isRootCrdt(crdt)) {\n                root = [\n                    id,\n                    crdt\n                ];\n            } else {\n                const tuple = [\n                    id,\n                    crdt\n                ];\n                const children = parentToChildren.get(crdt.parentId);\n                if (children !== void 0) {\n                    children.push(tuple);\n                } else {\n                    parentToChildren.set(crdt.parentId, [\n                        tuple\n                    ]);\n                }\n            }\n        }\n        if (root === null) {\n            throw new Error(\"Root can't be null\");\n        }\n        return [\n            root,\n            parentToChildren\n        ];\n    }\n    /** @internal */ static _fromItems(items, pool) {\n        const [root, parentToChildren] = _LiveObject._buildRootAndParentToChildren(items);\n        return _LiveObject._deserialize(root, parentToChildren, pool);\n    }\n    /** @internal */ _toOps(parentId, parentKey, pool) {\n        if (this._id === void 0) {\n            throw new Error(\"Cannot serialize item is not attached\");\n        }\n        const opId = pool === null || pool === void 0 ? void 0 : pool.generateOpId();\n        const ops = [];\n        const op = {\n            type: 4 /* CREATE_OBJECT */ ,\n            id: this._id,\n            opId,\n            parentId,\n            parentKey,\n            data: {}\n        };\n        ops.push(op);\n        for (const [key, value] of this._map){\n            if (isLiveNode(value)) {\n                ops.push(...value._toOps(this._id, key, pool));\n            } else {\n                op.data[key] = value;\n            }\n        }\n        return ops;\n    }\n    /** @internal */ static _deserialize(param, parentToChildren, pool) {\n        let [id, item] = param;\n        const liveObj = new _LiveObject(item.data);\n        liveObj._attach(id, pool);\n        return this._deserializeChildren(liveObj, parentToChildren, pool);\n    }\n    /** @internal */ static _deserializeChildren(liveObj, parentToChildren, pool) {\n        const children = parentToChildren.get(nn(liveObj._id));\n        if (children === void 0) {\n            return liveObj;\n        }\n        for (const [id, crdt] of children){\n            const child = deserializeToLson([\n                id,\n                crdt\n            ], parentToChildren, pool);\n            if (isLiveStructure(child)) {\n                child._setParentLink(liveObj, crdt.parentKey);\n            }\n            liveObj._map.set(crdt.parentKey, child);\n            liveObj.invalidate();\n        }\n        return liveObj;\n    }\n    /** @internal */ _attach(id, pool) {\n        super._attach(id, pool);\n        for (const [_key, value] of this._map){\n            if (isLiveNode(value)) {\n                value._attach(pool.generateId(), pool);\n            }\n        }\n    }\n    /** @internal */ _attachChild(op, source) {\n        if (this._pool === void 0) {\n            throw new Error(\"Can't attach child if managed pool is not present\");\n        }\n        const { id, opId, parentKey: key } = op;\n        const child = creationOpToLson(op);\n        if (this._pool.getNode(id) !== void 0) {\n            if (this._propToLastUpdate.get(key) === opId) {\n                this._propToLastUpdate.delete(key);\n            }\n            return {\n                modified: false\n            };\n        }\n        if (source === 0 /* UNDOREDO_RECONNECT */ ) {\n            this._propToLastUpdate.set(key, nn(opId));\n        } else if (this._propToLastUpdate.get(key) === void 0) {} else if (this._propToLastUpdate.get(key) === opId) {\n            this._propToLastUpdate.delete(key);\n            return {\n                modified: false\n            };\n        } else {\n            return {\n                modified: false\n            };\n        }\n        const thisId = nn(this._id);\n        const previousValue = this._map.get(key);\n        let reverse;\n        if (isLiveNode(previousValue)) {\n            reverse = previousValue._toOps(thisId, key);\n            previousValue._detach();\n        } else if (previousValue === void 0) {\n            reverse = [\n                {\n                    type: 6 /* DELETE_OBJECT_KEY */ ,\n                    id: thisId,\n                    key\n                }\n            ];\n        } else {\n            reverse = [\n                {\n                    type: 3 /* UPDATE_OBJECT */ ,\n                    id: thisId,\n                    data: {\n                        [key]: previousValue\n                    }\n                }\n            ];\n        }\n        this._map.set(key, child);\n        this.invalidate();\n        if (isLiveStructure(child)) {\n            child._setParentLink(this, key);\n            child._attach(id, this._pool);\n        }\n        return {\n            reverse,\n            modified: {\n                node: this,\n                type: \"LiveObject\",\n                updates: {\n                    [key]: {\n                        type: \"update\"\n                    }\n                }\n            }\n        };\n    }\n    /** @internal */ _detachChild(child) {\n        if (child) {\n            const id = nn(this._id);\n            const parentKey = nn(child._parentKey);\n            const reverse = child._toOps(id, parentKey, this._pool);\n            for (const [key, value] of this._map){\n                if (value === child) {\n                    this._map.delete(key);\n                    this.invalidate();\n                }\n            }\n            child._detach();\n            const storageUpdate = {\n                node: this,\n                type: \"LiveObject\",\n                updates: {\n                    [parentKey]: {\n                        type: \"delete\"\n                    }\n                }\n            };\n            return {\n                modified: storageUpdate,\n                reverse\n            };\n        }\n        return {\n            modified: false\n        };\n    }\n    /**\n   * @internal\n   */ _detach() {\n        super._detach();\n        for (const value of this._map.values()){\n            if (isLiveNode(value)) {\n                value._detach();\n            }\n        }\n    }\n    /** @internal */ _apply(op, isLocal) {\n        if (op.type === 3 /* UPDATE_OBJECT */ ) {\n            return this._applyUpdate(op, isLocal);\n        } else if (op.type === 6 /* DELETE_OBJECT_KEY */ ) {\n            return this._applyDeleteObjectKey(op, isLocal);\n        }\n        return super._apply(op, isLocal);\n    }\n    /**\n   * @internal\n   */ _serialize() {\n        const data = {};\n        for (const [key, value] of this._map){\n            if (!isLiveNode(value)) {\n                data[key] = value;\n            }\n        }\n        if (this.parent.type === \"HasParent\" && this.parent.node._id) {\n            return {\n                type: 0 /* OBJECT */ ,\n                parentId: this.parent.node._id,\n                parentKey: this.parent.key,\n                data\n            };\n        } else {\n            return {\n                type: 0 /* OBJECT */ ,\n                data\n            };\n        }\n    }\n    /** @internal */ _applyUpdate(op, isLocal) {\n        let isModified = false;\n        const id = nn(this._id);\n        const reverse = [];\n        const reverseUpdate = {\n            type: 3 /* UPDATE_OBJECT */ ,\n            id,\n            data: {}\n        };\n        for(const key in op.data){\n            const oldValue = this._map.get(key);\n            if (isLiveNode(oldValue)) {\n                reverse.push(...oldValue._toOps(id, key));\n                oldValue._detach();\n            } else if (oldValue !== void 0) {\n                reverseUpdate.data[key] = oldValue;\n            } else if (oldValue === void 0) {\n                reverse.push({\n                    type: 6 /* DELETE_OBJECT_KEY */ ,\n                    id,\n                    key\n                });\n            }\n        }\n        const updateDelta = {};\n        for(const key in op.data){\n            const value = op.data[key];\n            if (value === void 0) {\n                continue;\n            }\n            if (isLocal) {\n                this._propToLastUpdate.set(key, nn(op.opId));\n            } else if (this._propToLastUpdate.get(key) === void 0) {\n                isModified = true;\n            } else if (this._propToLastUpdate.get(key) === op.opId) {\n                this._propToLastUpdate.delete(key);\n                continue;\n            } else {\n                continue;\n            }\n            const oldValue = this._map.get(key);\n            if (isLiveNode(oldValue)) {\n                oldValue._detach();\n            }\n            isModified = true;\n            updateDelta[key] = {\n                type: \"update\"\n            };\n            this._map.set(key, value);\n            this.invalidate();\n        }\n        if (Object.keys(reverseUpdate.data).length !== 0) {\n            reverse.unshift(reverseUpdate);\n        }\n        return isModified ? {\n            modified: {\n                node: this,\n                type: \"LiveObject\",\n                updates: updateDelta\n            },\n            reverse\n        } : {\n            modified: false\n        };\n    }\n    /** @internal */ _applyDeleteObjectKey(op, isLocal) {\n        const key = op.key;\n        if (this._map.has(key) === false) {\n            return {\n                modified: false\n            };\n        }\n        if (!isLocal && this._propToLastUpdate.get(key) !== void 0) {\n            return {\n                modified: false\n            };\n        }\n        const oldValue = this._map.get(key);\n        const id = nn(this._id);\n        let reverse = [];\n        if (isLiveNode(oldValue)) {\n            reverse = oldValue._toOps(id, op.key);\n            oldValue._detach();\n        } else if (oldValue !== void 0) {\n            reverse = [\n                {\n                    type: 3 /* UPDATE_OBJECT */ ,\n                    id,\n                    data: {\n                        [key]: oldValue\n                    }\n                }\n            ];\n        }\n        this._map.delete(key);\n        this.invalidate();\n        return {\n            modified: {\n                node: this,\n                type: \"LiveObject\",\n                updates: {\n                    [op.key]: {\n                        type: \"delete\"\n                    }\n                }\n            },\n            reverse\n        };\n    }\n    /**\n   * Transform the LiveObject into a javascript object\n   */ toObject() {\n        return Object.fromEntries(this._map);\n    }\n    /**\n   * Adds or updates a property with a specified key and a value.\n   * @param key The key of the property to add\n   * @param value The value of the property to add\n   */ set(key, value) {\n        var _this__pool;\n        (_this__pool = this._pool) === null || _this__pool === void 0 ? void 0 : _this__pool.assertStorageIsWritable();\n        this.update({\n            [key]: value\n        });\n    }\n    /**\n   * Returns a specified property from the LiveObject.\n   * @param key The key of the property to get\n   */ get(key) {\n        return this._map.get(key);\n    }\n    /**\n   * Deletes a key from the LiveObject\n   * @param key The key of the property to delete\n   */ delete(key) {\n        var _this__pool;\n        (_this__pool = this._pool) === null || _this__pool === void 0 ? void 0 : _this__pool.assertStorageIsWritable();\n        const keyAsString = key;\n        const oldValue = this._map.get(keyAsString);\n        if (oldValue === void 0) {\n            return;\n        }\n        if (this._pool === void 0 || this._id === void 0) {\n            if (isLiveNode(oldValue)) {\n                oldValue._detach();\n            }\n            this._map.delete(keyAsString);\n            this.invalidate();\n            return;\n        }\n        let reverse;\n        if (isLiveNode(oldValue)) {\n            oldValue._detach();\n            reverse = oldValue._toOps(this._id, keyAsString);\n        } else {\n            reverse = [\n                {\n                    type: 3 /* UPDATE_OBJECT */ ,\n                    data: {\n                        [keyAsString]: oldValue\n                    },\n                    id: this._id\n                }\n            ];\n        }\n        this._map.delete(keyAsString);\n        this.invalidate();\n        const storageUpdates = /* @__PURE__ */ new Map();\n        storageUpdates.set(this._id, {\n            node: this,\n            type: \"LiveObject\",\n            updates: {\n                [key]: {\n                    type: \"delete\"\n                }\n            }\n        });\n        this._pool.dispatch([\n            {\n                type: 6 /* DELETE_OBJECT_KEY */ ,\n                key: keyAsString,\n                id: this._id,\n                opId: this._pool.generateOpId()\n            }\n        ], reverse, storageUpdates);\n    }\n    /**\n   * Adds or updates multiple properties at once with an object.\n   * @param patch The object used to overrides properties\n   */ update(patch) {\n        var _this__pool;\n        (_this__pool = this._pool) === null || _this__pool === void 0 ? void 0 : _this__pool.assertStorageIsWritable();\n        if (this._pool === void 0 || this._id === void 0) {\n            for(const key in patch){\n                const newValue = patch[key];\n                if (newValue === void 0) {\n                    continue;\n                }\n                const oldValue = this._map.get(key);\n                if (isLiveNode(oldValue)) {\n                    oldValue._detach();\n                }\n                if (isLiveNode(newValue)) {\n                    newValue._setParentLink(this, key);\n                }\n                this._map.set(key, newValue);\n                this.invalidate();\n            }\n            return;\n        }\n        const ops = [];\n        const reverseOps = [];\n        const opId = this._pool.generateOpId();\n        const updatedProps = {};\n        const reverseUpdateOp = {\n            id: this._id,\n            type: 3 /* UPDATE_OBJECT */ ,\n            data: {}\n        };\n        const updateDelta = {};\n        for(const key in patch){\n            const newValue = patch[key];\n            if (newValue === void 0) {\n                continue;\n            }\n            const oldValue = this._map.get(key);\n            if (isLiveNode(oldValue)) {\n                reverseOps.push(...oldValue._toOps(this._id, key));\n                oldValue._detach();\n            } else if (oldValue === void 0) {\n                reverseOps.push({\n                    type: 6 /* DELETE_OBJECT_KEY */ ,\n                    id: this._id,\n                    key\n                });\n            } else {\n                reverseUpdateOp.data[key] = oldValue;\n            }\n            if (isLiveNode(newValue)) {\n                newValue._setParentLink(this, key);\n                newValue._attach(this._pool.generateId(), this._pool);\n                const newAttachChildOps = newValue._toOps(this._id, key, this._pool);\n                const createCrdtOp = newAttachChildOps.find((op)=>op.parentId === this._id);\n                if (createCrdtOp) {\n                    this._propToLastUpdate.set(key, nn(createCrdtOp.opId));\n                }\n                ops.push(...newAttachChildOps);\n            } else {\n                updatedProps[key] = newValue;\n                this._propToLastUpdate.set(key, opId);\n            }\n            this._map.set(key, newValue);\n            this.invalidate();\n            updateDelta[key] = {\n                type: \"update\"\n            };\n        }\n        if (Object.keys(reverseUpdateOp.data).length !== 0) {\n            reverseOps.unshift(reverseUpdateOp);\n        }\n        if (Object.keys(updatedProps).length !== 0) {\n            ops.unshift({\n                opId,\n                id: this._id,\n                type: 3 /* UPDATE_OBJECT */ ,\n                data: updatedProps\n            });\n        }\n        const storageUpdates = /* @__PURE__ */ new Map();\n        storageUpdates.set(this._id, {\n            node: this,\n            type: \"LiveObject\",\n            updates: updateDelta\n        });\n        this._pool.dispatch(ops, reverseOps, storageUpdates);\n    }\n    toImmutable() {\n        return super.toImmutable();\n    }\n    /** @internal */ toTreeNode(key) {\n        return super.toTreeNode(key);\n    }\n    /** @internal */ _toTreeNode(key) {\n        var _this__id;\n        const nodeId = (_this__id = this._id) !== null && _this__id !== void 0 ? _this__id : nanoid();\n        return {\n            type: \"LiveObject\",\n            id: nodeId,\n            key,\n            payload: Array.from(this._map.entries()).map((param)=>{\n                let [key2, value] = param;\n                return isLiveNode(value) ? value.toTreeNode(key2) : {\n                    type: \"Json\",\n                    id: \"\".concat(nodeId, \":\").concat(key2),\n                    key: key2,\n                    payload: value\n                };\n            })\n        };\n    }\n    /** @internal */ _toImmutable() {\n        const result = {};\n        for (const [key, val] of this._map){\n            result[key] = isLiveStructure(val) ? val.toImmutable() : val;\n        }\n        return  false ? 0 : Object.freeze(result);\n    }\n    clone() {\n        return new _LiveObject(Object.fromEntries(Array.from(this._map).map((param)=>{\n            let [key, value] = param;\n            return [\n                key,\n                isLiveStructure(value) ? value.clone() : deepClone(value)\n            ];\n        })));\n    }\n    constructor(obj = {}){\n        super();\n        this._propToLastUpdate = /* @__PURE__ */ new Map();\n        for(const key in obj){\n            const value = obj[key];\n            if (value === void 0) {\n                continue;\n            } else if (isLiveNode(value)) {\n                value._setParentLink(this, key);\n            }\n        }\n        this._map = new Map(Object.entries(obj));\n    }\n};\n// src/crdts/liveblocks-helpers.ts\nfunction creationOpToLiveNode(op) {\n    return lsonToLiveNode(creationOpToLson(op));\n}\nfunction creationOpToLson(op) {\n    switch(op.type){\n        case 8 /* CREATE_REGISTER */ :\n            return op.data;\n        case 4 /* CREATE_OBJECT */ :\n            return new LiveObject(op.data);\n        case 7 /* CREATE_MAP */ :\n            return new LiveMap();\n        case 2 /* CREATE_LIST */ :\n            return new LiveList();\n        default:\n            return assertNever(op, \"Unknown creation Op\");\n    }\n}\nfunction isSameNodeOrChildOf(node, parent) {\n    if (node === parent) {\n        return true;\n    }\n    if (node.parent.type === \"HasParent\") {\n        return isSameNodeOrChildOf(node.parent.node, parent);\n    }\n    return false;\n}\nfunction deserialize(param, parentToChildren, pool) {\n    let [id, crdt] = param;\n    switch(crdt.type){\n        case 0 /* OBJECT */ :\n            {\n                return LiveObject._deserialize([\n                    id,\n                    crdt\n                ], parentToChildren, pool);\n            }\n        case 1 /* LIST */ :\n            {\n                return LiveList._deserialize([\n                    id,\n                    crdt\n                ], parentToChildren, pool);\n            }\n        case 2 /* MAP */ :\n            {\n                return LiveMap._deserialize([\n                    id,\n                    crdt\n                ], parentToChildren, pool);\n            }\n        case 3 /* REGISTER */ :\n            {\n                return LiveRegister._deserialize([\n                    id,\n                    crdt\n                ], parentToChildren, pool);\n            }\n        default:\n            {\n                throw new Error(\"Unexpected CRDT type\");\n            }\n    }\n}\nfunction deserializeToLson(param, parentToChildren, pool) {\n    let [id, crdt] = param;\n    switch(crdt.type){\n        case 0 /* OBJECT */ :\n            {\n                return LiveObject._deserialize([\n                    id,\n                    crdt\n                ], parentToChildren, pool);\n            }\n        case 1 /* LIST */ :\n            {\n                return LiveList._deserialize([\n                    id,\n                    crdt\n                ], parentToChildren, pool);\n            }\n        case 2 /* MAP */ :\n            {\n                return LiveMap._deserialize([\n                    id,\n                    crdt\n                ], parentToChildren, pool);\n            }\n        case 3 /* REGISTER */ :\n            {\n                return crdt.data;\n            }\n        default:\n            {\n                throw new Error(\"Unexpected CRDT type\");\n            }\n    }\n}\nfunction isLiveStructure(value) {\n    return isLiveList(value) || isLiveMap(value) || isLiveObject(value);\n}\nfunction isLiveNode(value) {\n    return isLiveStructure(value) || isLiveRegister(value);\n}\nfunction isLiveList(value) {\n    return value instanceof LiveList;\n}\nfunction isLiveMap(value) {\n    return value instanceof LiveMap;\n}\nfunction isLiveObject(value) {\n    return value instanceof LiveObject;\n}\nfunction isLiveRegister(value) {\n    return value instanceof LiveRegister;\n}\nfunction cloneLson(value) {\n    return value === void 0 ? void 0 : isLiveStructure(value) ? value.clone() : deepClone(value);\n}\nfunction liveNodeToLson(obj) {\n    if (obj instanceof LiveRegister) {\n        return obj.data;\n    } else if (obj instanceof LiveList || obj instanceof LiveMap || obj instanceof LiveObject) {\n        return obj;\n    } else {\n        return assertNever(obj, \"Unknown AbstractCrdt\");\n    }\n}\nfunction lsonToLiveNode(value) {\n    if (value instanceof LiveObject || value instanceof LiveMap || value instanceof LiveList) {\n        return value;\n    } else {\n        return new LiveRegister(value);\n    }\n}\nfunction getTreesDiffOperations(currentItems, newItems) {\n    const ops = [];\n    currentItems.forEach((_, id)=>{\n        if (!newItems.get(id)) {\n            ops.push({\n                type: 5 /* DELETE_CRDT */ ,\n                id\n            });\n        }\n    });\n    newItems.forEach((crdt, id)=>{\n        const currentCrdt = currentItems.get(id);\n        if (currentCrdt) {\n            if (crdt.type === 0 /* OBJECT */ ) {\n                if (currentCrdt.type !== 0 /* OBJECT */  || JSON.stringify(crdt.data) !== JSON.stringify(currentCrdt.data)) {\n                    ops.push({\n                        type: 3 /* UPDATE_OBJECT */ ,\n                        id,\n                        data: crdt.data\n                    });\n                }\n            }\n            if (crdt.parentKey !== currentCrdt.parentKey) {\n                ops.push({\n                    type: 1 /* SET_PARENT_KEY */ ,\n                    id,\n                    parentKey: nn(crdt.parentKey, \"Parent key must not be missing\")\n                });\n            }\n        } else {\n            switch(crdt.type){\n                case 3 /* REGISTER */ :\n                    ops.push({\n                        type: 8 /* CREATE_REGISTER */ ,\n                        id,\n                        parentId: crdt.parentId,\n                        parentKey: crdt.parentKey,\n                        data: crdt.data\n                    });\n                    break;\n                case 1 /* LIST */ :\n                    ops.push({\n                        type: 2 /* CREATE_LIST */ ,\n                        id,\n                        parentId: crdt.parentId,\n                        parentKey: crdt.parentKey\n                    });\n                    break;\n                case 0 /* OBJECT */ :\n                    if (crdt.parentId === void 0 || crdt.parentKey === void 0) {\n                        throw new Error(\"Internal error. Cannot serialize storage root into an operation\");\n                    }\n                    ops.push({\n                        type: 4 /* CREATE_OBJECT */ ,\n                        id,\n                        parentId: crdt.parentId,\n                        parentKey: crdt.parentKey,\n                        data: crdt.data\n                    });\n                    break;\n                case 2 /* MAP */ :\n                    ops.push({\n                        type: 7 /* CREATE_MAP */ ,\n                        id,\n                        parentId: crdt.parentId,\n                        parentKey: crdt.parentKey\n                    });\n                    break;\n            }\n        }\n    });\n    return ops;\n}\nfunction mergeObjectStorageUpdates(first, second) {\n    const updates = first.updates;\n    for (const [key, value] of entries(second.updates)){\n        updates[key] = value;\n    }\n    return {\n        ...second,\n        updates\n    };\n}\nfunction mergeMapStorageUpdates(first, second) {\n    const updates = first.updates;\n    for (const [key, value] of entries(second.updates)){\n        updates[key] = value;\n    }\n    return {\n        ...second,\n        updates\n    };\n}\nfunction mergeListStorageUpdates(first, second) {\n    const updates = first.updates;\n    return {\n        ...second,\n        updates: updates.concat(second.updates)\n    };\n}\nfunction mergeStorageUpdates(first, second) {\n    if (first === void 0) {\n        return second;\n    }\n    if (first.type === \"LiveObject\" && second.type === \"LiveObject\") {\n        return mergeObjectStorageUpdates(first, second);\n    } else if (first.type === \"LiveMap\" && second.type === \"LiveMap\") {\n        return mergeMapStorageUpdates(first, second);\n    } else if (first.type === \"LiveList\" && second.type === \"LiveList\") {\n        return mergeListStorageUpdates(first, second);\n    } else {}\n    return second;\n}\nfunction isPlain(value) {\n    const type = typeof value;\n    return value === void 0 || value === null || type === \"string\" || type === \"boolean\" || type === \"number\" || Array.isArray(value) || isPlainObject(value);\n}\nfunction findNonSerializableValue(value) {\n    let path = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"\";\n    if (!isPlain) {\n        return {\n            path: path || \"root\",\n            value\n        };\n    }\n    if (typeof value !== \"object\" || value === null) {\n        return false;\n    }\n    for (const [key, nestedValue] of Object.entries(value)){\n        const nestedPath = path ? path + \".\" + key : key;\n        if (!isPlain(nestedValue)) {\n            return {\n                path: nestedPath,\n                value: nestedValue\n            };\n        }\n        if (typeof nestedValue === \"object\") {\n            const nonSerializableNestedValue = findNonSerializableValue(nestedValue, nestedPath);\n            if (nonSerializableNestedValue) {\n                return nonSerializableNestedValue;\n            }\n        }\n    }\n    return false;\n}\n// src/lib/debug.ts\nfunction captureStackTrace(msg, traceRoot) {\n    const errorLike = {\n        name: msg\n    };\n    if (typeof Error.captureStackTrace !== \"function\") {\n        return void 0;\n    }\n    Error.captureStackTrace(errorLike, traceRoot);\n    return errorLike.stack;\n}\n// src/lib/Json.ts\nfunction isJsonScalar(data) {\n    return data === null || typeof data === \"string\" || typeof data === \"number\" || typeof data === \"boolean\";\n}\nfunction isJsonArray(data) {\n    return Array.isArray(data);\n}\nfunction isJsonObject(data) {\n    return !isJsonScalar(data) && !isJsonArray(data);\n}\n// src/protocol/ClientMsg.ts\nvar ClientMsgCode = /* @__PURE__ */ ((ClientMsgCode2)=>{\n    ClientMsgCode2[ClientMsgCode2[\"UPDATE_PRESENCE\"] = 100] = \"UPDATE_PRESENCE\";\n    ClientMsgCode2[ClientMsgCode2[\"BROADCAST_EVENT\"] = 103] = \"BROADCAST_EVENT\";\n    ClientMsgCode2[ClientMsgCode2[\"FETCH_STORAGE\"] = 200] = \"FETCH_STORAGE\";\n    ClientMsgCode2[ClientMsgCode2[\"UPDATE_STORAGE\"] = 201] = \"UPDATE_STORAGE\";\n    ClientMsgCode2[ClientMsgCode2[\"FETCH_YDOC\"] = 300] = \"FETCH_YDOC\";\n    ClientMsgCode2[ClientMsgCode2[\"UPDATE_YDOC\"] = 301] = \"UPDATE_YDOC\";\n    return ClientMsgCode2;\n})(ClientMsgCode || {});\n// src/refs/ImmutableRef.ts\nfunction merge(target, patch) {\n    let updated = false;\n    const newValue = {\n        ...target\n    };\n    Object.keys(patch).forEach((k)=>{\n        const key = k;\n        const val = patch[key];\n        if (newValue[key] !== val) {\n            if (val === void 0) {\n                delete newValue[key];\n            } else {\n                newValue[key] = val;\n            }\n            updated = true;\n        }\n    });\n    return updated ? newValue : target;\n}\nvar ImmutableRef = class {\n    get didInvalidate() {\n        return this._ev.observable;\n    }\n    invalidate() {\n        if (this._cache !== void 0) {\n            this._cache = void 0;\n            this._ev.notify();\n        }\n    }\n    get current() {\n        var _this__cache;\n        return (_this__cache = this._cache) !== null && _this__cache !== void 0 ? _this__cache : this._cache = this._toImmutable();\n    }\n    constructor(){\n        this._ev = makeEventSource();\n    }\n};\n// src/refs/OthersRef.ts\nfunction makeUser(conn, presence) {\n    const { connectionId, id, info } = conn;\n    const canWrite = canWriteStorage(conn.scopes);\n    return freeze(compactObject({\n        connectionId,\n        id,\n        info,\n        canWrite,\n        canComment: canComment(conn.scopes),\n        isReadOnly: !canWrite,\n        // Deprecated, kept for backward-compatibility\n        presence\n    }));\n}\nvar OthersRef = class extends ImmutableRef {\n    connectionIds() {\n        return this._connections.keys();\n    }\n    /** @internal */ _toImmutable() {\n        const users = compact(Array.from(this._presences.keys()).map((connectionId)=>this.getUser(Number(connectionId))));\n        return users;\n    }\n    clearOthers() {\n        this._connections = /* @__PURE__ */ new Map();\n        this._presences = /* @__PURE__ */ new Map();\n        this._users = /* @__PURE__ */ new Map();\n        this.invalidate();\n    }\n    /** @internal */ _getUser(connectionId) {\n        const conn = this._connections.get(connectionId);\n        const presence = this._presences.get(connectionId);\n        if (conn !== void 0 && presence !== void 0) {\n            return makeUser(conn, presence);\n        }\n        return void 0;\n    }\n    getUser(connectionId) {\n        const cachedUser = this._users.get(connectionId);\n        if (cachedUser) {\n            return cachedUser;\n        }\n        const computedUser = this._getUser(connectionId);\n        if (computedUser) {\n            this._users.set(connectionId, computedUser);\n            return computedUser;\n        }\n        return void 0;\n    }\n    /** @internal */ _invalidateUser(connectionId) {\n        if (this._users.has(connectionId)) {\n            this._users.delete(connectionId);\n        }\n        this.invalidate();\n    }\n    /**\n   * Records a known connection. This records the connection ID and the\n   * associated metadata.\n   */ setConnection(connectionId, metaUserId, metaUserInfo, scopes) {\n        this._connections.set(connectionId, freeze({\n            connectionId,\n            id: metaUserId,\n            info: metaUserInfo,\n            scopes\n        }));\n        if (this._presences.has(connectionId)) {\n            this._invalidateUser(connectionId);\n        }\n    }\n    /**\n   * Removes a known connectionId. Removes both the connection's metadata and\n   * the presence information.\n   */ removeConnection(connectionId) {\n        this._connections.delete(connectionId);\n        this._presences.delete(connectionId);\n        this._invalidateUser(connectionId);\n    }\n    /**\n   * Stores a new user from a full presence update. If the user already exists,\n   * its known presence data is overwritten.\n   */ setOther(connectionId, presence) {\n        this._presences.set(connectionId, freeze(compactObject(presence)));\n        if (this._connections.has(connectionId)) {\n            this._invalidateUser(connectionId);\n        }\n    }\n    /**\n   * Patches the presence data for an existing \"other\". If we don't know the\n   * initial presence data for this user yet, discard this patch and await the\n   * full .setOther() call first.\n   */ patchOther(connectionId, patch) {\n        const oldPresence = this._presences.get(connectionId);\n        if (oldPresence === void 0) {\n            return;\n        }\n        const newPresence = merge(oldPresence, patch);\n        if (oldPresence !== newPresence) {\n            this._presences.set(connectionId, freeze(newPresence));\n            this._invalidateUser(connectionId);\n        }\n    }\n    //\n    // --------------------------------------------------------------\n    //\n    constructor(){\n        super();\n        this._connections = /* @__PURE__ */ new Map();\n        this._presences = /* @__PURE__ */ new Map();\n        this._users = /* @__PURE__ */ new Map();\n    }\n};\n// src/refs/PatchableRef.ts\nvar PatchableRef = class extends ImmutableRef {\n    /** @internal */ _toImmutable() {\n        return this._data;\n    }\n    /**\n   * Patches the current object.\n   */ patch(patch) {\n        const oldData = this._data;\n        const newData = merge(oldData, patch);\n        if (oldData !== newData) {\n            this._data = freeze(newData);\n            this.invalidate();\n        }\n    }\n    constructor(data){\n        super();\n        this._data = freeze(compactObject(data));\n    }\n};\n// src/refs/ValueRef.ts\nvar ValueRef = class extends ImmutableRef {\n    /** @internal */ _toImmutable() {\n        return this._value;\n    }\n    set(newValue) {\n        this._value = freeze(newValue);\n        this.invalidate();\n    }\n    constructor(initialValue){\n        super();\n        this._value = freeze(initialValue);\n    }\n};\nvar DerivedRef = class extends ImmutableRef {\n    /** @internal */ _toImmutable() {\n        return this._transform(...this._refs.map((ref)=>ref.current));\n    }\n    constructor(...args){\n        super();\n        const transformFn = args.pop();\n        const otherRefs = args;\n        this._refs = otherRefs;\n        this._refs.forEach((ref)=>{\n            ref.didInvalidate.subscribe(()=>this.invalidate());\n        });\n        this._transform = transformFn;\n    }\n};\n// src/room.ts\nvar MAX_SOCKET_MESSAGE_SIZE = 1024 * 1024 - 1024;\nfunction makeIdFactory(connectionId) {\n    let count = 0;\n    return ()=>\"\".concat(connectionId, \":\").concat(count++);\n}\nfunction userToTreeNode(key, user) {\n    return {\n        type: \"User\",\n        id: \"\".concat(user.connectionId),\n        key,\n        payload: user\n    };\n}\nfunction installBackgroundTabSpy() {\n    const doc = typeof document !== \"undefined\" ? document : void 0;\n    const inBackgroundSince = {\n        current: null\n    };\n    function onVisibilityChange() {\n        if ((doc === null || doc === void 0 ? void 0 : doc.visibilityState) === \"hidden\") {\n            var _inBackgroundSince_current;\n            inBackgroundSince.current = (_inBackgroundSince_current = inBackgroundSince.current) !== null && _inBackgroundSince_current !== void 0 ? _inBackgroundSince_current : Date.now();\n        } else {\n            inBackgroundSince.current = null;\n        }\n    }\n    doc === null || doc === void 0 ? void 0 : doc.addEventListener(\"visibilitychange\", onVisibilityChange);\n    const unsub = ()=>{\n        doc === null || doc === void 0 ? void 0 : doc.removeEventListener(\"visibilitychange\", onVisibilityChange);\n    };\n    return [\n        inBackgroundSince,\n        unsub\n    ];\n}\nfunction createRoom(options, config) {\n    const initialPresence = typeof options.initialPresence === \"function\" ? options.initialPresence(config.roomId) : options.initialPresence;\n    const initialStorage = typeof options.initialStorage === \"function\" ? options.initialStorage(config.roomId) : options.initialStorage;\n    const [inBackgroundSince, uninstallBgTabSpy] = installBackgroundTabSpy();\n    const delegates = {\n        ...config.delegates,\n        // A connection is allowed to go into \"zombie state\" only if all of the\n        // following conditions apply:\n        //\n        // - The `backgroundKeepAliveTimeout` client option is configured\n        // - The browser window has been in the background for at least\n        //   `backgroundKeepAliveTimeout` milliseconds\n        // - There are no pending changes\n        //\n        canZombie () {\n            return config.backgroundKeepAliveTimeout !== void 0 && inBackgroundSince.current !== null && Date.now() > inBackgroundSince.current + config.backgroundKeepAliveTimeout && getStorageStatus() !== \"synchronizing\";\n        }\n    };\n    const managedSocket = new ManagedSocket(delegates, config.enableDebugLogging);\n    const context = {\n        buffer: {\n            flushTimerID: void 0,\n            lastFlushedAt: 0,\n            presenceUpdates: // Queue up the initial presence message as a Full Presence™ update\n            {\n                type: \"full\",\n                data: initialPresence\n            },\n            messages: [],\n            storageOperations: []\n        },\n        staticSessionInfo: new ValueRef(null),\n        dynamicSessionInfo: new ValueRef(null),\n        myPresence: new PatchableRef(initialPresence),\n        others: new OthersRef(),\n        initialStorage,\n        idFactory: null,\n        // Storage\n        clock: 0,\n        opClock: 0,\n        nodes: /* @__PURE__ */ new Map(),\n        root: void 0,\n        undoStack: [],\n        redoStack: [],\n        pausedHistory: null,\n        activeBatch: null,\n        unacknowledgedOps: /* @__PURE__ */ new Map(),\n        // Debug\n        opStackTraces:  true ? /* @__PURE__ */ new Map() : 0\n    };\n    const doNotBatchUpdates = (cb)=>cb();\n    var _config_unstable_batchedUpdates;\n    const batchUpdates = (_config_unstable_batchedUpdates = config.unstable_batchedUpdates) !== null && _config_unstable_batchedUpdates !== void 0 ? _config_unstable_batchedUpdates : doNotBatchUpdates;\n    let lastTokenKey;\n    function onStatusDidChange(newStatus) {\n        const authValue = managedSocket.authValue;\n        if (authValue !== null) {\n            const tokenKey = authValue.type === \"secret\" ? authValue.token.raw : authValue.publicApiKey;\n            if (tokenKey !== lastTokenKey) {\n                lastTokenKey = tokenKey;\n                if (authValue.type === \"secret\") {\n                    const token = authValue.token.parsed;\n                    context.staticSessionInfo.set({\n                        userId: token.k === \"sec-legacy\" /* SECRET_LEGACY */  ? token.id : token.uid,\n                        userInfo: token.k === \"sec-legacy\" /* SECRET_LEGACY */  ? token.info : token.ui\n                    });\n                } else {\n                    context.staticSessionInfo.set({\n                        userId: void 0,\n                        userInfo: void 0\n                    });\n                }\n            }\n        }\n        batchUpdates(()=>{\n            eventHub.status.notify(newStatus);\n            notifySelfChanged(doNotBatchUpdates);\n        });\n    }\n    let _connectionLossTimerId;\n    let _hasLostConnection = false;\n    function handleConnectionLossEvent(newStatus) {\n        if (newStatus === \"reconnecting\") {\n            _connectionLossTimerId = setTimeout(()=>{\n                batchUpdates(()=>{\n                    eventHub.lostConnection.notify(\"lost\");\n                    _hasLostConnection = true;\n                    context.others.clearOthers();\n                    notify({\n                        others: [\n                            {\n                                type: \"reset\"\n                            }\n                        ]\n                    }, doNotBatchUpdates);\n                });\n            }, config.lostConnectionTimeout);\n        } else {\n            clearTimeout(_connectionLossTimerId);\n            if (_hasLostConnection) {\n                if (newStatus === \"disconnected\") {\n                    batchUpdates(()=>{\n                        eventHub.lostConnection.notify(\"failed\");\n                    });\n                } else {\n                    batchUpdates(()=>{\n                        eventHub.lostConnection.notify(\"restored\");\n                    });\n                }\n                _hasLostConnection = false;\n            }\n        }\n    }\n    function onDidConnect() {\n        context.buffer.presenceUpdates = {\n            type: \"full\",\n            data: // Because context.me.current is a readonly object, we'll have to\n            // make a copy here. Otherwise, type errors happen later when\n            // \"patching\" my presence.\n            {\n                ...context.myPresence.current\n            }\n        };\n        if (_getStorage$ !== null) {\n            refreshStorage({\n                flush: false\n            });\n        }\n        flushNowOrSoon();\n    }\n    function onDidDisconnect() {\n        clearTimeout(context.buffer.flushTimerID);\n    }\n    managedSocket.events.onMessage.subscribe(handleServerMessage);\n    managedSocket.events.statusDidChange.subscribe(onStatusDidChange);\n    managedSocket.events.statusDidChange.subscribe(handleConnectionLossEvent);\n    managedSocket.events.didConnect.subscribe(onDidConnect);\n    managedSocket.events.didDisconnect.subscribe(onDidDisconnect);\n    managedSocket.events.onLiveblocksError.subscribe((err)=>{\n        batchUpdates(()=>{\n            if (true) {\n                error2(\"Connection to websocket server closed. Reason: \".concat(err.message, \" (code: \").concat(err.code, \").\"));\n            }\n            eventHub.error.notify(err);\n        });\n    });\n    const pool = {\n        roomId: config.roomId,\n        getNode: (id)=>context.nodes.get(id),\n        addNode: (id, node)=>void context.nodes.set(id, node),\n        deleteNode: (id)=>void context.nodes.delete(id),\n        generateId: ()=>\"\".concat(getConnectionId(), \":\").concat(context.clock++),\n        generateOpId: ()=>\"\".concat(getConnectionId(), \":\").concat(context.opClock++),\n        dispatch (ops, reverse, storageUpdates) {\n            const activeBatch = context.activeBatch;\n            if (true) {\n                const stackTrace = captureStackTrace(\"Storage mutation\", this.dispatch);\n                if (stackTrace) {\n                    for (const op of ops){\n                        if (op.opId) {\n                            nn(context.opStackTraces).set(op.opId, stackTrace);\n                        }\n                    }\n                }\n            }\n            if (activeBatch) {\n                activeBatch.ops.push(...ops);\n                for (const [key, value] of storageUpdates){\n                    activeBatch.updates.storageUpdates.set(key, mergeStorageUpdates(activeBatch.updates.storageUpdates.get(key), value));\n                }\n                activeBatch.reverseOps.unshift(...reverse);\n            } else {\n                batchUpdates(()=>{\n                    addToUndoStack(reverse, doNotBatchUpdates);\n                    context.redoStack.length = 0;\n                    dispatchOps(ops);\n                    notify({\n                        storageUpdates\n                    }, doNotBatchUpdates);\n                });\n            }\n        },\n        assertStorageIsWritable: ()=>{\n            var _context_dynamicSessionInfo_current;\n            const scopes = (_context_dynamicSessionInfo_current = context.dynamicSessionInfo.current) === null || _context_dynamicSessionInfo_current === void 0 ? void 0 : _context_dynamicSessionInfo_current.scopes;\n            if (scopes === void 0) {\n                return;\n            }\n            const canWrite = canWriteStorage(scopes);\n            if (!canWrite) {\n                throw new Error(\"Cannot write to storage with a read only user, please ensure the user has write permissions\");\n            }\n        }\n    };\n    const eventHub = {\n        connection: makeEventSource(),\n        // Old/deprecated API\n        status: makeEventSource(),\n        // New/recommended API\n        lostConnection: makeEventSource(),\n        customEvent: makeEventSource(),\n        self: makeEventSource(),\n        myPresence: makeEventSource(),\n        others: makeEventSource(),\n        error: makeEventSource(),\n        storage: makeEventSource(),\n        history: makeEventSource(),\n        storageDidLoad: makeEventSource(),\n        storageStatus: makeEventSource(),\n        ydoc: makeEventSource(),\n        comments: makeEventSource()\n    };\n    async function streamFetch(authTokenOrPublicApiKey, roomId) {\n        var _config_polyfills;\n        const url = new URL(\"/v2/c/rooms/\".concat(encodeURIComponent(roomId), \"/storage\"), config.baseUrl).toString();\n        const fetcher = ((_config_polyfills = config.polyfills) === null || _config_polyfills === void 0 ? void 0 : _config_polyfills.fetch) || /* istanbul ignore next */ fetch;\n        return fetcher(url.toString(), {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: \"Bearer \".concat(authTokenOrPublicApiKey)\n            }\n        });\n    }\n    async function httpPostToRoom(endpoint, body) {\n        var _config_polyfills;\n        if (!managedSocket.authValue) {\n            throw new Error(\"Not authorized\");\n        }\n        const authTokenOrPublicApiKey = managedSocket.authValue.type === \"public\" ? managedSocket.authValue.publicApiKey : managedSocket.authValue.token.raw;\n        const url = new URL(\"/v2/c/rooms/\".concat(encodeURIComponent(config.roomId)).concat(endpoint), config.baseUrl).toString();\n        const fetcher = ((_config_polyfills = config.polyfills) === null || _config_polyfills === void 0 ? void 0 : _config_polyfills.fetch) || /* istanbul ignore next */ fetch;\n        return fetcher(url, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: \"Bearer \".concat(authTokenOrPublicApiKey)\n            },\n            body: JSON.stringify(body)\n        });\n    }\n    function sendMessages(messages) {\n        var _context_dynamicSessionInfo_current;\n        const serializedPayload = JSON.stringify(messages);\n        const nonce = (_context_dynamicSessionInfo_current = context.dynamicSessionInfo.current) === null || _context_dynamicSessionInfo_current === void 0 ? void 0 : _context_dynamicSessionInfo_current.nonce;\n        if (config.unstable_fallbackToHTTP && nonce) {\n            const size = new TextEncoder().encode(serializedPayload).length;\n            if (size > MAX_SOCKET_MESSAGE_SIZE) {\n                void httpPostToRoom(\"/send-message\", {\n                    nonce,\n                    messages\n                }).then((resp)=>{\n                    if (!resp.ok && resp.status === 403) {\n                        managedSocket.reconnect();\n                    }\n                });\n                warn(\"Message was too large for websockets and sent over HTTP instead\");\n                return;\n            }\n        }\n        managedSocket.send(serializedPayload);\n    }\n    const self = new DerivedRef(context.staticSessionInfo, context.dynamicSessionInfo, context.myPresence, (staticSession, dynamicSession, myPresence)=>{\n        if (staticSession === null || dynamicSession === null) {\n            return null;\n        } else {\n            const canWrite = canWriteStorage(dynamicSession.scopes);\n            return {\n                connectionId: dynamicSession.actor,\n                id: staticSession.userId,\n                info: staticSession.userInfo,\n                presence: myPresence,\n                canWrite,\n                canComment: canComment(dynamicSession.scopes),\n                isReadOnly: !canWrite\n            };\n        }\n    });\n    let _lastSelf;\n    function notifySelfChanged(batchedUpdatesWrapper) {\n        const currSelf = self.current;\n        if (currSelf !== null && currSelf !== _lastSelf) {\n            batchedUpdatesWrapper(()=>{\n                eventHub.self.notify(currSelf);\n            });\n            _lastSelf = currSelf;\n        }\n    }\n    const selfAsTreeNode = new DerivedRef(self, (me)=>me !== null ? userToTreeNode(\"Me\", me) : null);\n    function createOrUpdateRootFromMessage(message, batchedUpdatesWrapper) {\n        if (message.items.length === 0) {\n            throw new Error(\"Internal error: cannot load storage without items\");\n        }\n        if (context.root !== void 0) {\n            updateRoot(message.items, batchedUpdatesWrapper);\n        } else {\n            context.root = LiveObject._fromItems(message.items, pool);\n        }\n        const stackSizeBefore = context.undoStack.length;\n        for(const key in context.initialStorage){\n            if (context.root.get(key) === void 0) {\n                context.root.set(key, cloneLson(context.initialStorage[key]));\n            }\n        }\n        context.undoStack.length = stackSizeBefore;\n    }\n    function updateRoot(items, batchedUpdatesWrapper) {\n        if (context.root === void 0) {\n            return;\n        }\n        const currentItems = /* @__PURE__ */ new Map();\n        for (const [id, node] of context.nodes){\n            currentItems.set(id, node._serialize());\n        }\n        const ops = getTreesDiffOperations(currentItems, new Map(items));\n        const result = applyOps(ops, false);\n        notify(result.updates, batchedUpdatesWrapper);\n    }\n    function _addToRealUndoStack(historyOps, batchedUpdatesWrapper) {\n        if (context.undoStack.length >= 50) {\n            context.undoStack.shift();\n        }\n        context.undoStack.push(historyOps);\n        onHistoryChange(batchedUpdatesWrapper);\n    }\n    function addToUndoStack(historyOps, batchedUpdatesWrapper) {\n        if (context.pausedHistory !== null) {\n            context.pausedHistory.unshift(...historyOps);\n        } else {\n            _addToRealUndoStack(historyOps, batchedUpdatesWrapper);\n        }\n    }\n    function notify(updates, batchedUpdatesWrapper) {\n        const storageUpdates = updates.storageUpdates;\n        const othersUpdates = updates.others;\n        batchedUpdatesWrapper(()=>{\n            if (othersUpdates !== void 0 && othersUpdates.length > 0) {\n                const others = context.others.current;\n                for (const event of othersUpdates){\n                    eventHub.others.notify({\n                        ...event,\n                        others\n                    });\n                }\n            }\n            var _updates_presence;\n            if ((_updates_presence = updates.presence) !== null && _updates_presence !== void 0 ? _updates_presence : false) {\n                notifySelfChanged(doNotBatchUpdates);\n                eventHub.myPresence.notify(context.myPresence.current);\n            }\n            if (storageUpdates !== void 0 && storageUpdates.size > 0) {\n                const updates2 = Array.from(storageUpdates.values());\n                eventHub.storage.notify(updates2);\n            }\n            notifyStorageStatus();\n        });\n    }\n    function getConnectionId() {\n        const info = context.dynamicSessionInfo.current;\n        if (info) {\n            return info.actor;\n        }\n        throw new Error(\"Internal. Tried to get connection id but connection was never open\");\n    }\n    function applyOps(rawOps, isLocal) {\n        const output = {\n            reverse: [],\n            storageUpdates: /* @__PURE__ */ new Map(),\n            presence: false\n        };\n        const createdNodeIds = /* @__PURE__ */ new Set();\n        const ops = rawOps.map((op)=>{\n            if (op.type !== \"presence\" && !op.opId) {\n                return {\n                    ...op,\n                    opId: pool.generateOpId()\n                };\n            } else {\n                return op;\n            }\n        });\n        for (const op of ops){\n            if (op.type === \"presence\") {\n                const reverse = {\n                    type: \"presence\",\n                    data: {}\n                };\n                for(const key in op.data){\n                    reverse.data[key] = context.myPresence.current[key];\n                }\n                context.myPresence.patch(op.data);\n                if (context.buffer.presenceUpdates === null) {\n                    context.buffer.presenceUpdates = {\n                        type: \"partial\",\n                        data: op.data\n                    };\n                } else {\n                    for(const key in op.data){\n                        context.buffer.presenceUpdates.data[key] = op.data[key];\n                    }\n                }\n                output.reverse.unshift(reverse);\n                output.presence = true;\n            } else {\n                let source;\n                if (isLocal) {\n                    source = 0 /* UNDOREDO_RECONNECT */ ;\n                } else {\n                    const opId = nn(op.opId);\n                    if (true) {\n                        nn(context.opStackTraces).delete(opId);\n                    }\n                    const deleted = context.unacknowledgedOps.delete(opId);\n                    source = deleted ? 2 /* ACK */  : 1 /* REMOTE */ ;\n                }\n                const applyOpResult = applyOp(op, source);\n                if (applyOpResult.modified) {\n                    const nodeId = applyOpResult.modified.node._id;\n                    if (!(nodeId && createdNodeIds.has(nodeId))) {\n                        output.storageUpdates.set(nn(applyOpResult.modified.node._id), mergeStorageUpdates(output.storageUpdates.get(nn(applyOpResult.modified.node._id)), applyOpResult.modified));\n                        output.reverse.unshift(...applyOpResult.reverse);\n                    }\n                    if (op.type === 2 /* CREATE_LIST */  || op.type === 7 /* CREATE_MAP */  || op.type === 4 /* CREATE_OBJECT */ ) {\n                        createdNodeIds.add(nn(op.id));\n                    }\n                }\n            }\n        }\n        return {\n            ops,\n            reverse: output.reverse,\n            updates: {\n                storageUpdates: output.storageUpdates,\n                presence: output.presence\n            }\n        };\n    }\n    function applyOp(op, source) {\n        if (isAckOp(op)) {\n            return {\n                modified: false\n            };\n        }\n        switch(op.type){\n            case 6 /* DELETE_OBJECT_KEY */ :\n            case 3 /* UPDATE_OBJECT */ :\n            case 5 /* DELETE_CRDT */ :\n                {\n                    const node = context.nodes.get(op.id);\n                    if (node === void 0) {\n                        return {\n                            modified: false\n                        };\n                    }\n                    return node._apply(op, source === 0 /* UNDOREDO_RECONNECT */ );\n                }\n            case 1 /* SET_PARENT_KEY */ :\n                {\n                    const node = context.nodes.get(op.id);\n                    if (node === void 0) {\n                        return {\n                            modified: false\n                        };\n                    }\n                    if (node.parent.type === \"HasParent\" && isLiveList(node.parent.node)) {\n                        return node.parent.node._setChildKey(asPos(op.parentKey), node, source);\n                    }\n                    return {\n                        modified: false\n                    };\n                }\n            case 4 /* CREATE_OBJECT */ :\n            case 2 /* CREATE_LIST */ :\n            case 7 /* CREATE_MAP */ :\n            case 8 /* CREATE_REGISTER */ :\n                {\n                    if (op.parentId === void 0) {\n                        return {\n                            modified: false\n                        };\n                    }\n                    const parentNode = context.nodes.get(op.parentId);\n                    if (parentNode === void 0) {\n                        return {\n                            modified: false\n                        };\n                    }\n                    return parentNode._attachChild(op, source);\n                }\n        }\n    }\n    function updatePresence(patch, options2) {\n        const oldValues = {};\n        if (context.buffer.presenceUpdates === null) {\n            context.buffer.presenceUpdates = {\n                type: \"partial\",\n                data: {}\n            };\n        }\n        for(const key in patch){\n            const overrideValue = patch[key];\n            if (overrideValue === void 0) {\n                continue;\n            }\n            context.buffer.presenceUpdates.data[key] = overrideValue;\n            oldValues[key] = context.myPresence.current[key];\n        }\n        context.myPresence.patch(patch);\n        if (context.activeBatch) {\n            if (options2 === null || options2 === void 0 ? void 0 : options2.addToHistory) {\n                context.activeBatch.reverseOps.unshift({\n                    type: \"presence\",\n                    data: oldValues\n                });\n            }\n            context.activeBatch.updates.presence = true;\n        } else {\n            flushNowOrSoon();\n            batchUpdates(()=>{\n                if (options2 === null || options2 === void 0 ? void 0 : options2.addToHistory) {\n                    addToUndoStack([\n                        {\n                            type: \"presence\",\n                            data: oldValues\n                        }\n                    ], doNotBatchUpdates);\n                }\n                notify({\n                    presence: true\n                }, doNotBatchUpdates);\n            });\n        }\n    }\n    function onUpdatePresenceMessage(message) {\n        if (message.targetActor !== void 0) {\n            const oldUser = context.others.getUser(message.actor);\n            context.others.setOther(message.actor, message.data);\n            const newUser = context.others.getUser(message.actor);\n            if (oldUser === void 0 && newUser !== void 0) {\n                return {\n                    type: \"enter\",\n                    user: newUser\n                };\n            }\n        } else {\n            context.others.patchOther(message.actor, message.data), message;\n        }\n        const user = context.others.getUser(message.actor);\n        if (user) {\n            return {\n                type: \"update\",\n                updates: message.data,\n                user\n            };\n        } else {\n            return void 0;\n        }\n    }\n    function onUserLeftMessage(message) {\n        const user = context.others.getUser(message.actor);\n        if (user) {\n            context.others.removeConnection(message.actor);\n            return {\n                type: \"leave\",\n                user\n            };\n        }\n        return null;\n    }\n    function onRoomStateMessage(message, batchedUpdatesWrapper) {\n        context.dynamicSessionInfo.set({\n            actor: message.actor,\n            nonce: message.nonce,\n            scopes: message.scopes\n        });\n        context.idFactory = makeIdFactory(message.actor);\n        notifySelfChanged(batchedUpdatesWrapper);\n        for (const connectionId of context.others.connectionIds()){\n            const user = message.users[connectionId];\n            if (user === void 0) {\n                context.others.removeConnection(connectionId);\n            }\n        }\n        for(const key in message.users){\n            const user = message.users[key];\n            const connectionId = Number(key);\n            context.others.setConnection(connectionId, user.id, user.info, user.scopes);\n        }\n        return {\n            type: \"reset\"\n        };\n    }\n    function canUndo() {\n        return context.undoStack.length > 0;\n    }\n    function canRedo() {\n        return context.redoStack.length > 0;\n    }\n    function onHistoryChange(batchedUpdatesWrapper) {\n        batchedUpdatesWrapper(()=>{\n            eventHub.history.notify({\n                canUndo: canUndo(),\n                canRedo: canRedo()\n            });\n        });\n    }\n    function onUserJoinedMessage(message) {\n        context.others.setConnection(message.actor, message.id, message.info, message.scopes);\n        context.buffer.messages.push({\n            type: 100 /* UPDATE_PRESENCE */ ,\n            data: context.myPresence.current,\n            targetActor: message.actor\n        });\n        flushNowOrSoon();\n        const user = context.others.getUser(message.actor);\n        return user ? {\n            type: \"enter\",\n            user\n        } : void 0;\n    }\n    function parseServerMessage(data) {\n        if (!isJsonObject(data)) {\n            return null;\n        }\n        return data;\n    }\n    function parseServerMessages(text) {\n        const data = tryParseJson(text);\n        if (data === void 0) {\n            return null;\n        } else if (isJsonArray(data)) {\n            return compact(data.map((item)=>parseServerMessage(item)));\n        } else {\n            return compact([\n                parseServerMessage(data)\n            ]);\n        }\n    }\n    function applyAndSendOps(offlineOps, batchedUpdatesWrapper) {\n        if (offlineOps.size === 0) {\n            return;\n        }\n        const messages = [];\n        const ops = Array.from(offlineOps.values());\n        const result = applyOps(ops, true);\n        messages.push({\n            type: 201 /* UPDATE_STORAGE */ ,\n            ops: result.ops\n        });\n        notify(result.updates, batchedUpdatesWrapper);\n        sendMessages(messages);\n    }\n    function handleServerMessage(event) {\n        if (typeof event.data !== \"string\") {\n            return;\n        }\n        const messages = parseServerMessages(event.data);\n        if (messages === null || messages.length === 0) {\n            return;\n        }\n        const updates = {\n            storageUpdates: /* @__PURE__ */ new Map(),\n            others: []\n        };\n        batchUpdates(()=>{\n            for (const message of messages){\n                switch(message.type){\n                    case 101 /* USER_JOINED */ :\n                        {\n                            const userJoinedUpdate = onUserJoinedMessage(message);\n                            if (userJoinedUpdate) {\n                                updates.others.push(userJoinedUpdate);\n                            }\n                            break;\n                        }\n                    case 100 /* UPDATE_PRESENCE */ :\n                        {\n                            const othersPresenceUpdate = onUpdatePresenceMessage(message);\n                            if (othersPresenceUpdate) {\n                                updates.others.push(othersPresenceUpdate);\n                            }\n                            break;\n                        }\n                    case 103 /* BROADCASTED_EVENT */ :\n                        {\n                            const others = context.others.current;\n                            var _others_find;\n                            eventHub.customEvent.notify({\n                                connectionId: message.actor,\n                                user: message.actor < 0 ? null : (_others_find = others.find((u)=>u.connectionId === message.actor)) !== null && _others_find !== void 0 ? _others_find : null,\n                                event: message.event\n                            });\n                            break;\n                        }\n                    case 102 /* USER_LEFT */ :\n                        {\n                            const event2 = onUserLeftMessage(message);\n                            if (event2) {\n                                updates.others.push(event2);\n                            }\n                            break;\n                        }\n                    case 300 /* UPDATE_YDOC */ :\n                        {\n                            eventHub.ydoc.notify(message);\n                            break;\n                        }\n                    case 104 /* ROOM_STATE */ :\n                        {\n                            updates.others.push(onRoomStateMessage(message, doNotBatchUpdates));\n                            break;\n                        }\n                    case 200 /* INITIAL_STORAGE_STATE */ :\n                        {\n                            processInitialStorage(message);\n                            break;\n                        }\n                    case 201 /* UPDATE_STORAGE */ :\n                        {\n                            const applyResult = applyOps(message.ops, false);\n                            for (const [key, value] of applyResult.updates.storageUpdates){\n                                updates.storageUpdates.set(key, mergeStorageUpdates(updates.storageUpdates.get(key), value));\n                            }\n                            break;\n                        }\n                    case 299 /* REJECT_STORAGE_OP */ :\n                        {\n                            errorWithTitle(\"Storage mutation rejection error\", message.reason);\n                            if (true) {\n                                const traces = /* @__PURE__ */ new Set();\n                                for (const opId of message.opIds){\n                                    var _context_opStackTraces;\n                                    const trace = (_context_opStackTraces = context.opStackTraces) === null || _context_opStackTraces === void 0 ? void 0 : _context_opStackTraces.get(opId);\n                                    if (trace) {\n                                        traces.add(trace);\n                                    }\n                                }\n                                if (traces.size > 0) {\n                                    warnWithTitle(\"The following function calls caused the rejected storage mutations:\", \"\\n\\n\".concat(Array.from(traces).join(\"\\n\\n\")));\n                                }\n                                throw new Error(\"Storage mutations rejected by server: \".concat(message.reason));\n                            }\n                            break;\n                        }\n                    case 400 /* THREAD_CREATED */ :\n                    case 401 /* THREAD_METADATA_UPDATED */ :\n                    case 405 /* COMMENT_REACTION_ADDED */ :\n                    case 406 /* COMMENT_REACTION_REMOVED */ :\n                    case 402 /* COMMENT_CREATED */ :\n                    case 403 /* COMMENT_EDITED */ :\n                    case 404 /* COMMENT_DELETED */ :\n                        {\n                            eventHub.comments.notify(message);\n                            break;\n                        }\n                }\n            }\n            notify(updates, doNotBatchUpdates);\n        });\n    }\n    function flushNowOrSoon() {\n        const storageOps = context.buffer.storageOperations;\n        if (storageOps.length > 0) {\n            for (const op of storageOps){\n                context.unacknowledgedOps.set(nn(op.opId), op);\n            }\n            notifyStorageStatus();\n        }\n        if (managedSocket.getStatus() !== \"connected\") {\n            context.buffer.storageOperations = [];\n            return;\n        }\n        const now = Date.now();\n        const elapsedMillis = now - context.buffer.lastFlushedAt;\n        if (elapsedMillis >= config.throttleDelay) {\n            const messagesToFlush = serializeBuffer();\n            if (messagesToFlush.length === 0) {\n                return;\n            }\n            sendMessages(messagesToFlush);\n            context.buffer = {\n                flushTimerID: void 0,\n                lastFlushedAt: now,\n                messages: [],\n                storageOperations: [],\n                presenceUpdates: null\n            };\n        } else {\n            clearTimeout(context.buffer.flushTimerID);\n            context.buffer.flushTimerID = setTimeout(flushNowOrSoon, config.throttleDelay - elapsedMillis);\n        }\n    }\n    function serializeBuffer() {\n        const messages = [];\n        if (context.buffer.presenceUpdates) {\n            messages.push(context.buffer.presenceUpdates.type === \"full\" ? {\n                type: 100 /* UPDATE_PRESENCE */ ,\n                // Populating the `targetActor` field turns this message into\n                // a Full Presence™ update message (not a patch), which will get\n                // interpreted by other clients as such.\n                targetActor: -1,\n                data: context.buffer.presenceUpdates.data\n            } : {\n                type: 100 /* UPDATE_PRESENCE */ ,\n                data: context.buffer.presenceUpdates.data\n            });\n        }\n        for (const event of context.buffer.messages){\n            messages.push(event);\n        }\n        if (context.buffer.storageOperations.length > 0) {\n            messages.push({\n                type: 201 /* UPDATE_STORAGE */ ,\n                ops: context.buffer.storageOperations\n            });\n        }\n        return messages;\n    }\n    function updateYDoc(update, guid) {\n        const clientMsg = {\n            type: 301 /* UPDATE_YDOC */ ,\n            update,\n            guid\n        };\n        context.buffer.messages.push(clientMsg);\n        eventHub.ydoc.notify(clientMsg);\n        flushNowOrSoon();\n    }\n    function broadcastEvent(event) {\n        let options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {\n            shouldQueueEventIfNotReady: false\n        };\n        if (managedSocket.getStatus() !== \"connected\" && !options2.shouldQueueEventIfNotReady) {\n            return;\n        }\n        context.buffer.messages.push({\n            type: 103 /* BROADCAST_EVENT */ ,\n            event\n        });\n        flushNowOrSoon();\n    }\n    function dispatchOps(ops) {\n        context.buffer.storageOperations.push(...ops);\n        flushNowOrSoon();\n    }\n    let _getStorage$ = null;\n    let _resolveStoragePromise = null;\n    function processInitialStorage(message) {\n        const unacknowledgedOps = new Map(context.unacknowledgedOps);\n        createOrUpdateRootFromMessage(message, doNotBatchUpdates);\n        applyAndSendOps(unacknowledgedOps, doNotBatchUpdates);\n        _resolveStoragePromise === null || _resolveStoragePromise === void 0 ? void 0 : _resolveStoragePromise();\n        notifyStorageStatus();\n        eventHub.storageDidLoad.notify();\n    }\n    async function streamStorage() {\n        if (!managedSocket.authValue) {\n            return;\n        }\n        const result = await streamFetch(managedSocket.authValue.type === \"public\" ? managedSocket.authValue.publicApiKey : managedSocket.authValue.token.raw, config.roomId);\n        const items = await result.json();\n        processInitialStorage({\n            type: 200 /* INITIAL_STORAGE_STATE */ ,\n            items\n        });\n    }\n    function refreshStorage(options2) {\n        const messages = context.buffer.messages;\n        if (config.unstable_streamData) {\n            void streamStorage();\n        } else if (!messages.some((msg)=>msg.type === 200 /* FETCH_STORAGE */ )) {\n            messages.push({\n                type: 200 /* FETCH_STORAGE */ \n            });\n        }\n        if (options2.flush) {\n            flushNowOrSoon();\n        }\n    }\n    function startLoadingStorage() {\n        if (_getStorage$ === null) {\n            refreshStorage({\n                flush: true\n            });\n            _getStorage$ = new Promise((resolve)=>{\n                _resolveStoragePromise = resolve;\n            });\n            notifyStorageStatus();\n        }\n        return _getStorage$;\n    }\n    function getStorageSnapshot() {\n        const root = context.root;\n        if (root !== void 0) {\n            return root;\n        } else {\n            void startLoadingStorage();\n            return null;\n        }\n    }\n    async function getStorage() {\n        if (context.root !== void 0) {\n            return Promise.resolve({\n                root: context.root\n            });\n        }\n        await startLoadingStorage();\n        return {\n            root: nn(context.root)\n        };\n    }\n    function fetchYDoc(vector, guid) {\n        if (!context.buffer.messages.find((m)=>{\n            return m.type === 300 /* FETCH_YDOC */  && m.vector === vector && m.guid === guid;\n        })) {\n            context.buffer.messages.push({\n                type: 300 /* FETCH_YDOC */ ,\n                vector,\n                guid\n            });\n        }\n        flushNowOrSoon();\n    }\n    function undo() {\n        if (context.activeBatch) {\n            throw new Error(\"undo is not allowed during a batch\");\n        }\n        const historyOps = context.undoStack.pop();\n        if (historyOps === void 0) {\n            return;\n        }\n        context.pausedHistory = null;\n        const result = applyOps(historyOps, true);\n        batchUpdates(()=>{\n            notify(result.updates, doNotBatchUpdates);\n            context.redoStack.push(result.reverse);\n            onHistoryChange(doNotBatchUpdates);\n        });\n        for (const op of result.ops){\n            if (op.type !== \"presence\") {\n                context.buffer.storageOperations.push(op);\n            }\n        }\n        flushNowOrSoon();\n    }\n    function redo() {\n        if (context.activeBatch) {\n            throw new Error(\"redo is not allowed during a batch\");\n        }\n        const historyOps = context.redoStack.pop();\n        if (historyOps === void 0) {\n            return;\n        }\n        context.pausedHistory = null;\n        const result = applyOps(historyOps, true);\n        batchUpdates(()=>{\n            notify(result.updates, doNotBatchUpdates);\n            context.undoStack.push(result.reverse);\n            onHistoryChange(doNotBatchUpdates);\n        });\n        for (const op of result.ops){\n            if (op.type !== \"presence\") {\n                context.buffer.storageOperations.push(op);\n            }\n        }\n        flushNowOrSoon();\n    }\n    function clear() {\n        context.undoStack.length = 0;\n        context.redoStack.length = 0;\n    }\n    function batch(callback) {\n        if (context.activeBatch) {\n            return callback();\n        }\n        let returnValue = void 0;\n        batchUpdates(()=>{\n            context.activeBatch = {\n                ops: [],\n                updates: {\n                    storageUpdates: /* @__PURE__ */ new Map(),\n                    presence: false,\n                    others: []\n                },\n                reverseOps: []\n            };\n            try {\n                returnValue = callback();\n            } finally{\n                const currentBatch = context.activeBatch;\n                context.activeBatch = null;\n                if (currentBatch.reverseOps.length > 0) {\n                    addToUndoStack(currentBatch.reverseOps, doNotBatchUpdates);\n                }\n                if (currentBatch.ops.length > 0) {\n                    context.redoStack.length = 0;\n                }\n                if (currentBatch.ops.length > 0) {\n                    dispatchOps(currentBatch.ops);\n                }\n                notify(currentBatch.updates, doNotBatchUpdates);\n                flushNowOrSoon();\n            }\n        });\n        return returnValue;\n    }\n    function pauseHistory() {\n        if (context.pausedHistory === null) {\n            context.pausedHistory = [];\n        }\n    }\n    function resumeHistory() {\n        const historyOps = context.pausedHistory;\n        context.pausedHistory = null;\n        if (historyOps !== null && historyOps.length > 0) {\n            _addToRealUndoStack(historyOps, batchUpdates);\n        }\n    }\n    function getStorageStatus() {\n        if (context.root === void 0) {\n            return _getStorage$ === null ? \"not-loaded\" : \"loading\";\n        } else {\n            return context.unacknowledgedOps.size === 0 ? \"synchronized\" : \"synchronizing\";\n        }\n    }\n    let _lastStorageStatus = getStorageStatus();\n    function notifyStorageStatus() {\n        const storageStatus = getStorageStatus();\n        if (_lastStorageStatus !== storageStatus) {\n            _lastStorageStatus = storageStatus;\n            eventHub.storageStatus.notify(storageStatus);\n        }\n    }\n    const others_forDevTools = new DerivedRef(context.others, (others)=>others.map((other, index)=>userToTreeNode(\"Other \".concat(index), other)));\n    const events = {\n        status: eventHub.status.observable,\n        lostConnection: eventHub.lostConnection.observable,\n        customEvent: eventHub.customEvent.observable,\n        others: eventHub.others.observable,\n        self: eventHub.self.observable,\n        myPresence: eventHub.myPresence.observable,\n        error: eventHub.error.observable,\n        storage: eventHub.storage.observable,\n        history: eventHub.history.observable,\n        storageDidLoad: eventHub.storageDidLoad.observable,\n        storageStatus: eventHub.storageStatus.observable,\n        ydoc: eventHub.ydoc.observable,\n        comments: eventHub.comments.observable\n    };\n    const commentsApi = createCommentsApi(config.roomId, delegates.authenticate, {\n        baseUrl: config.baseUrl\n    });\n    return Object.defineProperty({\n        /* NOTE: Exposing __internal here only to allow testing implementation details in unit tests */ __internal: {\n            get presenceBuffer () {\n                var _context_buffer_presenceUpdates;\n                var _context_buffer_presenceUpdates_data;\n                return deepClone((_context_buffer_presenceUpdates_data = (_context_buffer_presenceUpdates = context.buffer.presenceUpdates) === null || _context_buffer_presenceUpdates === void 0 ? void 0 : _context_buffer_presenceUpdates.data) !== null && _context_buffer_presenceUpdates_data !== void 0 ? _context_buffer_presenceUpdates_data : null);\n            },\n            // prettier-ignore\n            get undoStack () {\n                return deepClone(context.undoStack);\n            },\n            // prettier-ignore\n            get nodeCount () {\n                return context.nodes.size;\n            },\n            // prettier-ignore\n            // Support for the Liveblocks browser extension\n            getSelf_forDevTools: ()=>selfAsTreeNode.current,\n            getOthers_forDevTools: ()=>others_forDevTools.current,\n            // prettier-ignore\n            simulate: {\n                // These exist only for our E2E testing app\n                explicitClose: (event)=>managedSocket._privateSendMachineEvent({\n                        type: \"EXPLICIT_SOCKET_CLOSE\",\n                        event\n                    }),\n                rawSend: (data)=>managedSocket.send(data)\n            }\n        },\n        id: config.roomId,\n        subscribe: makeClassicSubscribeFn(events),\n        connect: ()=>managedSocket.connect(),\n        reconnect: ()=>managedSocket.reconnect(),\n        disconnect: ()=>managedSocket.disconnect(),\n        destroy: ()=>{\n            uninstallBgTabSpy();\n            managedSocket.destroy();\n        },\n        // Presence\n        updatePresence,\n        updateYDoc,\n        broadcastEvent,\n        // Storage\n        batch,\n        history: {\n            undo,\n            redo,\n            canUndo,\n            canRedo,\n            clear,\n            pause: pauseHistory,\n            resume: resumeHistory\n        },\n        fetchYDoc,\n        getStorage,\n        getStorageSnapshot,\n        getStorageStatus,\n        events,\n        // Core\n        getStatus: ()=>managedSocket.getStatus(),\n        getConnectionState: ()=>managedSocket.getLegacyStatus(),\n        getSelf: ()=>self.current,\n        // Presence\n        getPresence: ()=>context.myPresence.current,\n        getOthers: ()=>context.others.current,\n        ...commentsApi\n    }, // Explictly make the __internal field non-enumerable, to avoid aggressive\n    // freezing when used with Immer\n    \"__internal\", {\n        enumerable: false\n    });\n}\nfunction makeClassicSubscribeFn(events) {\n    function subscribeToLiveStructureDeeply(node, callback) {\n        return events.storage.subscribe((updates)=>{\n            const relatedUpdates = updates.filter((update)=>isSameNodeOrChildOf(update.node, node));\n            if (relatedUpdates.length > 0) {\n                callback(relatedUpdates);\n            }\n        });\n    }\n    function subscribeToLiveStructureShallowly(node, callback) {\n        return events.storage.subscribe((updates)=>{\n            for (const update of updates){\n                if (update.node._id === node._id) {\n                    callback(update.node);\n                }\n            }\n        });\n    }\n    function subscribe(first, second, options) {\n        if (typeof first === \"string\" && isRoomEventName(first)) {\n            if (typeof second !== \"function\") {\n                throw new Error(\"Second argument must be a callback function\");\n            }\n            const callback = second;\n            switch(first){\n                case \"event\":\n                    return events.customEvent.subscribe(callback);\n                case \"my-presence\":\n                    return events.myPresence.subscribe(callback);\n                case \"others\":\n                    {\n                        const cb = callback;\n                        return events.others.subscribe((event)=>{\n                            const { others, ...internalEvent } = event;\n                            return cb(others, internalEvent);\n                        });\n                    }\n                case \"error\":\n                    return events.error.subscribe(callback);\n                case \"connection\":\n                    {\n                        const cb = callback;\n                        return events.status.subscribe((status)=>cb(newToLegacyStatus(status)));\n                    }\n                case \"status\":\n                    return events.status.subscribe(callback);\n                case \"lost-connection\":\n                    return events.lostConnection.subscribe(callback);\n                case \"history\":\n                    return events.history.subscribe(callback);\n                case \"storage-status\":\n                    return events.storageStatus.subscribe(callback);\n                default:\n                    return assertNever(first, '\"'.concat(String(first), '\" is not a valid event name'));\n            }\n        }\n        if (second === void 0 || typeof first === \"function\") {\n            if (typeof first === \"function\") {\n                const storageCallback = first;\n                return events.storage.subscribe(storageCallback);\n            } else {\n                throw new Error(\"Please specify a listener callback\");\n            }\n        }\n        if (isLiveNode(first)) {\n            const node = first;\n            if (options === null || options === void 0 ? void 0 : options.isDeep) {\n                const storageCallback = second;\n                return subscribeToLiveStructureDeeply(node, storageCallback);\n            } else {\n                const nodeCallback = second;\n                return subscribeToLiveStructureShallowly(node, nodeCallback);\n            }\n        }\n        throw new Error(\"\".concat(String(first), \" is not a value that can be subscribed to.\"));\n    }\n    return subscribe;\n}\nfunction isRoomEventName(value) {\n    return value === \"my-presence\" || value === \"others\" || value === \"event\" || value === \"error\" || value === \"history\" || value === \"status\" || value === \"storage-status\" || value === \"lost-connection\" || value === \"connection\";\n}\nfunction makeAuthDelegateForRoom(roomId, authManager) {\n    return async ()=>{\n        return authManager.getAuthValue(\"room:read\", roomId);\n    };\n}\nfunction makeCreateSocketDelegateForRoom(roomId, baseUrl, WebSocketPolyfill) {\n    return (authValue)=>{\n        const ws = WebSocketPolyfill !== null && WebSocketPolyfill !== void 0 ? WebSocketPolyfill : typeof WebSocket === \"undefined\" ? void 0 : WebSocket;\n        if (ws === void 0) {\n            throw new StopRetrying(\"To use Liveblocks client in a non-DOM environment, you need to provide a WebSocket polyfill.\");\n        }\n        const url = new URL(baseUrl);\n        url.protocol = url.protocol === \"http:\" ? \"ws\" : \"wss\";\n        url.pathname = \"/v7\";\n        url.searchParams.set(\"roomId\", roomId);\n        if (authValue.type === \"secret\") {\n            url.searchParams.set(\"tok\", authValue.token.raw);\n        } else if (authValue.type === \"public\") {\n            url.searchParams.set(\"pubkey\", authValue.publicApiKey);\n        } else {\n            return assertNever(authValue, \"Unhandled case\");\n        }\n        url.searchParams.set(\"version\", PKG_VERSION || \"dev\");\n        return new ws(url.toString());\n    };\n}\n// src/client.ts\nvar MIN_THROTTLE = 16;\nvar MAX_THROTTLE = 1e3;\nvar DEFAULT_THROTTLE = 100;\nvar MIN_BACKGROUND_KEEP_ALIVE_TIMEOUT = 15e3;\nvar MIN_LOST_CONNECTION_TIMEOUT = 200;\nvar RECOMMENDED_MIN_LOST_CONNECTION_TIMEOUT = 1e3;\nvar MAX_LOST_CONNECTION_TIMEOUT = 3e4;\nvar DEFAULT_LOST_CONNECTION_TIMEOUT = 5e3;\nfunction getBaseUrlFromClientOptions(clientOptions) {\n    if (\"liveblocksServer\" in clientOptions) {\n        throw new Error(\"Client option no longer supported\");\n    }\n    if (typeof clientOptions.baseUrl === \"string\" && clientOptions.baseUrl.startsWith(\"http\")) {\n        return clientOptions.baseUrl;\n    } else {\n        return DEFAULT_BASE_URL;\n    }\n}\nfunction createClient(options) {\n    const clientOptions = options;\n    var _clientOptions_throttle;\n    const throttleDelay = getThrottle((_clientOptions_throttle = clientOptions.throttle) !== null && _clientOptions_throttle !== void 0 ? _clientOptions_throttle : DEFAULT_THROTTLE);\n    var _clientOptions_lostConnectionTimeout;\n    const lostConnectionTimeout = getLostConnectionTimeout((_clientOptions_lostConnectionTimeout = clientOptions.lostConnectionTimeout) !== null && _clientOptions_lostConnectionTimeout !== void 0 ? _clientOptions_lostConnectionTimeout : DEFAULT_LOST_CONNECTION_TIMEOUT);\n    const backgroundKeepAliveTimeout = getBackgroundKeepAliveTimeout(clientOptions.backgroundKeepAliveTimeout);\n    const authManager = createAuthManager(options);\n    const roomsById = /* @__PURE__ */ new Map();\n    function teardownRoom(room) {\n        unlinkDevTools(room.id);\n        roomsById.delete(room.id);\n        room.destroy();\n    }\n    function leaseRoom(info) {\n        const leave = ()=>{\n            const self = leave;\n            if (!info.unsubs.delete(self)) {\n                warn(\"This leave function was already called. Calling it more than once has no effect.\");\n            } else {\n                if (info.unsubs.size === 0) {\n                    teardownRoom(info.room);\n                }\n            }\n        };\n        info.unsubs.add(leave);\n        return {\n            room: info.room,\n            leave\n        };\n    }\n    function enterRoom(roomId, options2) {\n        var _clientOptions_polyfills;\n        const existing = roomsById.get(roomId);\n        if (existing !== void 0) {\n            return leaseRoom(existing);\n        }\n        deprecateIf(options2.initialPresence === null || options2.initialPresence === void 0, \"Please provide an initial presence value for the current user when entering the room.\");\n        const baseUrl = getBaseUrlFromClientOptions(clientOptions);\n        var _options2_initialPresence, _clientOptions_mockedDelegates;\n        const newRoom = createRoom({\n            initialPresence: (_options2_initialPresence = options2.initialPresence) !== null && _options2_initialPresence !== void 0 ? _options2_initialPresence : {},\n            initialStorage: options2.initialStorage\n        }, {\n            roomId,\n            throttleDelay,\n            lostConnectionTimeout,\n            backgroundKeepAliveTimeout,\n            polyfills: clientOptions.polyfills,\n            delegates: (_clientOptions_mockedDelegates = clientOptions.mockedDelegates) !== null && _clientOptions_mockedDelegates !== void 0 ? _clientOptions_mockedDelegates : {\n                createSocket: makeCreateSocketDelegateForRoom(roomId, baseUrl, (_clientOptions_polyfills = clientOptions.polyfills) === null || _clientOptions_polyfills === void 0 ? void 0 : _clientOptions_polyfills.WebSocket),\n                authenticate: makeAuthDelegateForRoom(roomId, authManager)\n            },\n            enableDebugLogging: clientOptions.enableDebugLogging,\n            unstable_batchedUpdates: options2 === null || options2 === void 0 ? void 0 : options2.unstable_batchedUpdates,\n            baseUrl,\n            unstable_fallbackToHTTP: !!clientOptions.unstable_fallbackToHTTP,\n            unstable_streamData: !!clientOptions.unstable_streamData\n        });\n        const newRoomInfo = {\n            room: newRoom,\n            unsubs: /* @__PURE__ */ new Set()\n        };\n        roomsById.set(roomId, newRoomInfo);\n        setupDevTools(()=>Array.from(roomsById.keys()));\n        linkDevTools(roomId, newRoom);\n        var _options2_autoConnect, _ref;\n        const shouldConnect = (_ref = (_options2_autoConnect = options2.autoConnect) !== null && _options2_autoConnect !== void 0 ? _options2_autoConnect : options2.shouldInitiallyConnect) !== null && _ref !== void 0 ? _ref : true;\n        if (shouldConnect) {\n            if (typeof atob === \"undefined\") {\n                var _clientOptions_polyfills1;\n                if (((_clientOptions_polyfills1 = clientOptions.polyfills) === null || _clientOptions_polyfills1 === void 0 ? void 0 : _clientOptions_polyfills1.atob) === void 0) {\n                    throw new Error(\"You need to polyfill atob to use the client in your environment. Please follow the instructions at https://liveblocks.io/docs/errors/liveblocks-client/atob-polyfill\");\n                }\n                global.atob = clientOptions.polyfills.atob;\n            }\n            newRoom.connect();\n        }\n        return leaseRoom(newRoomInfo);\n    }\n    function enter(roomId, options2) {\n        const { room, leave: _ } = enterRoom(roomId, options2);\n        return room;\n    }\n    function getRoom(roomId) {\n        var _roomsById_get;\n        const room = (_roomsById_get = roomsById.get(roomId)) === null || _roomsById_get === void 0 ? void 0 : _roomsById_get.room;\n        return room ? room : null;\n    }\n    function forceLeave(roomId) {\n        var _roomsById_get;\n        var _roomsById_get_unsubs;\n        const unsubs = (_roomsById_get_unsubs = (_roomsById_get = roomsById.get(roomId)) === null || _roomsById_get === void 0 ? void 0 : _roomsById_get.unsubs) !== null && _roomsById_get_unsubs !== void 0 ? _roomsById_get_unsubs : /* @__PURE__ */ new Set();\n        for (const unsub of unsubs){\n            unsub();\n        }\n    }\n    function logout() {\n        authManager.reset();\n        for (const { room } of roomsById.values()){\n            if (!isIdle(room.getStatus())) {\n                room.reconnect();\n            }\n        }\n    }\n    return {\n        logout,\n        // Old, deprecated APIs\n        enter,\n        getRoom,\n        leave: forceLeave,\n        // New, preferred API\n        enterRoom\n    };\n}\nfunction checkBounds(option, value, min, max, recommendedMin) {\n    if (typeof value !== \"number\" || value < min || max !== void 0 && value > max) {\n        throw new Error(max !== void 0 ? \"\".concat(option, \" should be between \").concat(recommendedMin !== null && recommendedMin !== void 0 ? recommendedMin : min, \" and \").concat(max, \".\") : \"\".concat(option, \" should be at least \").concat(recommendedMin !== null && recommendedMin !== void 0 ? recommendedMin : min, \".\"));\n    }\n    return value;\n}\nfunction getBackgroundKeepAliveTimeout(value) {\n    if (value === void 0) return void 0;\n    return checkBounds(\"backgroundKeepAliveTimeout\", value, MIN_BACKGROUND_KEEP_ALIVE_TIMEOUT);\n}\nfunction getThrottle(value) {\n    return checkBounds(\"throttle\", value, MIN_THROTTLE, MAX_THROTTLE);\n}\nfunction getLostConnectionTimeout(value) {\n    return checkBounds(\"lostConnectionTimeout\", value, MIN_LOST_CONNECTION_TIMEOUT, MAX_LOST_CONNECTION_TIMEOUT, RECOMMENDED_MIN_LOST_CONNECTION_TIMEOUT);\n}\n// src/crdts/utils.ts\nfunction toPlainLson(lson) {\n    if (lson instanceof LiveObject) {\n        return {\n            liveblocksType: \"LiveObject\",\n            data: Object.fromEntries(Object.entries(lson.toObject()).flatMap((param)=>{\n                let [key, value] = param;\n                return value !== void 0 ? [\n                    [\n                        key,\n                        toPlainLson(value)\n                    ]\n                ] : [];\n            }))\n        };\n    } else if (lson instanceof LiveMap) {\n        return {\n            liveblocksType: \"LiveMap\",\n            data: Object.fromEntries([\n                ...lson\n            ].map((param)=>{\n                let [key, value] = param;\n                return [\n                    key,\n                    toPlainLson(value)\n                ];\n            }))\n        };\n    } else if (lson instanceof LiveList) {\n        return {\n            liveblocksType: \"LiveList\",\n            data: [\n                ...lson\n            ].map((item)=>toPlainLson(item))\n        };\n    } else {\n        return lson;\n    }\n}\n// src/immutable.ts\nfunction lsonObjectToJson(obj) {\n    const result = {};\n    for(const key in obj){\n        const val = obj[key];\n        if (val !== void 0) {\n            result[key] = lsonToJson(val);\n        }\n    }\n    return result;\n}\nfunction liveObjectToJson(liveObject) {\n    return lsonObjectToJson(liveObject.toObject());\n}\nfunction liveMapToJson(map) {\n    const result = {};\n    for (const [key, value] of map.entries()){\n        result[key] = lsonToJson(value);\n    }\n    return result;\n}\nfunction lsonListToJson(value) {\n    return value.map(lsonToJson);\n}\nfunction liveListToJson(value) {\n    return lsonListToJson(value.toArray());\n}\nfunction lsonToJson(value) {\n    if (value instanceof LiveObject) {\n        return liveObjectToJson(value);\n    } else if (value instanceof LiveList) {\n        return liveListToJson(value);\n    } else if (value instanceof LiveMap) {\n        return liveMapToJson(value);\n    } else if (value instanceof LiveRegister) {\n        return value.data;\n    }\n    if (Array.isArray(value)) {\n        return lsonListToJson(value);\n    } else if (isPlainObject(value)) {\n        return lsonObjectToJson(value);\n    }\n    return value;\n}\nfunction deepLiveify(value) {\n    if (Array.isArray(value)) {\n        return new LiveList(value.map(deepLiveify));\n    } else if (isPlainObject(value)) {\n        const init = {};\n        for(const key in value){\n            const val = value[key];\n            if (val === void 0) {\n                continue;\n            }\n            init[key] = deepLiveify(val);\n        }\n        return new LiveObject(init);\n    } else {\n        return value;\n    }\n}\nfunction patchLiveList(liveList, prev, next) {\n    let i = 0;\n    let prevEnd = prev.length - 1;\n    let nextEnd = next.length - 1;\n    let prevNode = prev[0];\n    let nextNode = next[0];\n    outer: {\n        while(prevNode === nextNode){\n            ++i;\n            if (i > prevEnd || i > nextEnd) {\n                break outer;\n            }\n            prevNode = prev[i];\n            nextNode = next[i];\n        }\n        prevNode = prev[prevEnd];\n        nextNode = next[nextEnd];\n        while(prevNode === nextNode){\n            prevEnd--;\n            nextEnd--;\n            if (i > prevEnd || i > nextEnd) {\n                break outer;\n            }\n            prevNode = prev[prevEnd];\n            nextNode = next[nextEnd];\n        }\n    }\n    if (i > prevEnd) {\n        if (i <= nextEnd) {\n            while(i <= nextEnd){\n                liveList.insert(deepLiveify(next[i]), i);\n                i++;\n            }\n        }\n    } else if (i > nextEnd) {\n        let localI = i;\n        while(localI <= prevEnd){\n            liveList.delete(i);\n            localI++;\n        }\n    } else {\n        while(i <= prevEnd && i <= nextEnd){\n            prevNode = prev[i];\n            nextNode = next[i];\n            const liveListNode = liveList.get(i);\n            if (isLiveObject(liveListNode) && isPlainObject(prevNode) && isPlainObject(nextNode)) {\n                patchLiveObject(liveListNode, prevNode, nextNode);\n            } else {\n                liveList.set(i, deepLiveify(nextNode));\n            }\n            i++;\n        }\n        while(i <= nextEnd){\n            liveList.insert(deepLiveify(next[i]), i);\n            i++;\n        }\n        let localI = i;\n        while(localI <= prevEnd){\n            liveList.delete(i);\n            localI++;\n        }\n    }\n}\nfunction patchLiveObjectKey(liveObject, key, prev, next) {\n    if (true) {\n        const nonSerializableValue = findNonSerializableValue(next);\n        if (nonSerializableValue) {\n            error2(\"New state path: '\".concat(nonSerializableValue.path, \"' value: '\").concat(String(nonSerializableValue.value), \"' is not serializable.\\nOnly serializable value can be synced with Liveblocks.\"));\n            return;\n        }\n    }\n    const value = liveObject.get(key);\n    if (next === void 0) {\n        liveObject.delete(key);\n    } else if (value === void 0) {\n        liveObject.set(key, deepLiveify(next));\n    } else if (prev === next) {\n        return;\n    } else if (isLiveList(value) && Array.isArray(prev) && Array.isArray(next)) {\n        patchLiveList(value, prev, next);\n    } else if (isLiveObject(value) && isPlainObject(prev) && isPlainObject(next)) {\n        patchLiveObject(value, prev, next);\n    } else {\n        liveObject.set(key, deepLiveify(next));\n    }\n}\nfunction patchLiveObject(root, prev, next) {\n    const updates = {};\n    for(const key in next){\n        patchLiveObjectKey(root, key, prev[key], next[key]);\n    }\n    for(const key in prev){\n        if (next[key] === void 0) {\n            root.delete(key);\n        }\n    }\n    if (Object.keys(updates).length > 0) {\n        root.update(updates);\n    }\n}\nfunction getParentsPath(node) {\n    const path = [];\n    while(node.parent.type === \"HasParent\"){\n        if (isLiveList(node.parent.node)) {\n            path.push(node.parent.node._indexOfPosition(node.parent.key));\n        } else {\n            path.push(node.parent.key);\n        }\n        node = node.parent.node;\n    }\n    return path;\n}\nfunction legacy_patchImmutableObject(state, updates) {\n    return updates.reduce((state2, update)=>legacy_patchImmutableObjectWithUpdate(state2, update), state);\n}\nfunction legacy_patchImmutableObjectWithUpdate(state, update) {\n    const path = getParentsPath(update.node);\n    return legacy_patchImmutableNode(state, path, update);\n}\nfunction legacy_patchImmutableNode(state, path, update) {\n    const pathItem = path.pop();\n    if (pathItem === void 0) {\n        switch(update.type){\n            case \"LiveObject\":\n                {\n                    if (!isJsonObject(state)) {\n                        throw new Error(\"Internal: received update on LiveObject but state was not an object\");\n                    }\n                    const newState = Object.assign({}, state);\n                    for(const key in update.updates){\n                        var _update_updates_key, _update_updates_key1;\n                        if (((_update_updates_key = update.updates[key]) === null || _update_updates_key === void 0 ? void 0 : _update_updates_key.type) === \"update\") {\n                            const val = update.node.get(key);\n                            if (val !== void 0) {\n                                newState[key] = lsonToJson(val);\n                            }\n                        } else if (((_update_updates_key1 = update.updates[key]) === null || _update_updates_key1 === void 0 ? void 0 : _update_updates_key1.type) === \"delete\") {\n                            delete newState[key];\n                        }\n                    }\n                    return newState;\n                }\n            case \"LiveList\":\n                {\n                    if (!Array.isArray(state)) {\n                        throw new Error(\"Internal: received update on LiveList but state was not an array\");\n                    }\n                    let newState = state.map((x)=>x);\n                    for (const listUpdate of update.updates){\n                        if (listUpdate.type === \"set\") {\n                            newState = newState.map((item, index)=>index === listUpdate.index ? lsonToJson(listUpdate.item) : item);\n                        } else if (listUpdate.type === \"insert\") {\n                            if (listUpdate.index === newState.length) {\n                                newState.push(lsonToJson(listUpdate.item));\n                            } else {\n                                newState = [\n                                    ...newState.slice(0, listUpdate.index),\n                                    lsonToJson(listUpdate.item),\n                                    ...newState.slice(listUpdate.index)\n                                ];\n                            }\n                        } else if (listUpdate.type === \"delete\") {\n                            newState.splice(listUpdate.index, 1);\n                        } else if (listUpdate.type === \"move\") {\n                            if (listUpdate.previousIndex > listUpdate.index) {\n                                newState = [\n                                    ...newState.slice(0, listUpdate.index),\n                                    lsonToJson(listUpdate.item),\n                                    ...newState.slice(listUpdate.index, listUpdate.previousIndex),\n                                    ...newState.slice(listUpdate.previousIndex + 1)\n                                ];\n                            } else {\n                                newState = [\n                                    ...newState.slice(0, listUpdate.previousIndex),\n                                    ...newState.slice(listUpdate.previousIndex + 1, listUpdate.index + 1),\n                                    lsonToJson(listUpdate.item),\n                                    ...newState.slice(listUpdate.index + 1)\n                                ];\n                            }\n                        }\n                    }\n                    return newState;\n                }\n            case \"LiveMap\":\n                {\n                    if (!isJsonObject(state)) {\n                        throw new Error(\"Internal: received update on LiveMap but state was not an object\");\n                    }\n                    const newState = Object.assign({}, state);\n                    for(const key in update.updates){\n                        var _update_updates_key2, _update_updates_key3;\n                        if (((_update_updates_key2 = update.updates[key]) === null || _update_updates_key2 === void 0 ? void 0 : _update_updates_key2.type) === \"update\") {\n                            const value = update.node.get(key);\n                            if (value !== void 0) {\n                                newState[key] = lsonToJson(value);\n                            }\n                        } else if (((_update_updates_key3 = update.updates[key]) === null || _update_updates_key3 === void 0 ? void 0 : _update_updates_key3.type) === \"delete\") {\n                            delete newState[key];\n                        }\n                    }\n                    return newState;\n                }\n        }\n    }\n    if (Array.isArray(state)) {\n        const newArray = [\n            ...state\n        ];\n        newArray[pathItem] = legacy_patchImmutableNode(state[pathItem], path, update);\n        return newArray;\n    } else if (isJsonObject(state)) {\n        const node = state[pathItem];\n        if (node === void 0) {\n            return state;\n        } else {\n            const stateAsObj = state;\n            return {\n                ...stateAsObj,\n                [pathItem]: legacy_patchImmutableNode(node, path, update)\n            };\n        }\n    } else {\n        return state;\n    }\n}\n// src/lib/shallow.ts\nfunction shallowArray(xs, ys) {\n    if (xs.length !== ys.length) {\n        return false;\n    }\n    for(let i = 0; i < xs.length; i++){\n        if (!Object.is(xs[i], ys[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction shallowObj(objA, objB) {\n    if (typeof objA !== \"object\" || objA === null || typeof objB !== \"object\" || objB === null || Object.prototype.toString.call(objA) !== \"[object Object]\" || Object.prototype.toString.call(objB) !== \"[object Object]\") {\n        return false;\n    }\n    const keysA = Object.keys(objA);\n    if (keysA.length !== Object.keys(objB).length) {\n        return false;\n    }\n    return keysA.every((key)=>Object.prototype.hasOwnProperty.call(objB, key) && Object.is(objA[key], objB[key]));\n}\nfunction shallow(a, b) {\n    if (Object.is(a, b)) {\n        return true;\n    }\n    const isArrayA = Array.isArray(a);\n    const isArrayB = Array.isArray(b);\n    if (isArrayA || isArrayB) {\n        if (!isArrayA || !isArrayB) {\n            return false;\n        }\n        return shallowArray(a, b);\n    }\n    return shallowObj(a, b);\n}\n// src/lib/AsyncCache.ts\nvar noop = ()=>{};\nfunction isShallowEqual(a, b) {\n    if (a.isLoading !== b.isLoading || a.data === void 0 !== (b.data === void 0) || a.error === void 0 !== (b.error === void 0)) {\n        return false;\n    } else {\n        return shallow(a.data, b.data) && shallow(a.error, b.error);\n    }\n}\nfunction createCacheItem(key, asyncFunction, options) {\n    const $asyncFunction = async ()=>asyncFunction(key);\n    const context = {\n        isInvalid: true\n    };\n    let state = {\n        isLoading: false\n    };\n    let previousState = {\n        isLoading: false\n    };\n    const eventSource2 = makeEventSource();\n    function notify() {\n        var _options_isStateEqual;\n        const isEqual = (_options_isStateEqual = options === null || options === void 0 ? void 0 : options.isStateEqual) !== null && _options_isStateEqual !== void 0 ? _options_isStateEqual : isShallowEqual;\n        if (!isEqual(previousState, state)) {\n            previousState = state;\n            eventSource2.notify(state);\n        }\n    }\n    async function resolve() {\n        if (!context.promise) {\n            return;\n        }\n        try {\n            const data = await context.promise;\n            context.isInvalid = false;\n            state = {\n                isLoading: false,\n                data\n            };\n        } catch (error3) {\n            state = {\n                isLoading: false,\n                data: state.data,\n                error: error3\n            };\n        }\n        context.promise = void 0;\n        notify();\n    }\n    async function revalidate() {\n        context.isInvalid = true;\n        return get();\n    }\n    async function get() {\n        if (context.isInvalid) {\n            if (!context.promise) {\n                context.isInvalid = true;\n                context.promise = $asyncFunction();\n                state = {\n                    isLoading: true,\n                    data: state.data\n                };\n                notify();\n            }\n            await resolve();\n        }\n        return getState();\n    }\n    function getState() {\n        return state;\n    }\n    return {\n        ...eventSource2.observable,\n        get,\n        getState,\n        revalidate\n    };\n}\nfunction createAsyncCache(asyncFunction, options) {\n    const cache = /* @__PURE__ */ new Map();\n    function create(key) {\n        let cacheItem = cache.get(key);\n        if (cacheItem) {\n            return cacheItem;\n        }\n        cacheItem = createCacheItem(key, asyncFunction, options);\n        cache.set(key, cacheItem);\n        return cacheItem;\n    }\n    function get(key) {\n        return create(key).get();\n    }\n    function getState(key) {\n        var _cache_get;\n        return (_cache_get = cache.get(key)) === null || _cache_get === void 0 ? void 0 : _cache_get.getState();\n    }\n    function revalidate(key) {\n        return create(key).revalidate();\n    }\n    function subscribe(key, callback) {\n        var _create_subscribe;\n        return (_create_subscribe = create(key).subscribe(callback)) !== null && _create_subscribe !== void 0 ? _create_subscribe : noop;\n    }\n    function subscribeOnce(key, callback) {\n        var _create_subscribeOnce;\n        return (_create_subscribeOnce = create(key).subscribeOnce(callback)) !== null && _create_subscribeOnce !== void 0 ? _create_subscribeOnce : noop;\n    }\n    function has(key) {\n        return cache.has(key);\n    }\n    function clear() {\n        cache.clear();\n    }\n    return {\n        create,\n        get,\n        getState,\n        revalidate,\n        subscribe,\n        subscribeOnce,\n        has,\n        clear\n    };\n}\n// src/lib/Poller.ts\nfunction makePoller(callback) {\n    let context = {\n        state: \"stopped\",\n        timeoutHandle: null,\n        interval: null,\n        lastScheduledAt: null,\n        remainingInterval: null\n    };\n    function poll() {\n        if (context.state === \"running\") {\n            schedule(context.interval);\n        }\n        void callback();\n    }\n    function schedule(interval) {\n        context = {\n            state: \"running\",\n            interval: context.state !== \"stopped\" ? context.interval : interval,\n            lastScheduledAt: performance.now(),\n            timeoutHandle: setTimeout(poll, interval),\n            remainingInterval: null\n        };\n    }\n    function scheduleRemaining(remaining) {\n        if (context.state !== \"paused\") {\n            return;\n        }\n        context = {\n            state: \"running\",\n            interval: context.interval,\n            lastScheduledAt: context.lastScheduledAt,\n            timeoutHandle: setTimeout(poll, remaining),\n            remainingInterval: null\n        };\n    }\n    function start(interval) {\n        if (context.state === \"running\") {\n            return;\n        }\n        schedule(interval);\n    }\n    function restart(interval) {\n        stop();\n        start(interval);\n    }\n    function pause() {\n        if (context.state !== \"running\") {\n            return;\n        }\n        clearTimeout(context.timeoutHandle);\n        context = {\n            state: \"paused\",\n            interval: context.interval,\n            lastScheduledAt: context.lastScheduledAt,\n            timeoutHandle: null,\n            remainingInterval: context.interval - (performance.now() - context.lastScheduledAt)\n        };\n    }\n    function resume() {\n        if (context.state !== \"paused\") {\n            return;\n        }\n        scheduleRemaining(context.remainingInterval);\n    }\n    function stop() {\n        if (context.state === \"stopped\") {\n            return;\n        }\n        if (context.timeoutHandle) {\n            clearTimeout(context.timeoutHandle);\n        }\n        context = {\n            state: \"stopped\",\n            interval: null,\n            lastScheduledAt: null,\n            timeoutHandle: null,\n            remainingInterval: null\n        };\n    }\n    return {\n        start,\n        restart,\n        pause,\n        resume,\n        stop\n    };\n}\n// src/lib/stringify.ts\nfunction stringify(object) {\n    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        args[_key - 1] = arguments[_key];\n    }\n    if (typeof object !== \"object\" || object === null || Array.isArray(object)) {\n        return JSON.stringify(object, ...args);\n    }\n    const sortedObject = Object.keys(object).sort().reduce((sortedObject2, key)=>{\n        sortedObject2[key] = object[key];\n        return sortedObject2;\n    }, {});\n    return JSON.stringify(sortedObject, ...args);\n}\n// src/index.ts\ndetectDupes(PKG_NAME, PKG_VERSION, PKG_FORMAT);\n //# sourceMappingURL=index.mjs.map\nvar _c, _c1, _c2;\n$RefreshReg$(_c, \"HasParent\");\n$RefreshReg$(_c1, \"Orphaned\");\n$RefreshReg$(_c2, \"HACK_addIntentAndDeletedIdToOperation\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@liveblocks/core/dist/index.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@liveblocks/react/dist/index.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/@liveblocks/react/dist/index.mjs ***!
  \*******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClientSideSuspense: function() { return /* binding */ ClientSideSuspense; },\n/* harmony export */   createRoomContext: function() { return /* binding */ createRoomContext; },\n/* harmony export */   shallow: function() { return /* reexport safe */ _liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.shallow; },\n/* harmony export */   useRoomContextBundle: function() { return /* binding */ useRoomContextBundle; }\n/* harmony export */ });\n/* harmony import */ var _liveblocks_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @liveblocks/client */ \"(app-pages-browser)/./node_modules/@liveblocks/core/dist/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var use_sync_external_store_shim_with_selector_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! use-sync-external-store/shim/with-selector.js */ \"(app-pages-browser)/./node_modules/use-sync-external-store/shim/with-selector.js\");\n/* harmony import */ var nanoid__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! nanoid */ \"(app-pages-browser)/./node_modules/nanoid/index.browser.js\");\n/* harmony import */ var use_sync_external_store_shim_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! use-sync-external-store/shim/index.js */ \"(app-pages-browser)/./node_modules/use-sync-external-store/shim/index.js\");\n/* __next_internal_client_entry_do_not_use__ ClientSideSuspense,createRoomContext,shallow,useRoomContextBundle auto */ var _s = $RefreshSig$(), _s1 = $RefreshSig$(), _s2 = $RefreshSig$(), _s3 = $RefreshSig$(), _s4 = $RefreshSig$(), _s5 = $RefreshSig$(), _s6 = $RefreshSig$(), _s7 = $RefreshSig$(), _s8 = $RefreshSig$(), _s9 = $RefreshSig$(), _s10 = $RefreshSig$(), _s11 = $RefreshSig$();\n// src/index.ts\n\n// src/version.ts\nvar PKG_NAME = \"@liveblocks/react\";\nvar PKG_VERSION = \"1.9.7\";\nvar PKG_FORMAT = \"esm\";\n// src/ClientSideSuspense.tsx\n\nfunction ClientSideSuspense(props) {\n    _s();\n    const [mounted, setMounted] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        setMounted(true);\n    }, []);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {\n        fallback: props.fallback\n    }, mounted ? props.children() : props.fallback);\n}\n_s(ClientSideSuspense, \"LrrVfNW3d1raFE0BNzCTILYmIfo=\");\n_c = ClientSideSuspense;\n// src/factory.tsx\n\n\n\n\n// src/comments/CommentsRoom.tsx\n\n\n\n\n// src/comments/errors.ts\nvar CreateThreadError = class extends Error {\n    constructor(cause, context){\n        super(\"Create thread failed.\");\n        this.cause = cause;\n        this.context = context;\n        this.name = \"CreateThreadError\";\n    }\n};\nvar EditThreadMetadataError = class extends Error {\n    constructor(cause, context){\n        super(\"Edit thread metadata failed.\");\n        this.cause = cause;\n        this.context = context;\n        this.name = \"EditThreadMetadataError\";\n    }\n};\nvar CreateCommentError = class extends Error {\n    constructor(cause, context){\n        super(\"Create comment failed.\");\n        this.cause = cause;\n        this.context = context;\n        this.name = \"CreateCommentError\";\n    }\n};\nvar EditCommentError = class extends Error {\n    constructor(cause, context){\n        super(\"Edit comment failed.\");\n        this.cause = cause;\n        this.context = context;\n        this.name = \"EditCommentError\";\n    }\n};\nvar DeleteCommentError = class extends Error {\n    constructor(cause, context){\n        super(\"Delete comment failed.\");\n        this.cause = cause;\n        this.context = context;\n        this.name = \"DeleteCommentError\";\n    }\n};\nvar AddReactionError = class extends Error {\n    constructor(cause, context){\n        super(\"Add reaction failed.\");\n        this.cause = cause;\n        this.context = context;\n        this.name = \"AddReactionError\";\n    }\n};\nvar RemoveReactionError = class extends Error {\n    constructor(cause, context){\n        super(\"Remove reaction failed.\");\n        this.cause = cause;\n        this.context = context;\n        this.name = \"RemoveReactionError\";\n    }\n};\n// src/comments/lib/revalidation.ts\n\n// src/comments/lib/use-is-document-visible.ts\n\nfunction useIsDocumentVisible() {\n    _s1();\n    const isVisible = (0,use_sync_external_store_shim_index_js__WEBPACK_IMPORTED_MODULE_2__.useSyncExternalStore)(subscribe, getSnapshot, getSnapshot);\n    return isVisible;\n}\n_s1(useIsDocumentVisible, \"Rfb9M/gV82sh12lehq3N1/jJzfk=\", false, function() {\n    return [\n        use_sync_external_store_shim_index_js__WEBPACK_IMPORTED_MODULE_2__.useSyncExternalStore\n    ];\n});\nfunction subscribe(onStoreChange) {\n    document.addEventListener(\"visibilitychange\", onStoreChange);\n    return ()=>{\n        document.removeEventListener(\"visibilitychange\", onStoreChange);\n    };\n}\nfunction getSnapshot() {\n    const isDocumentDefined = typeof document !== \"undefined\";\n    return isDocumentDefined ? document.visibilityState === \"visible\" : true;\n}\n// src/comments/lib/use-is-online.ts\n\n\nfunction useIsOnline() {\n    _s2();\n    const isOnlineRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(true);\n    const subscribe2 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((onStoreChange)=>{\n        function handleIsOnline() {\n            isOnlineRef.current = true;\n            onStoreChange();\n        }\n        function handleIsOffline() {\n            isOnlineRef.current = false;\n            onStoreChange();\n        }\n        window.addEventListener(\"online\", handleIsOnline);\n        window.addEventListener(\"offline\", handleIsOffline);\n        return ()=>{\n            window.removeEventListener(\"online\", handleIsOnline);\n            window.removeEventListener(\"offline\", handleIsOffline);\n        };\n    }, []);\n    const getSnapshot2 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        return isOnlineRef.current;\n    }, []);\n    const isOnline = (0,use_sync_external_store_shim_index_js__WEBPACK_IMPORTED_MODULE_2__.useSyncExternalStore)(subscribe2, getSnapshot2, getSnapshot2);\n    return isOnline;\n}\n_s2(useIsOnline, \"ruyyaaZMOyQYz7MS88fsorhsFMw=\", false, function() {\n    return [\n        use_sync_external_store_shim_index_js__WEBPACK_IMPORTED_MODULE_2__.useSyncExternalStore\n    ];\n});\n// src/comments/lib/revalidation.ts\nvar DEFAULT_ERROR_RETRY_INTERVAL = 5e3;\nvar DEFAULT_MAX_ERROR_RETRY_COUNT = 5;\nvar DEFAULT_DEDUPING_INTERVAL = 2e3;\nvar timestamp = 0;\nfunction useRevalidateCache(manager, fetcher) {\n    let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n    _s3();\n    const isOnlineRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(true);\n    const { dedupingInterval = DEFAULT_DEDUPING_INTERVAL, errorRetryInterval = DEFAULT_ERROR_RETRY_INTERVAL, errorRetryCount = DEFAULT_MAX_ERROR_RETRY_COUNT } = options;\n    const _revalidateCache = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (param)=>{\n        let { shouldDedupe, retryCount = 0 } = param;\n        let startAt;\n        const shouldStartRequest = !manager.getRequest() || !shouldDedupe;\n        function deleteActiveRequest() {\n            const activeRequest = manager.getRequest();\n            if (!activeRequest) return;\n            if (activeRequest.timestamp !== startAt) return;\n            manager.setRequest(void 0);\n        }\n        function handleError() {\n            const timeout = ~~((Math.random() + 0.5) * (1 << (retryCount < 8 ? retryCount : 8))) * errorRetryInterval;\n            if (retryCount > errorRetryCount) return;\n            setTimeout(()=>{\n                void _revalidateCache({\n                    shouldDedupe: false,\n                    retryCount: retryCount + 1\n                });\n            }, timeout);\n        }\n        if (shouldStartRequest) {\n            manager.setRequest({\n                fetcher: fetcher(),\n                timestamp: ++timestamp\n            });\n        }\n        try {\n            let activeRequest = manager.getRequest();\n            if (!activeRequest) return;\n            startAt = activeRequest.timestamp;\n            const newData = await activeRequest.fetcher;\n            if (shouldStartRequest) {\n                setTimeout(deleteActiveRequest, dedupingInterval);\n            }\n            activeRequest = manager.getRequest();\n            if (!activeRequest || activeRequest.timestamp !== startAt) return;\n            const activeMutation = manager.getMutation();\n            if (activeMutation && (activeMutation.startTime > startAt || activeMutation.endTime > startAt || activeMutation.endTime === 0)) {\n                return;\n            }\n            manager.setCache(newData);\n        } catch (err) {\n            deleteActiveRequest();\n            const isVisible = document.visibilityState === \"visible\";\n            const isOnline = isOnlineRef.current;\n            if (shouldStartRequest && isVisible && isOnline) handleError();\n            manager.setError(err);\n        }\n        return;\n    }, [\n        manager,\n        fetcher,\n        dedupingInterval,\n        errorRetryInterval,\n        errorRetryCount\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        function handleIsOnline() {\n            isOnlineRef.current = true;\n        }\n        function handleIsOffline() {\n            isOnlineRef.current = false;\n        }\n        window.addEventListener(\"online\", handleIsOnline);\n        window.addEventListener(\"offline\", handleIsOffline);\n        return ()=>{\n            window.removeEventListener(\"online\", handleIsOnline);\n            window.removeEventListener(\"offline\", handleIsOffline);\n        };\n    }, []);\n    const revalidateCache = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((param)=>{\n        let { shouldDedupe } = param;\n        return _revalidateCache({\n            shouldDedupe,\n            retryCount: 0\n        });\n    }, [\n        _revalidateCache\n    ]);\n    return revalidateCache;\n}\n_s3(useRevalidateCache, \"lMNPttQEfRNxLAEZrsx5FJJ9F2o=\", false, function() {\n    return [\n        react__WEBPACK_IMPORTED_MODULE_0__.useRef,\n        react__WEBPACK_IMPORTED_MODULE_0__.useCallback,\n        react__WEBPACK_IMPORTED_MODULE_0__.useEffect,\n        react__WEBPACK_IMPORTED_MODULE_0__.useCallback\n    ];\n});\nfunction useMutate(manager, revalidateCache) {\n    _s4();\n    const mutate = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (data, options)=>{\n        const beforeMutationTimestamp = ++timestamp;\n        manager.setMutation({\n            startTime: beforeMutationTimestamp,\n            endTime: 0\n        });\n        const currentCache = manager.getCache();\n        manager.setCache(options.optimisticData);\n        let error;\n        try {\n            await data;\n        } catch (err) {\n            error = err;\n        }\n        const activeMutation = manager.getMutation();\n        if (activeMutation && beforeMutationTimestamp !== activeMutation.startTime) {\n            if (error) throw error;\n            return;\n        }\n        if (error) {\n            manager.setCache(currentCache);\n        }\n        manager.setMutation({\n            startTime: beforeMutationTimestamp,\n            endTime: ++timestamp\n        });\n        manager.setRequest(void 0);\n        void revalidateCache({\n            shouldDedupe: false\n        });\n        if (error) throw error;\n    }, [\n        manager,\n        revalidateCache\n    ]);\n    return mutate;\n}\n_s4(useMutate, \"4GWwu+i+RydOvroFphJ3Xw0B5Rk=\", false, function() {\n    return [\n        react__WEBPACK_IMPORTED_MODULE_0__.useCallback\n    ];\n});\n// src/comments/CommentsRoom.tsx\nvar THREAD_ID_PREFIX = \"th\";\nvar COMMENT_ID_PREFIX = \"cm\";\nvar POLLING_INTERVAL_REALTIME = 3e4;\nvar POLLING_INTERVAL = 5e3;\nfunction createCommentsRoom(errorEventSource) {\n    var _s = $RefreshSig$(), _s1 = $RefreshSig$(), _s2 = $RefreshSig$(), _s3 = $RefreshSig$(), _s4 = $RefreshSig$(), _s5 = $RefreshSig$(), _s6 = $RefreshSig$(), _s7 = $RefreshSig$(), _s8 = $RefreshSig$(), _s9 = $RefreshSig$(), _s10 = $RefreshSig$(), _s11 = $RefreshSig$(), _s12 = $RefreshSig$();\n    const store = createClientCacheStore();\n    const FetcherContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\n    const RoomManagerContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\n    function getThreads(manager) {\n        const threads = manager.getCache();\n        if (!threads) {\n            throw new Error(\"Cannot update threads or comments before they are loaded.\");\n        }\n        return threads;\n    }\n    function CommentsRoomProvider(param) {\n        let { room, children } = param;\n        _s();\n        const manager = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n            return createRoomRevalidationManager(room.id, {\n                getCache: store.getThreads,\n                setCache: store.setThreads\n            });\n        }, [\n            room.id\n        ]);\n        const fetcher = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(async ()=>{\n            const options = manager.getRevalidationManagers().filter((param)=>{\n                let [key] = param;\n                return manager.getReferenceCount(key) > 0;\n            }).map((param)=>{\n                let [_, manager2] = param;\n                return manager2.getOptions();\n            });\n            const responses = await Promise.all(options.map(async (option)=>{\n                return await room.getThreads(option);\n            }));\n            const threads = Array.from(new Map(responses.flat().map((thread)=>[\n                    thread.id,\n                    thread\n                ])).values());\n            return threads;\n        }, [\n            room,\n            manager\n        ]);\n        const revalidateCache = useRevalidateCache(manager, fetcher);\n        const status = useSyncExternalStore3(room.events.status.subscribe, room.getStatus, room.getStatus);\n        const isOnline = useIsOnline();\n        const isDocumentVisible = useIsDocumentVisible();\n        const refreshInterval = getPollingInterval(isOnline, isDocumentVisible, status === \"connected\");\n        (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n            let revalidationTimerId;\n            function scheduleRevalidation() {\n                if (refreshInterval === 0) return;\n                revalidationTimerId = window.setTimeout(()=>{\n                    if (isOnline && isDocumentVisible && !manager.getError() && manager.getTotalReferenceCount() > 0) {\n                        void revalidateCache({\n                            shouldDedupe: true\n                        }).then(scheduleRevalidation);\n                        return;\n                    }\n                    scheduleRevalidation();\n                }, refreshInterval);\n            }\n            scheduleRevalidation();\n            return ()=>{\n                window.clearTimeout(revalidationTimerId);\n            };\n        }, [\n            revalidateCache,\n            refreshInterval,\n            isOnline,\n            isDocumentVisible,\n            manager\n        ]);\n        (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n            function handleIsOnline() {\n                if (isDocumentVisible) {\n                    void revalidateCache({\n                        shouldDedupe: true\n                    });\n                }\n            }\n            window.addEventListener(\"online\", handleIsOnline);\n            return ()=>{\n                window.removeEventListener(\"online\", handleIsOnline);\n            };\n        }, [\n            revalidateCache,\n            isDocumentVisible\n        ]);\n        (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n            function handleVisibilityChange() {\n                const isVisible = document.visibilityState === \"visible\";\n                if (isVisible && isOnline) {\n                    void revalidateCache({\n                        shouldDedupe: true\n                    });\n                }\n            }\n            document.addEventListener(\"visibilitychange\", handleVisibilityChange);\n            return ()=>{\n                document.removeEventListener(\"visibilitychange\", handleVisibilityChange);\n            };\n        }, [\n            revalidateCache,\n            isOnline\n        ]);\n        (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n            const unsubscribe = room.events.comments.subscribe(()=>{\n                void revalidateCache({\n                    shouldDedupe: false\n                });\n            });\n            return ()=>{\n                unsubscribe();\n            };\n        }, [\n            room,\n            revalidateCache\n        ]);\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(FetcherContext.Provider, {\n            value: fetcher\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(RoomManagerContext.Provider, {\n            value: manager\n        }, children));\n    }\n    _s(CommentsRoomProvider, \"UDEYKETTioU94ezH6LjOzlyGtlQ=\", false, function() {\n        return [\n            useRevalidateCache,\n            useSyncExternalStore3,\n            useIsOnline,\n            useIsDocumentVisible,\n            react__WEBPACK_IMPORTED_MODULE_0__.useEffect,\n            react__WEBPACK_IMPORTED_MODULE_0__.useEffect,\n            react__WEBPACK_IMPORTED_MODULE_0__.useEffect,\n            react__WEBPACK_IMPORTED_MODULE_0__.useEffect\n        ];\n    });\n    function useRoomManager() {\n        _s1();\n        const manager = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(RoomManagerContext);\n        if (manager === null) {\n            throw new Error(\"CommentsRoomProvider is missing from the React tree.\");\n        }\n        return manager;\n    }\n    _s1(useRoomManager, \"YBMkunL3KLAD6ckxMh6EOjAVXwM=\");\n    function getUseThreadsRevalidationManager(options, roomManager) {\n        const key = (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.stringify)(options);\n        const revalidationManager = roomManager.getRevalidationManager(key);\n        if (!revalidationManager) {\n            const useThreadsRevalidationManager = createUseThreadsRevalidationManager(options, roomManager);\n            roomManager.setRevalidationmanager(key, useThreadsRevalidationManager);\n            return useThreadsRevalidationManager;\n        }\n        return revalidationManager;\n    }\n    function useThreadsFetcher() {\n        _s2();\n        const fetcher = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(FetcherContext);\n        if (fetcher === null) {\n            throw new Error(\"CommentsRoomProvider is missing from the React tree.\");\n        }\n        return fetcher;\n    }\n    _s2(useThreadsFetcher, \"rmppyt6+hzDu/n/ePy8H7MRnOXI=\");\n    function useThreads(room) {\n        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {\n            query: {\n                metadata: {}\n            }\n        };\n        _s3();\n        const key = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>(0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.stringify)(options), [\n            options\n        ]);\n        const manager = useRoomManager();\n        const useThreadsRevalidationManager = getUseThreadsRevalidationManager(options, manager);\n        const fetcher = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(()=>{\n            return room.getThreads(options);\n        }, // eslint-disable-next-line react-hooks/exhaustive-deps -- The missing dependency is `options` but `key` and `normalized` are analogous, so we only include `key` as dependency. This helps minimize the number of re-renders as `options` can change on each render\n        [\n            key,\n            room\n        ]);\n        const revalidateCache = useRevalidateCache(useThreadsRevalidationManager, fetcher);\n        (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n            void revalidateCache({\n                shouldDedupe: true\n            });\n        }, [\n            revalidateCache\n        ]);\n        (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n            manager.incrementReferenceCount(key);\n            return ()=>{\n                manager.decrementReferenceCount(key);\n            };\n        }, [\n            manager,\n            key\n        ]);\n        const cache = _useThreads(room, options);\n        return cache;\n    }\n    _s3(useThreads, \"G41xSiiE7YXsvC/mH5aKH0ev1Uc=\", false, function() {\n        return [\n            useRoomManager,\n            useRevalidateCache,\n            react__WEBPACK_IMPORTED_MODULE_0__.useEffect,\n            react__WEBPACK_IMPORTED_MODULE_0__.useEffect\n        ];\n    });\n    function useThreadsSuspense(room) {\n        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {\n            query: {\n                metadata: {}\n            }\n        };\n        _s4();\n        const key = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>(0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.stringify)(options), [\n            options\n        ]);\n        const manager = useRoomManager();\n        const useThreadsRevalidationManager = getUseThreadsRevalidationManager(options, manager);\n        const fetcher = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(()=>{\n            return room.getThreads(options);\n        }, // eslint-disable-next-line react-hooks/exhaustive-deps -- The missing dependency is `options` but `key` and `normalized` are analogous, so we only include `key` as dependency. This helps minimize the number of re-renders as `options` can change on each render\n        [\n            key,\n            room\n        ]);\n        const revalidateCache = useRevalidateCache(useThreadsRevalidationManager, fetcher);\n        (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n            void revalidateCache({\n                shouldDedupe: true\n            });\n        }, [\n            revalidateCache\n        ]);\n        (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n            manager.incrementReferenceCount(key);\n            return ()=>{\n                manager.decrementReferenceCount(key);\n            };\n        }, [\n            manager,\n            key\n        ]);\n        const cache = _useThreads(room, options);\n        if (cache.error) {\n            throw cache.error;\n        }\n        if (cache.isLoading || !cache.threads) {\n            throw revalidateCache({\n                shouldDedupe: true\n            });\n        }\n        return {\n            isLoading: false,\n            threads: cache.threads,\n            error: cache.error\n        };\n    }\n    _s4(useThreadsSuspense, \"G41xSiiE7YXsvC/mH5aKH0ev1Uc=\", false, function() {\n        return [\n            useRoomManager,\n            useRevalidateCache,\n            react__WEBPACK_IMPORTED_MODULE_0__.useEffect,\n            react__WEBPACK_IMPORTED_MODULE_0__.useEffect\n        ];\n    });\n    function _useThreads(room, options) {\n        _s5();\n        const manager = useRoomManager();\n        const useThreadsRevalidationManager = getUseThreadsRevalidationManager(options, manager);\n        return (0,use_sync_external_store_shim_with_selector_js__WEBPACK_IMPORTED_MODULE_1__.useSyncExternalStoreWithSelector)(store.subscribe, ()=>store.getThreads(), ()=>store.getThreads(), (state)=>{\n            const isLoading = useThreadsRevalidationManager.getIsLoading();\n            if (isLoading) {\n                return {\n                    isLoading: true\n                };\n            }\n            const options2 = useThreadsRevalidationManager.getOptions();\n            const error = useThreadsRevalidationManager.getError();\n            const filtered = state.filter((thread)=>{\n                if (thread.roomId !== room.id) return false;\n                var _options2_query;\n                const query = (_options2_query = options2.query) !== null && _options2_query !== void 0 ? _options2_query : {};\n                for(const key in query.metadata){\n                    if (thread.metadata[key] !== query.metadata[key]) {\n                        return false;\n                    }\n                }\n                return true;\n            });\n            return {\n                isLoading: false,\n                threads: filtered,\n                error\n            };\n        });\n    }\n    _s5(_useThreads, \"fYtPnUVDukHzP43N6vRbVkmZwdQ=\", false, function() {\n        return [\n            useRoomManager,\n            use_sync_external_store_shim_with_selector_js__WEBPACK_IMPORTED_MODULE_1__.useSyncExternalStoreWithSelector\n        ];\n    });\n    function useEditThreadMetadata(room) {\n        _s6();\n        const manager = useRoomManager();\n        const fetcher = useThreadsFetcher();\n        const revalidate = useRevalidateCache(manager, fetcher);\n        const mutate = useMutate(manager, revalidate);\n        const editThreadMetadata = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((options)=>{\n            const threadId = options.threadId;\n            const metadata = \"metadata\" in options ? options.metadata : {};\n            const threads = getThreads(manager);\n            const optimisticData = threads.map((thread)=>thread.id === threadId ? {\n                    ...thread,\n                    metadata: {\n                        ...thread.metadata,\n                        ...metadata\n                    }\n                } : thread);\n            mutate(room.editThreadMetadata({\n                metadata,\n                threadId\n            }), {\n                optimisticData\n            }).catch((err)=>{\n                if (!(err instanceof _liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.CommentsApiError)) {\n                    throw err;\n                }\n                const error = handleCommentsApiError(err);\n                errorEventSource.notify(new EditThreadMetadataError(error, {\n                    roomId: room.id,\n                    threadId,\n                    metadata\n                }));\n            });\n        }, [\n            room,\n            mutate,\n            manager\n        ]);\n        return editThreadMetadata;\n    }\n    _s6(useEditThreadMetadata, \"OTibWRzERC/aaFxWh9IriAzROa4=\", false, function() {\n        return [\n            useRoomManager,\n            useThreadsFetcher,\n            useRevalidateCache,\n            useMutate,\n            react__WEBPACK_IMPORTED_MODULE_0__.useCallback\n        ];\n    });\n    function useCreateThread(room) {\n        _s7();\n        const manager = useRoomManager();\n        const fetcher = useThreadsFetcher();\n        const revalidate = useRevalidateCache(manager, fetcher);\n        const mutate = useMutate(manager, revalidate);\n        const createThread = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((options)=>{\n            const body = options.body;\n            const metadata = \"metadata\" in options ? options.metadata : {};\n            const threads = getThreads(manager);\n            const threadId = createThreadId();\n            const commentId = createCommentId();\n            const now = /* @__PURE__ */ new Date();\n            const newComment = {\n                id: commentId,\n                threadId,\n                roomId: room.id,\n                createdAt: now,\n                type: \"comment\",\n                userId: getCurrentUserId(room),\n                body,\n                reactions: []\n            };\n            const newThread = {\n                id: threadId,\n                type: \"thread\",\n                createdAt: now,\n                roomId: room.id,\n                metadata,\n                comments: [\n                    newComment\n                ]\n            };\n            mutate(room.createThread({\n                threadId,\n                commentId,\n                body,\n                metadata\n            }), {\n                optimisticData: [\n                    ...threads,\n                    newThread\n                ]\n            }).catch((err)=>{\n                if (!(err instanceof _liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.CommentsApiError)) {\n                    throw err;\n                }\n                const error = handleCommentsApiError(err);\n                errorEventSource.notify(new CreateThreadError(error, {\n                    roomId: room.id,\n                    threadId,\n                    commentId,\n                    body,\n                    metadata\n                }));\n            });\n            return newThread;\n        }, [\n            room,\n            mutate,\n            manager\n        ]);\n        return createThread;\n    }\n    _s7(useCreateThread, \"cFAAr8QWtvOaZxi3CDsu9MpXcFc=\", false, function() {\n        return [\n            useRoomManager,\n            useThreadsFetcher,\n            useRevalidateCache,\n            useMutate,\n            react__WEBPACK_IMPORTED_MODULE_0__.useCallback\n        ];\n    });\n    function useCreateComment(room) {\n        _s8();\n        const manager = useRoomManager();\n        const fetcher = useThreadsFetcher();\n        const revalidate = useRevalidateCache(manager, fetcher);\n        const mutate = useMutate(manager, revalidate);\n        const createComment = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((param)=>{\n            let { threadId, body } = param;\n            const threads = getThreads(manager);\n            const commentId = createCommentId();\n            const now = /* @__PURE__ */ new Date();\n            const comment = {\n                id: commentId,\n                threadId,\n                roomId: room.id,\n                type: \"comment\",\n                createdAt: now,\n                userId: getCurrentUserId(room),\n                body,\n                reactions: []\n            };\n            const optimisticData = threads.map((thread)=>thread.id === threadId ? {\n                    ...thread,\n                    comments: [\n                        ...thread.comments,\n                        comment\n                    ]\n                } : thread);\n            mutate(room.createComment({\n                threadId,\n                commentId,\n                body\n            }), {\n                optimisticData\n            }).catch((err)=>{\n                if (!(err instanceof _liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.CommentsApiError)) {\n                    throw err;\n                }\n                const error = handleCommentsApiError(err);\n                errorEventSource.notify(new CreateCommentError(error, {\n                    roomId: room.id,\n                    threadId,\n                    commentId,\n                    body\n                }));\n            });\n            return comment;\n        }, [\n            room,\n            mutate,\n            manager\n        ]);\n        return createComment;\n    }\n    _s8(useCreateComment, \"diY0sNox4pLo+Ywt2rmHeK4TUpU=\", false, function() {\n        return [\n            useRoomManager,\n            useThreadsFetcher,\n            useRevalidateCache,\n            useMutate,\n            react__WEBPACK_IMPORTED_MODULE_0__.useCallback\n        ];\n    });\n    function useEditComment(room) {\n        _s9();\n        const manager = useRoomManager();\n        const fetcher = useThreadsFetcher();\n        const revalidate = useRevalidateCache(manager, fetcher);\n        const mutate = useMutate(manager, revalidate);\n        const editComment = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((param)=>{\n            let { threadId, commentId, body } = param;\n            const threads = getThreads(manager);\n            const now = /* @__PURE__ */ new Date();\n            const optimisticData = threads.map((thread)=>thread.id === threadId ? {\n                    ...thread,\n                    comments: thread.comments.map((comment)=>comment.id === commentId ? {\n                            ...comment,\n                            editedAt: now,\n                            body\n                        } : comment)\n                } : thread);\n            mutate(room.editComment({\n                threadId,\n                commentId,\n                body\n            }), {\n                optimisticData\n            }).catch((err)=>{\n                if (!(err instanceof _liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.CommentsApiError)) {\n                    throw err;\n                }\n                const error = handleCommentsApiError(err);\n                errorEventSource.notify(new EditCommentError(error, {\n                    roomId: room.id,\n                    threadId,\n                    commentId,\n                    body\n                }));\n            });\n        }, [\n            room,\n            mutate,\n            manager\n        ]);\n        return editComment;\n    }\n    _s9(useEditComment, \"QK00uEbTM5dHsNcP2FETFj4XbnQ=\", false, function() {\n        return [\n            useRoomManager,\n            useThreadsFetcher,\n            useRevalidateCache,\n            useMutate,\n            react__WEBPACK_IMPORTED_MODULE_0__.useCallback\n        ];\n    });\n    function useDeleteComment(room) {\n        _s10();\n        const manager = useRoomManager();\n        const fetcher = useThreadsFetcher();\n        const revalidate = useRevalidateCache(manager, fetcher);\n        const mutate = useMutate(manager, revalidate);\n        const deleteComment = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((param)=>{\n            let { threadId, commentId } = param;\n            const threads = getThreads(manager);\n            const now = /* @__PURE__ */ new Date();\n            const newThreads = [];\n            for (const thread of threads){\n                if (thread.id === threadId) {\n                    const newThread = {\n                        ...thread,\n                        comments: thread.comments.map((comment)=>comment.id === commentId ? {\n                                ...comment,\n                                deletedAt: now,\n                                body: void 0\n                            } : comment)\n                    };\n                    if (newThread.comments.some((comment)=>comment.deletedAt === void 0)) {\n                        newThreads.push(newThread);\n                    }\n                } else {\n                    newThreads.push(thread);\n                }\n            }\n            mutate(room.deleteComment({\n                threadId,\n                commentId\n            }), {\n                optimisticData: newThreads\n            }).catch((err)=>{\n                if (!(err instanceof _liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.CommentsApiError)) {\n                    throw err;\n                }\n                const error = handleCommentsApiError(err);\n                errorEventSource.notify(new DeleteCommentError(error, {\n                    roomId: room.id,\n                    threadId,\n                    commentId\n                }));\n            });\n        }, [\n            room,\n            mutate,\n            manager\n        ]);\n        return deleteComment;\n    }\n    _s10(useDeleteComment, \"miNcxkiLHm5okrI+HpEMw0InqWY=\", false, function() {\n        return [\n            useRoomManager,\n            useThreadsFetcher,\n            useRevalidateCache,\n            useMutate,\n            react__WEBPACK_IMPORTED_MODULE_0__.useCallback\n        ];\n    });\n    function useAddReaction(room) {\n        _s11();\n        const manager = useRoomManager();\n        const fetcher = useThreadsFetcher();\n        const revalidate = useRevalidateCache(manager, fetcher);\n        const mutate = useMutate(manager, revalidate);\n        const createComment = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((param)=>{\n            let { threadId, commentId, emoji } = param;\n            const threads = getThreads(manager);\n            const now = /* @__PURE__ */ new Date();\n            const userId = getCurrentUserId(room);\n            const optimisticData = threads.map((thread)=>thread.id === threadId ? {\n                    ...thread,\n                    comments: thread.comments.map((comment)=>{\n                        if (comment.id !== commentId) {\n                            return comment;\n                        }\n                        let reactions;\n                        if (comment.reactions.some((reaction)=>reaction.emoji === emoji)) {\n                            reactions = comment.reactions.map((reaction)=>reaction.emoji === emoji ? {\n                                    ...reaction,\n                                    users: [\n                                        ...reaction.users,\n                                        {\n                                            id: userId\n                                        }\n                                    ]\n                                } : reaction);\n                        } else {\n                            reactions = [\n                                ...comment.reactions,\n                                {\n                                    emoji,\n                                    createdAt: now,\n                                    users: [\n                                        {\n                                            id: userId\n                                        }\n                                    ]\n                                }\n                            ];\n                        }\n                        return {\n                            ...comment,\n                            reactions\n                        };\n                    })\n                } : thread);\n            mutate(room.addReaction({\n                threadId,\n                commentId,\n                emoji\n            }), {\n                optimisticData\n            }).catch((err)=>{\n                if (!(err instanceof _liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.CommentsApiError)) {\n                    throw err;\n                }\n                const error = handleCommentsApiError(err);\n                errorEventSource.notify(new AddReactionError(error, {\n                    roomId: room.id,\n                    threadId,\n                    commentId,\n                    emoji\n                }));\n            });\n        }, [\n            room,\n            mutate,\n            manager\n        ]);\n        return createComment;\n    }\n    _s11(useAddReaction, \"diY0sNox4pLo+Ywt2rmHeK4TUpU=\", false, function() {\n        return [\n            useRoomManager,\n            useThreadsFetcher,\n            useRevalidateCache,\n            useMutate,\n            react__WEBPACK_IMPORTED_MODULE_0__.useCallback\n        ];\n    });\n    function useRemoveReaction(room) {\n        _s12();\n        const manager = useRoomManager();\n        const fetcher = useThreadsFetcher();\n        const revalidate = useRevalidateCache(manager, fetcher);\n        const mutate = useMutate(manager, revalidate);\n        const createComment = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((param)=>{\n            let { threadId, commentId, emoji } = param;\n            const threads = getThreads(manager);\n            const userId = getCurrentUserId(room);\n            const optimisticData = threads.map((thread)=>thread.id === threadId ? {\n                    ...thread,\n                    comments: thread.comments.map((comment)=>{\n                        if (comment.id !== commentId) {\n                            return comment;\n                        }\n                        const reactionIndex = comment.reactions.findIndex((reaction)=>reaction.emoji === emoji);\n                        let reactions = comment.reactions;\n                        if (reactionIndex >= 0 && comment.reactions[reactionIndex].users.some((user)=>user.id === userId)) {\n                            if (comment.reactions[reactionIndex].users.length <= 1) {\n                                reactions = [\n                                    ...comment.reactions\n                                ];\n                                reactions.splice(reactionIndex, 1);\n                            } else {\n                                reactions[reactionIndex] = {\n                                    ...reactions[reactionIndex],\n                                    users: reactions[reactionIndex].users.filter((user)=>user.id !== userId)\n                                };\n                            }\n                        }\n                        return {\n                            ...comment,\n                            reactions\n                        };\n                    })\n                } : thread);\n            mutate(room.removeReaction({\n                threadId,\n                commentId,\n                emoji\n            }), {\n                optimisticData\n            }).catch((err)=>{\n                if (!(err instanceof _liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.CommentsApiError)) {\n                    throw err;\n                }\n                const error = handleCommentsApiError(err);\n                errorEventSource.notify(new RemoveReactionError(error, {\n                    roomId: room.id,\n                    threadId,\n                    commentId,\n                    emoji\n                }));\n            });\n        }, [\n            room,\n            mutate,\n            manager\n        ]);\n        return createComment;\n    }\n    _s12(useRemoveReaction, \"diY0sNox4pLo+Ywt2rmHeK4TUpU=\", false, function() {\n        return [\n            useRoomManager,\n            useThreadsFetcher,\n            useRevalidateCache,\n            useMutate,\n            react__WEBPACK_IMPORTED_MODULE_0__.useCallback\n        ];\n    });\n    return {\n        CommentsRoomProvider,\n        useThreads,\n        useThreadsSuspense,\n        useEditThreadMetadata,\n        useCreateThread,\n        useCreateComment,\n        useEditComment,\n        useDeleteComment,\n        useAddReaction,\n        useRemoveReaction\n    };\n}\nfunction createOptimisticId(prefix) {\n    return \"\".concat(prefix, \"_\").concat((0,nanoid__WEBPACK_IMPORTED_MODULE_4__.nanoid)());\n}\nfunction createThreadId() {\n    return createOptimisticId(THREAD_ID_PREFIX);\n}\nfunction createCommentId() {\n    return createOptimisticId(COMMENT_ID_PREFIX);\n}\nfunction getCurrentUserId(room) {\n    const self = room.getSelf();\n    if (self === null || self.id === void 0) {\n        return \"anonymous\";\n    } else {\n        return self.id;\n    }\n}\nfunction handleCommentsApiError(err) {\n    var _err_details;\n    const message = \"Request failed with status \".concat(err.status, \": \").concat(err.message);\n    if (((_err_details = err.details) === null || _err_details === void 0 ? void 0 : _err_details.error) === \"FORBIDDEN\") {\n        const detailedMessage = [\n            message,\n            err.details.suggestion,\n            err.details.docs\n        ].filter(Boolean).join(\"\\n\");\n        console.error(detailedMessage);\n    }\n    return new Error(message);\n}\nfunction createRoomRevalidationManager(roomId, param) {\n    let { getCache, setCache } = param;\n    let request;\n    let error;\n    let mutation;\n    const revalidationManagerByOptions = /* @__PURE__ */ new Map();\n    const referenceCountByOptions = /* @__PURE__ */ new Map();\n    return {\n        // Cache\n        getCache () {\n            const threads = getCache();\n            const filtered = threads.filter((thread)=>thread.roomId === roomId);\n            return filtered;\n        },\n        setCache (value) {\n            for (const key of revalidationManagerByOptions.keys()){\n                if (referenceCountByOptions.get(key) === 0) {\n                    revalidationManagerByOptions.delete(key);\n                    referenceCountByOptions.delete(key);\n                }\n            }\n            const sorted = value.sort((a, b)=>new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime());\n            const threads = getCache();\n            const newThreads = threads.filter((thread)=>thread.roomId !== roomId).concat(sorted);\n            setCache(newThreads);\n        },\n        // Request\n        getRequest () {\n            return request;\n        },\n        setRequest (value) {\n            request = value;\n        },\n        // Error\n        getError () {\n            return error;\n        },\n        setError (err) {\n            error = err;\n        },\n        // Mutation\n        getMutation () {\n            return mutation;\n        },\n        setMutation (info) {\n            mutation = info;\n        },\n        getRevalidationManagers () {\n            return Array.from(revalidationManagerByOptions.entries());\n        },\n        getRevalidationManager (key) {\n            return revalidationManagerByOptions.get(key);\n        },\n        setRevalidationmanager (key, manager) {\n            revalidationManagerByOptions.set(key, manager);\n        },\n        getTotalReferenceCount () {\n            return Array.from(referenceCountByOptions.values()).reduce((acc, count)=>acc + count, 0);\n        },\n        incrementReferenceCount (key) {\n            var _referenceCountByOptions_get;\n            const count = (_referenceCountByOptions_get = referenceCountByOptions.get(key)) !== null && _referenceCountByOptions_get !== void 0 ? _referenceCountByOptions_get : 0;\n            referenceCountByOptions.set(key, count + 1);\n        },\n        decrementReferenceCount (key) {\n            var _referenceCountByOptions_get;\n            const count = (_referenceCountByOptions_get = referenceCountByOptions.get(key)) !== null && _referenceCountByOptions_get !== void 0 ? _referenceCountByOptions_get : 0;\n            referenceCountByOptions.set(key, count - 1);\n        },\n        getReferenceCount (key) {\n            var _referenceCountByOptions_get;\n            return (_referenceCountByOptions_get = referenceCountByOptions.get(key)) !== null && _referenceCountByOptions_get !== void 0 ? _referenceCountByOptions_get : 0;\n        }\n    };\n}\nfunction createClientCacheStore() {\n    let threads = [];\n    const threadsEventSource = (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.makeEventSource)();\n    return {\n        getThreads () {\n            return threads;\n        },\n        setThreads (value) {\n            threads = value;\n            threadsEventSource.notify(threads);\n        },\n        subscribe (callback) {\n            return threadsEventSource.subscribe(callback);\n        }\n    };\n}\nfunction createUseThreadsRevalidationManager(options, manager) {\n    let isLoading = true;\n    let request;\n    let error;\n    return {\n        // Cache\n        getCache () {\n            return void 0;\n        },\n        setCache (value) {\n            var _manager_getCache;\n            const cache = new Map(((_manager_getCache = manager.getCache()) !== null && _manager_getCache !== void 0 ? _manager_getCache : []).map((thread)=>[\n                    thread.id,\n                    thread\n                ]));\n            for (const thread of value){\n                cache.set(thread.id, thread);\n            }\n            manager.setCache(Array.from(cache.values()));\n            isLoading = false;\n        },\n        // Request\n        getRequest () {\n            return request;\n        },\n        setRequest (value) {\n            request = value;\n        },\n        // Error\n        getError () {\n            return error;\n        },\n        setError (err) {\n            error = err;\n            isLoading = false;\n            const cache = manager.getCache();\n            manager.setCache(cache);\n        },\n        // Mutation\n        getMutation () {\n            return void 0;\n        },\n        setMutation (_) {\n            return;\n        },\n        getOptions () {\n            return options;\n        },\n        getIsLoading () {\n            return isLoading;\n        },\n        setIsLoading (value) {\n            isLoading = value;\n        }\n    };\n}\nfunction getPollingInterval(isBrowserOnline, isDocumentVisible, isRoomConnected) {\n    if (!isBrowserOnline || !isDocumentVisible) return;\n    if (isRoomConnected) return POLLING_INTERVAL_REALTIME;\n    return POLLING_INTERVAL;\n}\n// src/comments/lib/use-debounce.ts\n\nvar DEFAULT_DELAY = 500;\nfunction useDebounce(value) {\n    let delay = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : DEFAULT_DELAY;\n    _s5();\n    const timeout = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    const [debouncedValue, setDebouncedValue] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(value);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (delay === false) {\n            return;\n        }\n        if (timeout.current === void 0) {\n            setDebouncedValue(value);\n        }\n        timeout.current = window.setTimeout(()=>{\n            setDebouncedValue(value);\n            timeout.current = void 0;\n        }, delay);\n        return ()=>{\n            window.clearTimeout(timeout.current);\n        };\n    }, [\n        value,\n        delay\n    ]);\n    return debouncedValue;\n}\n_s5(useDebounce, \"HV5qOmXe5kf4no9PIWBDax5o1Kk=\", false, function() {\n    return [\n        react__WEBPACK_IMPORTED_MODULE_0__.useRef,\n        react__WEBPACK_IMPORTED_MODULE_0__.useState,\n        react__WEBPACK_IMPORTED_MODULE_0__.useEffect\n    ];\n});\n// src/lib/use-async-cache.ts\n\n\n// src/lib/use-initial.ts\n\nfunction useInitial(value) {\n    _s6();\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(value)[0];\n}\n_s6(useInitial, \"Lq3SgvX34KPAnoNPTsuIpUz33b8=\", false, function() {\n    return [\n        react__WEBPACK_IMPORTED_MODULE_0__.useState\n    ];\n});\n// src/lib/use-async-cache.ts\nvar INITIAL_ASYNC_STATE = {\n    isLoading: false,\n    data: void 0,\n    error: void 0\n};\nvar noop = ()=>{};\nfunction useAsyncCache(cache, key, options) {\n    var _previousData_current, _previousData_current1;\n    _s7();\n    const frozenOptions = useInitial(options);\n    const cacheItem = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        if (key === null || !cache) {\n            return null;\n        }\n        const cacheItem2 = cache.create(key);\n        void cacheItem2.get();\n        return cacheItem2;\n    }, [\n        cache,\n        key\n    ]);\n    const subscribe2 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((callback)=>{\n        var _cacheItem_subscribe;\n        return (_cacheItem_subscribe = cacheItem === null || cacheItem === void 0 ? void 0 : cacheItem.subscribe(callback)) !== null && _cacheItem_subscribe !== void 0 ? _cacheItem_subscribe : noop;\n    }, [\n        cacheItem\n    ]);\n    const getState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        var _cacheItem_getState;\n        return (_cacheItem_getState = cacheItem === null || cacheItem === void 0 ? void 0 : cacheItem.getState()) !== null && _cacheItem_getState !== void 0 ? _cacheItem_getState : INITIAL_ASYNC_STATE;\n    }, [\n        cacheItem\n    ]);\n    const revalidate = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>cacheItem === null || cacheItem === void 0 ? void 0 : cacheItem.revalidate(), [\n        cacheItem\n    ]);\n    const state = (0,use_sync_external_store_shim_index_js__WEBPACK_IMPORTED_MODULE_2__.useSyncExternalStore)(subscribe2, getState, getState);\n    const previousData = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    let data = state.data;\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        previousData.current = {\n            key,\n            data: state.data\n        };\n    }, [\n        key,\n        state.data\n    ]);\n    if (!cacheItem) {\n        return {\n            isLoading: false,\n            data: void 0,\n            error: void 0,\n            getState,\n            revalidate\n        };\n    }\n    if (frozenOptions === null || frozenOptions === void 0 ? void 0 : frozenOptions.suspense) {\n        const error = getState().error;\n        if (error) {\n            throw error;\n        } else if (getState().isLoading) {\n            throw new Promise((resolve)=>{\n                cacheItem.subscribeOnce((state2)=>{\n                    if (!state2.isLoading) {\n                        resolve();\n                    }\n                });\n            });\n        }\n    }\n    if (state.isLoading && (frozenOptions === null || frozenOptions === void 0 ? void 0 : frozenOptions.keepPreviousDataWhileLoading) && typeof state.data === \"undefined\" && ((_previousData_current = previousData.current) === null || _previousData_current === void 0 ? void 0 : _previousData_current.key) !== key && typeof ((_previousData_current1 = previousData.current) === null || _previousData_current1 === void 0 ? void 0 : _previousData_current1.data) !== \"undefined\") {\n        data = previousData.current.data;\n    }\n    return {\n        isLoading: state.isLoading,\n        data,\n        error: state.error,\n        getState,\n        revalidate\n    };\n}\n_s7(useAsyncCache, \"zUQ6EZUfCzh2QcdK6ZowCEtVZng=\", false, function() {\n    return [\n        useInitial,\n        react__WEBPACK_IMPORTED_MODULE_0__.useMemo,\n        react__WEBPACK_IMPORTED_MODULE_0__.useCallback,\n        react__WEBPACK_IMPORTED_MODULE_0__.useCallback,\n        react__WEBPACK_IMPORTED_MODULE_0__.useCallback,\n        use_sync_external_store_shim_index_js__WEBPACK_IMPORTED_MODULE_2__.useSyncExternalStore,\n        react__WEBPACK_IMPORTED_MODULE_0__.useRef,\n        react__WEBPACK_IMPORTED_MODULE_0__.useEffect\n    ];\n});\n// src/lib/use-latest.ts\n\nfunction useLatest(value) {\n    _s8();\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(value);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        ref.current = value;\n    }, [\n        value\n    ]);\n    return ref;\n}\n_s8(useLatest, \"a1mvwK9yaYb3uQIJX0cV7QRdeVM=\", false, function() {\n    return [\n        react__WEBPACK_IMPORTED_MODULE_0__.useRef,\n        react__WEBPACK_IMPORTED_MODULE_0__.useEffect\n    ];\n});\n// src/lib/use-rerender.ts\n\nfunction useRerender() {\n    _s9();\n    const [, update] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useReducer)(// This implementation works by incrementing a hidden counter value that is\n    // never consumed. Simply incrementing the counter changes the component's\n    // state and, thus, trigger a re-render.\n    (x)=>x + 1, 0);\n    return update;\n}\n_s9(useRerender, \"OhrQOAn1W/INSRhOrgETZKuOhVA=\");\n// src/factory.tsx\nvar noop2 = ()=>{};\nvar identity = (x)=>x;\nvar missing_unstable_batchedUpdates = (reactVersion, roomId)=>\"We noticed you’re using React \".concat(reactVersion, '. Please pass unstable_batchedUpdates at the RoomProvider level until you’re ready to upgrade to React 18:\\n\\n    import { unstable_batchedUpdates } from \"react-dom\";  // or \"react-native\"\\n\\n    <RoomProvider id=').concat(JSON.stringify(roomId), \" ... unstable_batchedUpdates={unstable_batchedUpdates}>\\n      ...\\n    </RoomProvider>\\n\\nWhy? Please see https://liveblocks.io/docs/platform/troubleshooting#stale-props-zombie-child for more information\");\nvar superfluous_unstable_batchedUpdates = \"You don’t need to pass unstable_batchedUpdates to RoomProvider anymore, since you’re on React 18+ already.\";\nfunction useSyncExternalStore3(s, gs, gss) {\n    _s10();\n    return (0,use_sync_external_store_shim_with_selector_js__WEBPACK_IMPORTED_MODULE_1__.useSyncExternalStoreWithSelector)(s, gs, gss, identity);\n}\n_s10(useSyncExternalStore3, \"EC1G8rw5KMYMXttGdodq1Hr7j5k=\", false, function() {\n    return [\n        use_sync_external_store_shim_with_selector_js__WEBPACK_IMPORTED_MODULE_1__.useSyncExternalStoreWithSelector\n    ];\n});\nvar STABLE_EMPTY_LIST = Object.freeze([]);\nfunction alwaysEmptyList() {\n    return STABLE_EMPTY_LIST;\n}\nfunction alwaysNull() {\n    return null;\n}\nfunction makeMutationContext(room) {\n    const errmsg = \"This mutation cannot be used until connected to the Liveblocks room\";\n    return {\n        get storage () {\n            const mutableRoot = room.getStorageSnapshot();\n            if (mutableRoot === null) {\n                throw new Error(errmsg);\n            }\n            return mutableRoot;\n        },\n        get self () {\n            const self = room.getSelf();\n            if (self === null) {\n                throw new Error(errmsg);\n            }\n            return self;\n        },\n        get others () {\n            const others = room.getOthers();\n            if (room.getSelf() === null) {\n                throw new Error(errmsg);\n            }\n            return others;\n        },\n        setMyPresence: room.updatePresence\n    };\n}\nvar hasWarnedIfNoResolveUsers = false;\nfunction warnIfNoResolveUsers(usersCache) {\n    if (!hasWarnedIfNoResolveUsers && !usersCache && \"development\" !== \"production\") {\n        console.warn(\"Set the resolveUsers option in createRoomContext to specify user info.\");\n        hasWarnedIfNoResolveUsers = true;\n    }\n}\nvar ContextBundle = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(null);\nfunction useRoomContextBundle() {\n    _s11();\n    const bundle = react__WEBPACK_IMPORTED_MODULE_0__.useContext(ContextBundle);\n    if (bundle === null) {\n        throw new Error(\"RoomProvider is missing from the React tree.\");\n    }\n    return bundle;\n}\n_s11(useRoomContextBundle, \"/Yt2TBLkiK+BQAGeiF3IxG9eCZY=\");\nfunction createRoomContext(client, options) {\n    var _s = $RefreshSig$(), _s1 = $RefreshSig$(), _s2 = $RefreshSig$(), _s3 = $RefreshSig$(), _s4 = $RefreshSig$(), _s5 = $RefreshSig$(), _s6 = $RefreshSig$(), _s7 = $RefreshSig$(), _s8 = $RefreshSig$(), _s9 = $RefreshSig$(), _s10 = $RefreshSig$(), _s11 = $RefreshSig$(), _s12 = $RefreshSig$(), _s13 = $RefreshSig$(), _s14 = $RefreshSig$(), _s15 = $RefreshSig$(), _s16 = $RefreshSig$(), _s17 = $RefreshSig$(), _s18 = $RefreshSig$(), _s19 = $RefreshSig$(), _s20 = $RefreshSig$(), _s21 = $RefreshSig$(), _s22 = $RefreshSig$(), _s23 = $RefreshSig$(), _s24 = $RefreshSig$(), _s25 = $RefreshSig$(), _s26 = $RefreshSig$(), _s27 = $RefreshSig$(), _s28 = $RefreshSig$(), _s29 = $RefreshSig$(), _s30 = $RefreshSig$(), _s31 = $RefreshSig$(), _s32 = $RefreshSig$(), _s33 = $RefreshSig$(), _s34 = $RefreshSig$(), _s35 = $RefreshSig$(), _s36 = $RefreshSig$(), _s37 = $RefreshSig$(), _s38 = $RefreshSig$(), _s39 = $RefreshSig$(), _s40 = $RefreshSig$(), _s41 = $RefreshSig$(), _s42 = $RefreshSig$(), _s43 = $RefreshSig$(), _s44 = $RefreshSig$(), _s45 = $RefreshSig$(), _s46 = $RefreshSig$(), _s47 = $RefreshSig$();\n    const RoomContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(null);\n    const commentsErrorEventSource = (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.makeEventSource)();\n    const { CommentsRoomProvider, ...commentsRoom } = createCommentsRoom(commentsErrorEventSource);\n    function RoomProviderOuter(props) {\n        _s();\n        const [cache] = react__WEBPACK_IMPORTED_MODULE_0__.useState(()=>/* @__PURE__ */ new Map());\n        const stableEnterRoom = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((roomId, options2)=>{\n            const cached = cache.get(roomId);\n            if (cached) return cached;\n            const rv = client.enterRoom(roomId, options2);\n            const origLeave = rv.leave;\n            rv.leave = ()=>{\n                origLeave();\n                cache.delete(roomId);\n            };\n            cache.set(roomId, rv);\n            return rv;\n        }, [\n            cache\n        ]);\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(RoomProviderInner, {\n            ...props,\n            stableEnterRoom\n        });\n    }\n    _s(RoomProviderOuter, \"mKddi/3p7+2yJai7e/U3hcSmznE=\");\n    function RoomProviderInner(props) {\n        _s1();\n        const { id: roomId, stableEnterRoom } = props;\n        if (true) {\n            if (!roomId) {\n                throw new Error(\"RoomProvider id property is required. For more information: https://liveblocks.io/docs/errors/liveblocks-react/RoomProvider-id-property-is-required\");\n            }\n            if (typeof roomId !== \"string\") {\n                throw new Error(\"RoomProvider id property should be a string.\");\n            }\n            const majorReactVersion = parseInt(react__WEBPACK_IMPORTED_MODULE_0__.version) || 1;\n            const oldReactVersion = majorReactVersion < 18;\n            (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.errorIf)(oldReactVersion && props.unstable_batchedUpdates === void 0, missing_unstable_batchedUpdates(majorReactVersion, roomId));\n            (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.deprecateIf)(!oldReactVersion && props.unstable_batchedUpdates !== void 0, superfluous_unstable_batchedUpdates);\n        }\n        var _props_autoConnect, _ref;\n        const frozenProps = useInitial({\n            initialPresence: props.initialPresence,\n            initialStorage: props.initialStorage,\n            unstable_batchedUpdates: props.unstable_batchedUpdates,\n            autoConnect: (_ref = (_props_autoConnect = props.autoConnect) !== null && _props_autoConnect !== void 0 ? _props_autoConnect : props.shouldInitiallyConnect) !== null && _ref !== void 0 ? _ref : \"object\" !== \"undefined\"\n        });\n        const [{ room }, setRoomLeavePair] = react__WEBPACK_IMPORTED_MODULE_0__.useState(()=>stableEnterRoom(roomId, {\n                ...frozenProps,\n                autoConnect: false\n            }));\n        react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n            const pair = stableEnterRoom(roomId, frozenProps);\n            setRoomLeavePair(pair);\n            const { room: room2, leave } = pair;\n            if (frozenProps.autoConnect) {\n                room2.connect();\n            }\n            return ()=>{\n                leave();\n            };\n        }, [\n            roomId,\n            frozenProps,\n            stableEnterRoom\n        ]);\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(RoomContext.Provider, {\n            value: room\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(CommentsRoomProvider, {\n            room\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ContextBundle.Provider, {\n            value: internalBundle\n        }, props.children)));\n    }\n    _s1(RoomProviderInner, \"kmyFNYfVjxEECzhCpNH4Ewq/iwo=\", false, function() {\n        return [\n            useInitial\n        ];\n    });\n    function connectionIdSelector(others) {\n        return others.map((user)=>user.connectionId);\n    }\n    function useRoom() {\n        _s2();\n        const room = react__WEBPACK_IMPORTED_MODULE_0__.useContext(RoomContext);\n        if (room === null) {\n            throw new Error(\"RoomProvider is missing from the React tree.\");\n        }\n        return room;\n    }\n    _s2(useRoom, \"8pzZl8Wn+Ru3GugNYlOVJR39oTA=\");\n    function useStatus() {\n        _s3();\n        const room = useRoom();\n        const subscribe2 = room.events.status.subscribe;\n        const getSnapshot2 = room.getStatus;\n        const getServerSnapshot = room.getStatus;\n        return useSyncExternalStore3(subscribe2, getSnapshot2, getServerSnapshot);\n    }\n    _s3(useStatus, \"OdNXbdzQRLrJA+fG9mgW2ld2gGc=\", false, function() {\n        return [\n            useRoom,\n            useSyncExternalStore3\n        ];\n    });\n    function useMyPresence() {\n        _s4();\n        const room = useRoom();\n        const subscribe2 = room.events.myPresence.subscribe;\n        const getSnapshot2 = room.getPresence;\n        const presence = useSyncExternalStore3(subscribe2, getSnapshot2, getSnapshot2);\n        const setPresence = room.updatePresence;\n        return [\n            presence,\n            setPresence\n        ];\n    }\n    _s4(useMyPresence, \"4ZrYwbtaxyk9SI5C92C78vRsNdU=\", false, function() {\n        return [\n            useRoom,\n            useSyncExternalStore3\n        ];\n    });\n    function useUpdateMyPresence() {\n        _s5();\n        return useRoom().updatePresence;\n    }\n    _s5(useUpdateMyPresence, \"FxiKrJOMJJNhaRQQz0EOlEBhEog=\", false, function() {\n        return [\n            useRoom\n        ];\n    });\n    function useOthers(selector, isEqual) {\n        _s6();\n        const room = useRoom();\n        const subscribe2 = room.events.others.subscribe;\n        const getSnapshot2 = room.getOthers;\n        const getServerSnapshot = alwaysEmptyList;\n        return (0,use_sync_external_store_shim_with_selector_js__WEBPACK_IMPORTED_MODULE_1__.useSyncExternalStoreWithSelector)(subscribe2, getSnapshot2, getServerSnapshot, selector !== null && selector !== void 0 ? selector : identity, isEqual);\n    }\n    _s6(useOthers, \"wzDTGbE0RFy0tOTusrlT61JxYmA=\", false, function() {\n        return [\n            useRoom,\n            use_sync_external_store_shim_with_selector_js__WEBPACK_IMPORTED_MODULE_1__.useSyncExternalStoreWithSelector\n        ];\n    });\n    function useOthersConnectionIds() {\n        _s7();\n        return useOthers(connectionIdSelector, _liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.shallow);\n    }\n    _s7(useOthersConnectionIds, \"6jB4CmiADvy0x5yMLb1ArTc/siU=\", false, function() {\n        return [\n            useOthers\n        ];\n    });\n    function useOthersMapped(itemSelector, itemIsEqual) {\n        _s8();\n        const wrappedSelector = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((others)=>others.map((other)=>[\n                    other.connectionId,\n                    itemSelector(other)\n                ]), [\n            itemSelector\n        ]);\n        const wrappedIsEqual = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((a, b)=>{\n            const eq = itemIsEqual !== null && itemIsEqual !== void 0 ? itemIsEqual : Object.is;\n            return a.length === b.length && a.every((atuple, index)=>{\n                const btuple = b[index];\n                return atuple[0] === btuple[0] && eq(atuple[1], btuple[1]);\n            });\n        }, [\n            itemIsEqual\n        ]);\n        return useOthers(wrappedSelector, wrappedIsEqual);\n    }\n    _s8(useOthersMapped, \"QVo/xWftrYyzYLUmcqVZUiiRPdw=\", false, function() {\n        return [\n            useOthers\n        ];\n    });\n    const NOT_FOUND = Symbol();\n    function useOther(connectionId, selector, isEqual) {\n        _s9();\n        const wrappedSelector = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((others)=>{\n            const other2 = others.find((other3)=>other3.connectionId === connectionId);\n            return other2 !== void 0 ? selector(other2) : NOT_FOUND;\n        }, [\n            connectionId,\n            selector\n        ]);\n        const wrappedIsEqual = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((prev, curr)=>{\n            if (prev === NOT_FOUND || curr === NOT_FOUND) {\n                return prev === curr;\n            }\n            const eq = isEqual !== null && isEqual !== void 0 ? isEqual : Object.is;\n            return eq(prev, curr);\n        }, [\n            isEqual\n        ]);\n        const other = useOthers(wrappedSelector, wrappedIsEqual);\n        if (other === NOT_FOUND) {\n            throw new Error(\"No such other user with connection id \".concat(connectionId, \" exists\"));\n        }\n        return other;\n    }\n    _s9(useOther, \"9iZgjSXiCys5UFZauLNwjMbsrjo=\", false, function() {\n        return [\n            useOthers\n        ];\n    });\n    function useBroadcastEvent() {\n        _s10();\n        const room = useRoom();\n        return react__WEBPACK_IMPORTED_MODULE_0__.useCallback(function(event) {\n            let options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {\n                shouldQueueEventIfNotReady: false\n            };\n            room.broadcastEvent(event, options2);\n        }, [\n            room\n        ]);\n    }\n    _s10(useBroadcastEvent, \"mRjfZCZLIOt9iOyXufGWtKsUM38=\", false, function() {\n        return [\n            useRoom\n        ];\n    });\n    function useOthersListener(callback) {\n        _s11();\n        const room = useRoom();\n        const savedCallback = useLatest(callback);\n        react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>room.events.others.subscribe((event)=>savedCallback.current(event)), [\n            room,\n            savedCallback\n        ]);\n    }\n    _s11(useOthersListener, \"pVgeNp/NR8vr1KFBM1x9XIErS1Y=\", false, function() {\n        return [\n            useRoom,\n            useLatest\n        ];\n    });\n    function useLostConnectionListener(callback) {\n        _s12();\n        const room = useRoom();\n        const savedCallback = useLatest(callback);\n        react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>room.events.lostConnection.subscribe((event)=>savedCallback.current(event)), [\n            room,\n            savedCallback\n        ]);\n    }\n    _s12(useLostConnectionListener, \"pVgeNp/NR8vr1KFBM1x9XIErS1Y=\", false, function() {\n        return [\n            useRoom,\n            useLatest\n        ];\n    });\n    function useErrorListener(callback) {\n        _s13();\n        const room = useRoom();\n        const savedCallback = useLatest(callback);\n        react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>room.events.error.subscribe((e)=>savedCallback.current(e)), [\n            room,\n            savedCallback\n        ]);\n    }\n    _s13(useErrorListener, \"pVgeNp/NR8vr1KFBM1x9XIErS1Y=\", false, function() {\n        return [\n            useRoom,\n            useLatest\n        ];\n    });\n    function useEventListener(callback) {\n        _s14();\n        const room = useRoom();\n        const savedCallback = useLatest(callback);\n        react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n            const listener = (eventData)=>{\n                savedCallback.current(eventData);\n            };\n            return room.events.customEvent.subscribe(listener);\n        }, [\n            room,\n            savedCallback\n        ]);\n    }\n    _s14(useEventListener, \"pVgeNp/NR8vr1KFBM1x9XIErS1Y=\", false, function() {\n        return [\n            useRoom,\n            useLatest\n        ];\n    });\n    function useSelf(maybeSelector, isEqual) {\n        _s15();\n        const room = useRoom();\n        const subscribe2 = room.events.self.subscribe;\n        const getSnapshot2 = room.getSelf;\n        const selector = maybeSelector !== null && maybeSelector !== void 0 ? maybeSelector : identity;\n        const wrappedSelector = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((me)=>me !== null ? selector(me) : null, [\n            selector\n        ]);\n        const getServerSnapshot = alwaysNull;\n        return (0,use_sync_external_store_shim_with_selector_js__WEBPACK_IMPORTED_MODULE_1__.useSyncExternalStoreWithSelector)(subscribe2, getSnapshot2, getServerSnapshot, wrappedSelector, isEqual);\n    }\n    _s15(useSelf, \"f6H1LHeDifHCBxYaDVND0KejjWE=\", false, function() {\n        return [\n            useRoom,\n            use_sync_external_store_shim_with_selector_js__WEBPACK_IMPORTED_MODULE_1__.useSyncExternalStoreWithSelector\n        ];\n    });\n    function useMutableStorageRoot() {\n        _s16();\n        const room = useRoom();\n        const subscribe2 = room.events.storageDidLoad.subscribeOnce;\n        const getSnapshot2 = room.getStorageSnapshot;\n        const getServerSnapshot = alwaysNull;\n        return useSyncExternalStore3(subscribe2, getSnapshot2, getServerSnapshot);\n    }\n    _s16(useMutableStorageRoot, \"OdNXbdzQRLrJA+fG9mgW2ld2gGc=\", false, function() {\n        return [\n            useRoom,\n            useSyncExternalStore3\n        ];\n    });\n    function useStorageRoot() {\n        _s17();\n        return [\n            useMutableStorageRoot()\n        ];\n    }\n    _s17(useStorageRoot, \"ScjpHkLIwcJwYDu1t5uCS240Fs8=\", false, function() {\n        return [\n            useMutableStorageRoot\n        ];\n    });\n    function useHistory() {\n        _s18();\n        return useRoom().history;\n    }\n    _s18(useHistory, \"FxiKrJOMJJNhaRQQz0EOlEBhEog=\", false, function() {\n        return [\n            useRoom\n        ];\n    });\n    function useUndo() {\n        _s19();\n        return useHistory().undo;\n    }\n    _s19(useUndo, \"ebO9cvF3Ou0GZnyLIaifBK5vWck=\", false, function() {\n        return [\n            useHistory\n        ];\n    });\n    function useRedo() {\n        _s20();\n        return useHistory().redo;\n    }\n    _s20(useRedo, \"ebO9cvF3Ou0GZnyLIaifBK5vWck=\", false, function() {\n        return [\n            useHistory\n        ];\n    });\n    function useCanUndo() {\n        _s21();\n        const room = useRoom();\n        const subscribe2 = room.events.history.subscribe;\n        const canUndo = room.history.canUndo;\n        return useSyncExternalStore3(subscribe2, canUndo, canUndo);\n    }\n    _s21(useCanUndo, \"OdNXbdzQRLrJA+fG9mgW2ld2gGc=\", false, function() {\n        return [\n            useRoom,\n            useSyncExternalStore3\n        ];\n    });\n    function useCanRedo() {\n        _s22();\n        const room = useRoom();\n        const subscribe2 = room.events.history.subscribe;\n        const canRedo = room.history.canRedo;\n        return useSyncExternalStore3(subscribe2, canRedo, canRedo);\n    }\n    _s22(useCanRedo, \"OdNXbdzQRLrJA+fG9mgW2ld2gGc=\", false, function() {\n        return [\n            useRoom,\n            useSyncExternalStore3\n        ];\n    });\n    function useBatch() {\n        _s23();\n        return useRoom().batch;\n    }\n    _s23(useBatch, \"FxiKrJOMJJNhaRQQz0EOlEBhEog=\", false, function() {\n        return [\n            useRoom\n        ];\n    });\n    function useLegacyKey(key) {\n        _s24();\n        const room = useRoom();\n        const rootOrNull = useMutableStorageRoot();\n        const rerender = useRerender();\n        react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n            if (rootOrNull === null) {\n                return;\n            }\n            const root = rootOrNull;\n            let unsubCurr;\n            let curr = root.get(key);\n            function subscribeToCurr() {\n                unsubCurr = (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.isLiveNode)(curr) ? room.subscribe(curr, rerender) : void 0;\n            }\n            function onRootChange() {\n                const newValue = root.get(key);\n                if (newValue !== curr) {\n                    unsubCurr === null || unsubCurr === void 0 ? void 0 : unsubCurr();\n                    curr = newValue;\n                    subscribeToCurr();\n                    rerender();\n                }\n            }\n            subscribeToCurr();\n            rerender();\n            const unsubscribeRoot = room.subscribe(root, onRootChange);\n            return ()=>{\n                unsubscribeRoot();\n                unsubCurr === null || unsubCurr === void 0 ? void 0 : unsubCurr();\n            };\n        }, [\n            rootOrNull,\n            room,\n            key,\n            rerender\n        ]);\n        if (rootOrNull === null) {\n            return null;\n        } else {\n            return rootOrNull.get(key);\n        }\n    }\n    _s24(useLegacyKey, \"Jcr1Y5ArKo4MfMC3Yie4xsFig0A=\", false, function() {\n        return [\n            useRoom,\n            useMutableStorageRoot,\n            useRerender\n        ];\n    });\n    function useStorage(selector, isEqual) {\n        _s25();\n        const room = useRoom();\n        const rootOrNull = useMutableStorageRoot();\n        const wrappedSelector = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((rootOrNull2)=>rootOrNull2 !== null ? selector(rootOrNull2) : null, [\n            selector\n        ]);\n        const subscribe2 = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((onStoreChange)=>rootOrNull !== null ? room.subscribe(rootOrNull, onStoreChange, {\n                isDeep: true\n            }) : noop2, [\n            room,\n            rootOrNull\n        ]);\n        const getSnapshot2 = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(()=>{\n            if (rootOrNull === null) {\n                return null;\n            } else {\n                const root = rootOrNull;\n                const imm = root.toImmutable();\n                return imm;\n            }\n        }, [\n            rootOrNull\n        ]);\n        const getServerSnapshot = alwaysNull;\n        return (0,use_sync_external_store_shim_with_selector_js__WEBPACK_IMPORTED_MODULE_1__.useSyncExternalStoreWithSelector)(subscribe2, getSnapshot2, getServerSnapshot, wrappedSelector, isEqual);\n    }\n    _s25(useStorage, \"IN17QOwcHbvLZJFho2jFscicPEU=\", false, function() {\n        return [\n            useRoom,\n            useMutableStorageRoot,\n            use_sync_external_store_shim_with_selector_js__WEBPACK_IMPORTED_MODULE_1__.useSyncExternalStoreWithSelector\n        ];\n    });\n    function ensureNotServerSide() {\n        if (false) {}\n    }\n    function useSuspendUntilStorageLoaded() {\n        _s26();\n        const room = useRoom();\n        if (room.getStorageSnapshot() !== null) {\n            return;\n        }\n        ensureNotServerSide();\n        throw new Promise((res)=>{\n            room.events.storageDidLoad.subscribeOnce(()=>res());\n        });\n    }\n    _s26(useSuspendUntilStorageLoaded, \"5S+JyCCayKN2MtiKPOSRKS71F0s=\", false, function() {\n        return [\n            useRoom\n        ];\n    });\n    function useSuspendUntilPresenceLoaded() {\n        _s27();\n        const room = useRoom();\n        if (room.getSelf() !== null) {\n            return;\n        }\n        ensureNotServerSide();\n        throw new Promise((res)=>{\n            room.events.self.subscribeOnce(()=>res());\n            room.events.status.subscribeOnce(()=>res());\n        });\n    }\n    _s27(useSuspendUntilPresenceLoaded, \"5S+JyCCayKN2MtiKPOSRKS71F0s=\", false, function() {\n        return [\n            useRoom\n        ];\n    });\n    function useMutation(callback, deps) {\n        _s28();\n        const room = useRoom();\n        return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n            return function() {\n                for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                    args[_key] = arguments[_key];\n                }\n                return(// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                room.batch(()=>// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                    callback(makeMutationContext(room), ...args)));\n            };\n        }, // eslint-disable-next-line react-hooks/exhaustive-deps\n        [\n            room,\n            ...deps\n        ]);\n    }\n    _s28(useMutation, \"UIS+w5CDyOyk6Qsa0iFAjGNrJxA=\", false, function() {\n        return [\n            useRoom\n        ];\n    });\n    function useStorageSuspense(selector, isEqual) {\n        _s29();\n        useSuspendUntilStorageLoaded();\n        return useStorage(selector, isEqual);\n    }\n    _s29(useStorageSuspense, \"ufHq6RVDBh54qc/BvISf00FLxV0=\", false, function() {\n        return [\n            useSuspendUntilStorageLoaded,\n            useStorage\n        ];\n    });\n    function useSelfSuspense(selector, isEqual) {\n        _s30();\n        useSuspendUntilPresenceLoaded();\n        return useSelf(selector, isEqual);\n    }\n    _s30(useSelfSuspense, \"BgLte48ji+6JvKhVuqCKetBzjDw=\", false, function() {\n        return [\n            useSuspendUntilPresenceLoaded,\n            useSelf\n        ];\n    });\n    function useOthersSuspense(selector, isEqual) {\n        _s31();\n        useSuspendUntilPresenceLoaded();\n        return useOthers(selector, isEqual);\n    }\n    _s31(useOthersSuspense, \"tgwOdB3IIxS+X2oeFCV6cWMZDcg=\", false, function() {\n        return [\n            useSuspendUntilPresenceLoaded,\n            useOthers\n        ];\n    });\n    function useOthersConnectionIdsSuspense() {\n        _s32();\n        useSuspendUntilPresenceLoaded();\n        return useOthersConnectionIds();\n    }\n    _s32(useOthersConnectionIdsSuspense, \"BffsyqAH7fc+aZC9vagFs5jiTu4=\", false, function() {\n        return [\n            useSuspendUntilPresenceLoaded,\n            useOthersConnectionIds\n        ];\n    });\n    function useOthersMappedSuspense(itemSelector, itemIsEqual) {\n        _s33();\n        useSuspendUntilPresenceLoaded();\n        return useOthersMapped(itemSelector, itemIsEqual);\n    }\n    _s33(useOthersMappedSuspense, \"J+5f7Iz6l6KRz7hpbMcA7i42zPc=\", false, function() {\n        return [\n            useSuspendUntilPresenceLoaded,\n            useOthersMapped\n        ];\n    });\n    function useOtherSuspense(connectionId, selector, isEqual) {\n        _s34();\n        useSuspendUntilPresenceLoaded();\n        return useOther(connectionId, selector, isEqual);\n    }\n    _s34(useOtherSuspense, \"sSBwliR/JAo6HptIb+i+vJMr9hk=\", false, function() {\n        return [\n            useSuspendUntilPresenceLoaded,\n            useOther\n        ];\n    });\n    function useLegacyKeySuspense(key) {\n        _s35();\n        useSuspendUntilStorageLoaded();\n        return useLegacyKey(key);\n    }\n    _s35(useLegacyKeySuspense, \"yueVrdGi24iMN//WrvZxeaFAsDg=\", false, function() {\n        return [\n            useSuspendUntilStorageLoaded,\n            useLegacyKey\n        ];\n    });\n    function useThreads(options2) {\n        _s36();\n        const room = useRoom();\n        return commentsRoom.useThreads(room, options2);\n    }\n    _s36(useThreads, \"o+WFlB5hSuYG/PHlCbTY/mx/TJw=\", false, function() {\n        return [\n            useRoom,\n            commentsRoom.useThreads\n        ];\n    });\n    function useThreadsSuspense(options2) {\n        _s37();\n        const room = useRoom();\n        return commentsRoom.useThreadsSuspense(room, options2);\n    }\n    _s37(useThreadsSuspense, \"STT/yFUxKr4r1muYxSpwQAHys8s=\", false, function() {\n        return [\n            useRoom,\n            commentsRoom.useThreadsSuspense\n        ];\n    });\n    function useCreateThread() {\n        _s38();\n        const room = useRoom();\n        return commentsRoom.useCreateThread(room);\n    }\n    _s38(useCreateThread, \"2iPVHh8qy0aDUrmToyuLR21t03M=\", false, function() {\n        return [\n            useRoom,\n            commentsRoom.useCreateThread\n        ];\n    });\n    function useEditThreadMetadata() {\n        _s39();\n        const room = useRoom();\n        return commentsRoom.useEditThreadMetadata(room);\n    }\n    _s39(useEditThreadMetadata, \"2mGozCN26yJEcdaWATs/tKHqZro=\", false, function() {\n        return [\n            useRoom,\n            commentsRoom.useEditThreadMetadata\n        ];\n    });\n    function useAddReaction() {\n        _s40();\n        const room = useRoom();\n        return commentsRoom.useAddReaction(room);\n    }\n    _s40(useAddReaction, \"F7SF14gXcfzSmD8Gzr1LqgKAUJk=\", false, function() {\n        return [\n            useRoom,\n            commentsRoom.useAddReaction\n        ];\n    });\n    function useRemoveReaction() {\n        _s41();\n        const room = useRoom();\n        return commentsRoom.useRemoveReaction(room);\n    }\n    _s41(useRemoveReaction, \"M93dOr7m4KfFcayxIUneQE0lTdM=\", false, function() {\n        return [\n            useRoom,\n            commentsRoom.useRemoveReaction\n        ];\n    });\n    function useCreateComment() {\n        _s42();\n        const room = useRoom();\n        return commentsRoom.useCreateComment(room);\n    }\n    _s42(useCreateComment, \"8trAUQ2X3TtYFUPxQ48hgUgzFY4=\", false, function() {\n        return [\n            useRoom,\n            commentsRoom.useCreateComment\n        ];\n    });\n    function useEditComment() {\n        _s43();\n        const room = useRoom();\n        return commentsRoom.useEditComment(room);\n    }\n    _s43(useEditComment, \"qzpraICj4araHhBfu/Y5GiNNajU=\", false, function() {\n        return [\n            useRoom,\n            commentsRoom.useEditComment\n        ];\n    });\n    function useDeleteComment() {\n        _s44();\n        const room = useRoom();\n        return commentsRoom.useDeleteComment(room);\n    }\n    _s44(useDeleteComment, \"UvRBKjJcTCcGC5h+mF2Ag6Xvn7w=\", false, function() {\n        return [\n            useRoom,\n            commentsRoom.useDeleteComment\n        ];\n    });\n    const { resolveUsers, resolveMentionSuggestions } = options !== null && options !== void 0 ? options : {};\n    const usersCache = resolveUsers ? (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.createAsyncCache)(async (stringifiedOptions)=>{\n        const users = await resolveUsers(JSON.parse(stringifiedOptions));\n        return users === null || users === void 0 ? void 0 : users[0];\n    }) : void 0;\n    function useUser(userId) {\n        _s45();\n        const room = useRoom();\n        const resolverKey = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.stringify)({\n                userIds: [\n                    userId\n                ],\n                roomId: room.id\n            }), [\n            userId,\n            room.id\n        ]);\n        const state = useAsyncCache(usersCache, resolverKey);\n        react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>warnIfNoResolveUsers(usersCache), []);\n        if (state.isLoading) {\n            return {\n                isLoading: true\n            };\n        } else {\n            return {\n                user: state.data,\n                error: state.error,\n                isLoading: false\n            };\n        }\n    }\n    _s45(useUser, \"rJ/lBuWLnN7/xOnx6ttTQqx+560=\", false, function() {\n        return [\n            useRoom,\n            useAsyncCache\n        ];\n    });\n    function useUserSuspense(userId) {\n        _s46();\n        const room = useRoom();\n        const resolverKey = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.stringify)({\n                userIds: [\n                    userId\n                ],\n                roomId: room.id\n            }), [\n            userId,\n            room.id\n        ]);\n        const state = useAsyncCache(usersCache, resolverKey, {\n            suspense: true\n        });\n        react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>warnIfNoResolveUsers(usersCache), []);\n        return {\n            user: state.data,\n            isLoading: false\n        };\n    }\n    _s46(useUserSuspense, \"rJ/lBuWLnN7/xOnx6ttTQqx+560=\", false, function() {\n        return [\n            useRoom,\n            useAsyncCache\n        ];\n    });\n    const mentionSuggestionsCache = (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.createAsyncCache)(resolveMentionSuggestions ? (stringifiedOptions)=>{\n        return resolveMentionSuggestions(JSON.parse(stringifiedOptions));\n    } : ()=>Promise.resolve([]));\n    function useMentionSuggestions(search) {\n        _s47();\n        const room = useRoom();\n        const debouncedSearch = useDebounce(search, 500);\n        const resolverKey = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>debouncedSearch !== void 0 ? (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.stringify)({\n                text: debouncedSearch,\n                roomId: room.id\n            }) : null, [\n            debouncedSearch,\n            room.id\n        ]);\n        const { data } = useAsyncCache(mentionSuggestionsCache, resolverKey, {\n            keepPreviousDataWhileLoading: true\n        });\n        return data;\n    }\n    _s47(useMentionSuggestions, \"unluCUgg5gW3RfiuGuQwUOY6mnU=\", false, function() {\n        return [\n            useRoom,\n            useDebounce,\n            useAsyncCache\n        ];\n    });\n    const bundle = {\n        RoomContext,\n        RoomProvider: RoomProviderOuter,\n        useRoom,\n        useStatus,\n        useBatch,\n        useBroadcastEvent,\n        useOthersListener,\n        useLostConnectionListener,\n        useErrorListener,\n        useEventListener,\n        useHistory,\n        useUndo,\n        useRedo,\n        useCanRedo,\n        useCanUndo,\n        // These are just aliases. The passed-in key will define their return values.\n        useList: useLegacyKey,\n        useMap: useLegacyKey,\n        useObject: useLegacyKey,\n        useStorageRoot,\n        useStorage,\n        useSelf,\n        useMyPresence,\n        useUpdateMyPresence,\n        useOthers,\n        useOthersMapped,\n        useOthersConnectionIds,\n        useOther,\n        useMutation,\n        useThreads,\n        useUser,\n        useCreateThread,\n        useEditThreadMetadata,\n        useCreateComment,\n        useEditComment,\n        useDeleteComment,\n        useAddReaction,\n        useRemoveReaction,\n        suspense: {\n            RoomContext,\n            RoomProvider: RoomProviderOuter,\n            useRoom,\n            useStatus,\n            useBatch,\n            useBroadcastEvent,\n            useOthersListener,\n            useLostConnectionListener,\n            useErrorListener,\n            useEventListener,\n            useHistory,\n            useUndo,\n            useRedo,\n            useCanRedo,\n            useCanUndo,\n            // Legacy hooks\n            useList: useLegacyKeySuspense,\n            useMap: useLegacyKeySuspense,\n            useObject: useLegacyKeySuspense,\n            useStorageRoot,\n            useStorage: useStorageSuspense,\n            useSelf: useSelfSuspense,\n            useMyPresence,\n            useUpdateMyPresence,\n            useOthers: useOthersSuspense,\n            useOthersMapped: useOthersMappedSuspense,\n            useOthersConnectionIds: useOthersConnectionIdsSuspense,\n            useOther: useOtherSuspense,\n            useMutation,\n            useThreads: useThreadsSuspense,\n            useUser: useUserSuspense,\n            useCreateThread,\n            useEditThreadMetadata,\n            useCreateComment,\n            useEditComment,\n            useDeleteComment,\n            useAddReaction,\n            useRemoveReaction\n        }\n    };\n    const internalBundle = {\n        ...bundle,\n        hasResolveMentionSuggestions: resolveMentionSuggestions !== void 0,\n        useMentionSuggestions\n    };\n    return bundle;\n}\n// src/index.ts\n\n(0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.detectDupes)(PKG_NAME, PKG_VERSION, PKG_FORMAT);\n //# sourceMappingURL=index.mjs.map\nvar _c;\n$RefreshReg$(_c, \"ClientSideSuspense\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AbGl2ZWJsb2Nrcy9yZWFjdC9kaXN0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBRUEsZUFBZTtBQUNnQztBQUUvQyxpQkFBaUI7QUFDakIsSUFBSUMsV0FBVztBQUNmLElBQUlDLGNBQWM7QUFDbEIsSUFBSUMsYUFBYTtBQUVqQiw2QkFBNkI7QUFDRTtBQUMvQixTQUFTRSxtQkFBbUJDLEtBQUs7O0lBQy9CLE1BQU0sQ0FBQ0MsU0FBU0MsV0FBVyxHQUFHSiwyQ0FBYyxDQUFDO0lBQzdDQSw0Q0FBZSxDQUFDO1FBQ2RJLFdBQVc7SUFDYixHQUFHLEVBQUU7SUFDTCxPQUFPLGFBQWEsaUJBQUdKLGdEQUFtQixDQUFDQSwyQ0FBYyxFQUFFO1FBQUVTLFVBQVVQLE1BQU1PLFFBQVE7SUFBQyxHQUFHTixVQUFVRCxNQUFNUSxRQUFRLEtBQUtSLE1BQU1PLFFBQVE7QUFDdEk7R0FOU1I7S0FBQUE7QUFRVCxrQkFBa0I7QUFDMkI7QUFRbkI7QUFDTTtBQUNzRztBQUV0SSxnQ0FBZ0M7QUFDZ0Q7QUFDaEQ7QUFPakI7QUFDa0Y7QUFFakcseUJBQXlCO0FBQ3pCLElBQUkrQixvQkFBb0IsY0FBY0M7SUFDcENDLFlBQVlDLEtBQUssRUFBRUMsT0FBTyxDQUFFO1FBQzFCLEtBQUssQ0FBQztRQUNOLElBQUksQ0FBQ0QsS0FBSyxHQUFHQTtRQUNiLElBQUksQ0FBQ0MsT0FBTyxHQUFHQTtRQUNmLElBQUksQ0FBQ0MsSUFBSSxHQUFHO0lBQ2Q7QUFDRjtBQUNBLElBQUlDLDBCQUEwQixjQUFjTDtJQUMxQ0MsWUFBWUMsS0FBSyxFQUFFQyxPQUFPLENBQUU7UUFDMUIsS0FBSyxDQUFDO1FBQ04sSUFBSSxDQUFDRCxLQUFLLEdBQUdBO1FBQ2IsSUFBSSxDQUFDQyxPQUFPLEdBQUdBO1FBQ2YsSUFBSSxDQUFDQyxJQUFJLEdBQUc7SUFDZDtBQUNGO0FBQ0EsSUFBSUUscUJBQXFCLGNBQWNOO0lB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WUFDQUM7WUFDQThEO1lBQ0E5QjtZQUNBSTtZQUNBRTtZQUNBRTtZQUNBRTtZQUNBVTtZQUNBRTtZQUNBRTtZQUNBSTtZQUNBRjtZQUNBLGVBQWU7WUFDZmdELFNBQVNmO1lBQ1RnQixRQUFRaEI7WUFDUmlCLFdBQVdqQjtZQUNYeEM7WUFDQXNCLFlBQVlZO1lBQ1p2QyxTQUFTd0M7WUFDVHBGO1lBQ0FLO1lBQ0FDLFdBQVcrRTtZQUNYM0UsaUJBQWlCNkU7WUFDakI5RSx3QkFBd0I2RTtZQUN4QjlELFVBQVVnRTtZQUNWUjtZQUNBclIsWUFBWU87WUFDWjRSLFNBQVNHO1lBQ1RqUjtZQUNBUDtZQUNBc0I7WUFDQUc7WUFDQUc7WUFDQU07WUFDQUs7UUFDRjtJQUNGO0lBQ0EsTUFBTTBJLGlCQUFpQjtRQUNyQixHQUFHNUIsTUFBTTtRQUNUNkksOEJBQThCaEIsOEJBQThCLEtBQUs7UUFDakVRO0lBQ0Y7SUFDQSxPQUFPckk7QUFDVDtBQUVBLGVBQWU7QUFDMEM7QUFDekRyViw2REFBV0EsQ0FBQ0MsVUFBVUMsYUFBYUM7QUFNakMsQ0FDRixrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BsaXZlYmxvY2tzL3JlYWN0L2Rpc3QvaW5kZXgubWpzP2NkMzkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2UgY2xpZW50XCI7XG5cbi8vIHNyYy9pbmRleC50c1xuaW1wb3J0IHsgZGV0ZWN0RHVwZXMgfSBmcm9tIFwiQGxpdmVibG9ja3MvY29yZVwiO1xuXG4vLyBzcmMvdmVyc2lvbi50c1xudmFyIFBLR19OQU1FID0gXCJAbGl2ZWJsb2Nrcy9yZWFjdFwiO1xudmFyIFBLR19WRVJTSU9OID0gXCIxLjkuN1wiO1xudmFyIFBLR19GT1JNQVQgPSBcImVzbVwiO1xuXG4vLyBzcmMvQ2xpZW50U2lkZVN1c3BlbnNlLnRzeFxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5mdW5jdGlvbiBDbGllbnRTaWRlU3VzcGVuc2UocHJvcHMpIHtcbiAgY29uc3QgW21vdW50ZWQsIHNldE1vdW50ZWRdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHNldE1vdW50ZWQodHJ1ZSk7XG4gIH0sIFtdKTtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LlN1c3BlbnNlLCB7IGZhbGxiYWNrOiBwcm9wcy5mYWxsYmFjayB9LCBtb3VudGVkID8gcHJvcHMuY2hpbGRyZW4oKSA6IHByb3BzLmZhbGxiYWNrKTtcbn1cblxuLy8gc3JjL2ZhY3RvcnkudHN4XG5pbXBvcnQgeyBzaGFsbG93IH0gZnJvbSBcIkBsaXZlYmxvY2tzL2NsaWVudFwiO1xuaW1wb3J0IHtcbiAgY3JlYXRlQXN5bmNDYWNoZSxcbiAgZGVwcmVjYXRlSWYsXG4gIGVycm9ySWYsXG4gIGlzTGl2ZU5vZGUsXG4gIG1ha2VFdmVudFNvdXJjZSBhcyBtYWtlRXZlbnRTb3VyY2UyLFxuICBzdHJpbmdpZnkgYXMgc3RyaW5naWZ5MlxufSBmcm9tIFwiQGxpdmVibG9ja3MvY29yZVwiO1xuaW1wb3J0ICogYXMgUmVhY3QzIGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlU3luY0V4dGVybmFsU3RvcmVXaXRoU2VsZWN0b3IgYXMgdXNlU3luY0V4dGVybmFsU3RvcmVXaXRoU2VsZWN0b3IyIH0gZnJvbSBcInVzZS1zeW5jLWV4dGVybmFsLXN0b3JlL3NoaW0vd2l0aC1zZWxlY3Rvci5qc1wiO1xuXG4vLyBzcmMvY29tbWVudHMvQ29tbWVudHNSb29tLnRzeFxuaW1wb3J0IHsgQ29tbWVudHNBcGlFcnJvciwgbWFrZUV2ZW50U291cmNlLCBzdHJpbmdpZnkgfSBmcm9tIFwiQGxpdmVibG9ja3MvY29yZVwiO1xuaW1wb3J0IHsgbmFub2lkIH0gZnJvbSBcIm5hbm9pZFwiO1xuaW1wb3J0IFJlYWN0Miwge1xuICBjcmVhdGVDb250ZXh0LFxuICB1c2VDYWxsYmFjayBhcyB1c2VDYWxsYmFjazMsXG4gIHVzZUNvbnRleHQsXG4gIHVzZUVmZmVjdCBhcyB1c2VFZmZlY3QzLFxuICB1c2VNZW1vXG59IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlU3luY0V4dGVybmFsU3RvcmVXaXRoU2VsZWN0b3IgfSBmcm9tIFwidXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUvc2hpbS93aXRoLXNlbGVjdG9yLmpzXCI7XG5cbi8vIHNyYy9jb21tZW50cy9lcnJvcnMudHNcbnZhciBDcmVhdGVUaHJlYWRFcnJvciA9IGNsYXNzIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihjYXVzZSwgY29udGV4dCkge1xuICAgIHN1cGVyKFwiQ3JlYXRlIHRocmVhZCBmYWlsZWQuXCIpO1xuICAgIHRoaXMuY2F1c2UgPSBjYXVzZTtcbiAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICAgIHRoaXMubmFtZSA9IFwiQ3JlYXRlVGhyZWFkRXJyb3JcIjtcbiAgfVxufTtcbnZhciBFZGl0VGhyZWFkTWV0YWRhdGFFcnJvciA9IGNsYXNzIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihjYXVzZSwgY29udGV4dCkge1xuICAgIHN1cGVyKFwiRWRpdCB0aHJlYWQgbWV0YWRhdGEgZmFpbGVkLlwiKTtcbiAgICB0aGlzLmNhdXNlID0gY2F1c2U7XG4gICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgICB0aGlzLm5hbWUgPSBcIkVkaXRUaHJlYWRNZXRhZGF0YUVycm9yXCI7XG4gIH1cbn07XG52YXIgQ3JlYXRlQ29tbWVudEVycm9yID0gY2xhc3MgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKGNhdXNlLCBjb250ZXh0KSB7XG4gICAgc3VwZXIoXCJDcmVhdGUgY29tbWVudCBmYWlsZWQuXCIpO1xuICAgIHRoaXMuY2F1c2UgPSBjYXVzZTtcbiAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICAgIHRoaXMubmFtZSA9IFwiQ3JlYXRlQ29tbWVudEVycm9yXCI7XG4gIH1cbn07XG52YXIgRWRpdENvbW1lbnRFcnJvciA9IGNsYXNzIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihjYXVzZSwgY29udGV4dCkge1xuICAgIHN1cGVyKFwiRWRpdCBjb21tZW50IGZhaWxlZC5cIik7XG4gICAgdGhpcy5jYXVzZSA9IGNhdXNlO1xuICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gICAgdGhpcy5uYW1lID0gXCJFZGl0Q29tbWVudEVycm9yXCI7XG4gIH1cbn07XG52YXIgRGVsZXRlQ29tbWVudEVycm9yID0gY2xhc3MgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKGNhdXNlLCBjb250ZXh0KSB7XG4gICAgc3VwZXIoXCJEZWxldGUgY29tbWVudCBmYWlsZWQuXCIpO1xuICAgIHRoaXMuY2F1c2UgPSBjYXVzZTtcbiAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICAgIHRoaXMubmFtZSA9IFwiRGVsZXRlQ29tbWVudEVycm9yXCI7XG4gIH1cbn07XG52YXIgQWRkUmVhY3Rpb25FcnJvciA9IGNsYXNzIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihjYXVzZSwgY29udGV4dCkge1xuICAgIHN1cGVyKFwiQWRkIHJlYWN0aW9uIGZhaWxlZC5cIik7XG4gICAgdGhpcy5jYXVzZSA9IGNhdXNlO1xuICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gICAgdGhpcy5uYW1lID0gXCJBZGRSZWFjdGlvbkVycm9yXCI7XG4gIH1cbn07XG52YXIgUmVtb3ZlUmVhY3Rpb25FcnJvciA9IGNsYXNzIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihjYXVzZSwgY29udGV4dCkge1xuICAgIHN1cGVyKFwiUmVtb3ZlIHJlYWN0aW9uIGZhaWxlZC5cIik7XG4gICAgdGhpcy5jYXVzZSA9IGNhdXNlO1xuICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gICAgdGhpcy5uYW1lID0gXCJSZW1vdmVSZWFjdGlvbkVycm9yXCI7XG4gIH1cbn07XG5cbi8vIHNyYy9jb21tZW50cy9saWIvcmV2YWxpZGF0aW9uLnRzXG5pbXBvcnQgeyB1c2VDYWxsYmFjayBhcyB1c2VDYWxsYmFjazIsIHVzZUVmZmVjdCBhcyB1c2VFZmZlY3QyLCB1c2VSZWYgYXMgdXNlUmVmMiB9IGZyb20gXCJyZWFjdFwiO1xuXG4vLyBzcmMvY29tbWVudHMvbGliL3VzZS1pcy1kb2N1bWVudC12aXNpYmxlLnRzXG5pbXBvcnQgeyB1c2VTeW5jRXh0ZXJuYWxTdG9yZSB9IGZyb20gXCJ1c2Utc3luYy1leHRlcm5hbC1zdG9yZS9zaGltL2luZGV4LmpzXCI7XG5mdW5jdGlvbiB1c2VJc0RvY3VtZW50VmlzaWJsZSgpIHtcbiAgY29uc3QgaXNWaXNpYmxlID0gdXNlU3luY0V4dGVybmFsU3RvcmUoc3Vic2NyaWJlLCBnZXRTbmFwc2hvdCwgZ2V0U25hcHNob3QpO1xuICByZXR1cm4gaXNWaXNpYmxlO1xufVxuZnVuY3Rpb24gc3Vic2NyaWJlKG9uU3RvcmVDaGFuZ2UpIHtcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInZpc2liaWxpdHljaGFuZ2VcIiwgb25TdG9yZUNoYW5nZSk7XG4gIHJldHVybiAoKSA9PiB7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInZpc2liaWxpdHljaGFuZ2VcIiwgb25TdG9yZUNoYW5nZSk7XG4gIH07XG59XG5mdW5jdGlvbiBnZXRTbmFwc2hvdCgpIHtcbiAgY29uc3QgaXNEb2N1bWVudERlZmluZWQgPSB0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCI7XG4gIHJldHVybiBpc0RvY3VtZW50RGVmaW5lZCA/IGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSA9PT0gXCJ2aXNpYmxlXCIgOiB0cnVlO1xufVxuXG4vLyBzcmMvY29tbWVudHMvbGliL3VzZS1pcy1vbmxpbmUudHNcbmltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VSZWYgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZVN5bmNFeHRlcm5hbFN0b3JlIGFzIHVzZVN5bmNFeHRlcm5hbFN0b3JlMiB9IGZyb20gXCJ1c2Utc3luYy1leHRlcm5hbC1zdG9yZS9zaGltL2luZGV4LmpzXCI7XG5mdW5jdGlvbiB1c2VJc09ubGluZSgpIHtcbiAgY29uc3QgaXNPbmxpbmVSZWYgPSB1c2VSZWYodHJ1ZSk7XG4gIGNvbnN0IHN1YnNjcmliZTIgPSB1c2VDYWxsYmFjaygob25TdG9yZUNoYW5nZSkgPT4ge1xuICAgIGZ1bmN0aW9uIGhhbmRsZUlzT25saW5lKCkge1xuICAgICAgaXNPbmxpbmVSZWYuY3VycmVudCA9IHRydWU7XG4gICAgICBvblN0b3JlQ2hhbmdlKCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGhhbmRsZUlzT2ZmbGluZSgpIHtcbiAgICAgIGlzT25saW5lUmVmLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgIG9uU3RvcmVDaGFuZ2UoKTtcbiAgICB9XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJvbmxpbmVcIiwgaGFuZGxlSXNPbmxpbmUpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwib2ZmbGluZVwiLCBoYW5kbGVJc09mZmxpbmUpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm9ubGluZVwiLCBoYW5kbGVJc09ubGluZSk7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm9mZmxpbmVcIiwgaGFuZGxlSXNPZmZsaW5lKTtcbiAgICB9O1xuICB9LCBbXSk7XG4gIGNvbnN0IGdldFNuYXBzaG90MiA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICByZXR1cm4gaXNPbmxpbmVSZWYuY3VycmVudDtcbiAgfSwgW10pO1xuICBjb25zdCBpc09ubGluZSA9IHVzZVN5bmNFeHRlcm5hbFN0b3JlMihzdWJzY3JpYmUyLCBnZXRTbmFwc2hvdDIsIGdldFNuYXBzaG90Mik7XG4gIHJldHVybiBpc09ubGluZTtcbn1cblxuLy8gc3JjL2NvbW1lbnRzL2xpYi9yZXZhbGlkYXRpb24udHNcbnZhciBERUZBVUxUX0VSUk9SX1JFVFJZX0lOVEVSVkFMID0gNWUzO1xudmFyIERFRkFVTFRfTUFYX0VSUk9SX1JFVFJZX0NPVU5UID0gNTtcbnZhciBERUZBVUxUX0RFRFVQSU5HX0lOVEVSVkFMID0gMmUzO1xudmFyIHRpbWVzdGFtcCA9IDA7XG5mdW5jdGlvbiB1c2VSZXZhbGlkYXRlQ2FjaGUobWFuYWdlciwgZmV0Y2hlciwgb3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IGlzT25saW5lUmVmID0gdXNlUmVmMih0cnVlKTtcbiAgY29uc3Qge1xuICAgIGRlZHVwaW5nSW50ZXJ2YWwgPSBERUZBVUxUX0RFRFVQSU5HX0lOVEVSVkFMLFxuICAgIGVycm9yUmV0cnlJbnRlcnZhbCA9IERFRkFVTFRfRVJST1JfUkVUUllfSU5URVJWQUwsXG4gICAgZXJyb3JSZXRyeUNvdW50ID0gREVGQVVMVF9NQVhfRVJST1JfUkVUUllfQ09VTlRcbiAgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IF9yZXZhbGlkYXRlQ2FjaGUgPSB1c2VDYWxsYmFjazIoXG4gICAgYXN5bmMgKHtcbiAgICAgIHNob3VsZERlZHVwZSxcbiAgICAgIHJldHJ5Q291bnQgPSAwXG4gICAgfSkgPT4ge1xuICAgICAgbGV0IHN0YXJ0QXQ7XG4gICAgICBjb25zdCBzaG91bGRTdGFydFJlcXVlc3QgPSAhbWFuYWdlci5nZXRSZXF1ZXN0KCkgfHwgIXNob3VsZERlZHVwZTtcbiAgICAgIGZ1bmN0aW9uIGRlbGV0ZUFjdGl2ZVJlcXVlc3QoKSB7XG4gICAgICAgIGNvbnN0IGFjdGl2ZVJlcXVlc3QgPSBtYW5hZ2VyLmdldFJlcXVlc3QoKTtcbiAgICAgICAgaWYgKCFhY3RpdmVSZXF1ZXN0KVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaWYgKGFjdGl2ZVJlcXVlc3QudGltZXN0YW1wICE9PSBzdGFydEF0KVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgbWFuYWdlci5zZXRSZXF1ZXN0KHZvaWQgMCk7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBoYW5kbGVFcnJvcigpIHtcbiAgICAgICAgY29uc3QgdGltZW91dCA9IH5+KChNYXRoLnJhbmRvbSgpICsgMC41KSAqICgxIDw8IChyZXRyeUNvdW50IDwgOCA/IHJldHJ5Q291bnQgOiA4KSkpICogZXJyb3JSZXRyeUludGVydmFsO1xuICAgICAgICBpZiAocmV0cnlDb3VudCA+IGVycm9yUmV0cnlDb3VudClcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHZvaWQgX3JldmFsaWRhdGVDYWNoZSh7XG4gICAgICAgICAgICBzaG91bGREZWR1cGU6IGZhbHNlLFxuICAgICAgICAgICAgcmV0cnlDb3VudDogcmV0cnlDb3VudCArIDFcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSwgdGltZW91dCk7XG4gICAgICB9XG4gICAgICBpZiAoc2hvdWxkU3RhcnRSZXF1ZXN0KSB7XG4gICAgICAgIG1hbmFnZXIuc2V0UmVxdWVzdCh7XG4gICAgICAgICAgZmV0Y2hlcjogZmV0Y2hlcigpLFxuICAgICAgICAgIHRpbWVzdGFtcDogKyt0aW1lc3RhbXBcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICB0cnkge1xuICAgICAgICBsZXQgYWN0aXZlUmVxdWVzdCA9IG1hbmFnZXIuZ2V0UmVxdWVzdCgpO1xuICAgICAgICBpZiAoIWFjdGl2ZVJlcXVlc3QpXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICBzdGFydEF0ID0gYWN0aXZlUmVxdWVzdC50aW1lc3RhbXA7XG4gICAgICAgIGNvbnN0IG5ld0RhdGEgPSBhd2FpdCBhY3RpdmVSZXF1ZXN0LmZldGNoZXI7XG4gICAgICAgIGlmIChzaG91bGRTdGFydFJlcXVlc3QpIHtcbiAgICAgICAgICBzZXRUaW1lb3V0KGRlbGV0ZUFjdGl2ZVJlcXVlc3QsIGRlZHVwaW5nSW50ZXJ2YWwpO1xuICAgICAgICB9XG4gICAgICAgIGFjdGl2ZVJlcXVlc3QgPSBtYW5hZ2VyLmdldFJlcXVlc3QoKTtcbiAgICAgICAgaWYgKCFhY3RpdmVSZXF1ZXN0IHx8IGFjdGl2ZVJlcXVlc3QudGltZXN0YW1wICE9PSBzdGFydEF0KVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgYWN0aXZlTXV0YXRpb24gPSBtYW5hZ2VyLmdldE11dGF0aW9uKCk7XG4gICAgICAgIGlmIChhY3RpdmVNdXRhdGlvbiAmJiAoYWN0aXZlTXV0YXRpb24uc3RhcnRUaW1lID4gc3RhcnRBdCB8fCBhY3RpdmVNdXRhdGlvbi5lbmRUaW1lID4gc3RhcnRBdCB8fCBhY3RpdmVNdXRhdGlvbi5lbmRUaW1lID09PSAwKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBtYW5hZ2VyLnNldENhY2hlKG5ld0RhdGEpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGRlbGV0ZUFjdGl2ZVJlcXVlc3QoKTtcbiAgICAgICAgY29uc3QgaXNWaXNpYmxlID0gZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlID09PSBcInZpc2libGVcIjtcbiAgICAgICAgY29uc3QgaXNPbmxpbmUgPSBpc09ubGluZVJlZi5jdXJyZW50O1xuICAgICAgICBpZiAoc2hvdWxkU3RhcnRSZXF1ZXN0ICYmIGlzVmlzaWJsZSAmJiBpc09ubGluZSlcbiAgICAgICAgICBoYW5kbGVFcnJvcigpO1xuICAgICAgICBtYW5hZ2VyLnNldEVycm9yKGVycik7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfSxcbiAgICBbbWFuYWdlciwgZmV0Y2hlciwgZGVkdXBpbmdJbnRlcnZhbCwgZXJyb3JSZXRyeUludGVydmFsLCBlcnJvclJldHJ5Q291bnRdXG4gICk7XG4gIHVzZUVmZmVjdDIoKCkgPT4ge1xuICAgIGZ1bmN0aW9uIGhhbmRsZUlzT25saW5lKCkge1xuICAgICAgaXNPbmxpbmVSZWYuY3VycmVudCA9IHRydWU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGhhbmRsZUlzT2ZmbGluZSgpIHtcbiAgICAgIGlzT25saW5lUmVmLmN1cnJlbnQgPSBmYWxzZTtcbiAgICB9XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJvbmxpbmVcIiwgaGFuZGxlSXNPbmxpbmUpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwib2ZmbGluZVwiLCBoYW5kbGVJc09mZmxpbmUpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm9ubGluZVwiLCBoYW5kbGVJc09ubGluZSk7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm9mZmxpbmVcIiwgaGFuZGxlSXNPZmZsaW5lKTtcbiAgICB9O1xuICB9LCBbXSk7XG4gIGNvbnN0IHJldmFsaWRhdGVDYWNoZSA9IHVzZUNhbGxiYWNrMihcbiAgICAoeyBzaG91bGREZWR1cGUgfSkgPT4ge1xuICAgICAgcmV0dXJuIF9yZXZhbGlkYXRlQ2FjaGUoeyBzaG91bGREZWR1cGUsIHJldHJ5Q291bnQ6IDAgfSk7XG4gICAgfSxcbiAgICBbX3JldmFsaWRhdGVDYWNoZV1cbiAgKTtcbiAgcmV0dXJuIHJldmFsaWRhdGVDYWNoZTtcbn1cbmZ1bmN0aW9uIHVzZU11dGF0ZShtYW5hZ2VyLCByZXZhbGlkYXRlQ2FjaGUpIHtcbiAgY29uc3QgbXV0YXRlID0gdXNlQ2FsbGJhY2syKFxuICAgIGFzeW5jIChkYXRhLCBvcHRpb25zKSA9PiB7XG4gICAgICBjb25zdCBiZWZvcmVNdXRhdGlvblRpbWVzdGFtcCA9ICsrdGltZXN0YW1wO1xuICAgICAgbWFuYWdlci5zZXRNdXRhdGlvbih7XG4gICAgICAgIHN0YXJ0VGltZTogYmVmb3JlTXV0YXRpb25UaW1lc3RhbXAsXG4gICAgICAgIGVuZFRpbWU6IDBcbiAgICAgIH0pO1xuICAgICAgY29uc3QgY3VycmVudENhY2hlID0gbWFuYWdlci5nZXRDYWNoZSgpO1xuICAgICAgbWFuYWdlci5zZXRDYWNoZShvcHRpb25zLm9wdGltaXN0aWNEYXRhKTtcbiAgICAgIGxldCBlcnJvcjtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IGRhdGE7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgZXJyb3IgPSBlcnI7XG4gICAgICB9XG4gICAgICBjb25zdCBhY3RpdmVNdXRhdGlvbiA9IG1hbmFnZXIuZ2V0TXV0YXRpb24oKTtcbiAgICAgIGlmIChhY3RpdmVNdXRhdGlvbiAmJiBiZWZvcmVNdXRhdGlvblRpbWVzdGFtcCAhPT0gYWN0aXZlTXV0YXRpb24uc3RhcnRUaW1lKSB7XG4gICAgICAgIGlmIChlcnJvcilcbiAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIG1hbmFnZXIuc2V0Q2FjaGUoY3VycmVudENhY2hlKTtcbiAgICAgIH1cbiAgICAgIG1hbmFnZXIuc2V0TXV0YXRpb24oe1xuICAgICAgICBzdGFydFRpbWU6IGJlZm9yZU11dGF0aW9uVGltZXN0YW1wLFxuICAgICAgICBlbmRUaW1lOiArK3RpbWVzdGFtcFxuICAgICAgfSk7XG4gICAgICBtYW5hZ2VyLnNldFJlcXVlc3Qodm9pZCAwKTtcbiAgICAgIHZvaWQgcmV2YWxpZGF0ZUNhY2hlKHsgc2hvdWxkRGVkdXBlOiBmYWxzZSB9KTtcbiAgICAgIGlmIChlcnJvcilcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfSxcbiAgICBbbWFuYWdlciwgcmV2YWxpZGF0ZUNhY2hlXVxuICApO1xuICByZXR1cm4gbXV0YXRlO1xufVxuXG4vLyBzcmMvY29tbWVudHMvQ29tbWVudHNSb29tLnRzeFxudmFyIFRIUkVBRF9JRF9QUkVGSVggPSBcInRoXCI7XG52YXIgQ09NTUVOVF9JRF9QUkVGSVggPSBcImNtXCI7XG52YXIgUE9MTElOR19JTlRFUlZBTF9SRUFMVElNRSA9IDNlNDtcbnZhciBQT0xMSU5HX0lOVEVSVkFMID0gNWUzO1xuZnVuY3Rpb24gY3JlYXRlQ29tbWVudHNSb29tKGVycm9yRXZlbnRTb3VyY2UpIHtcbiAgY29uc3Qgc3RvcmUgPSBjcmVhdGVDbGllbnRDYWNoZVN0b3JlKCk7XG4gIGNvbnN0IEZldGNoZXJDb250ZXh0ID0gY3JlYXRlQ29udGV4dChudWxsKTtcbiAgY29uc3QgUm9vbU1hbmFnZXJDb250ZXh0ID0gY3JlYXRlQ29udGV4dChudWxsKTtcbiAgZnVuY3Rpb24gZ2V0VGhyZWFkcyhtYW5hZ2VyKSB7XG4gICAgY29uc3QgdGhyZWFkcyA9IG1hbmFnZXIuZ2V0Q2FjaGUoKTtcbiAgICBpZiAoIXRocmVhZHMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgXCJDYW5ub3QgdXBkYXRlIHRocmVhZHMgb3IgY29tbWVudHMgYmVmb3JlIHRoZXkgYXJlIGxvYWRlZC5cIlxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHRocmVhZHM7XG4gIH1cbiAgZnVuY3Rpb24gQ29tbWVudHNSb29tUHJvdmlkZXIoe1xuICAgIHJvb20sXG4gICAgY2hpbGRyZW5cbiAgfSkge1xuICAgIGNvbnN0IG1hbmFnZXIgPSB1c2VNZW1vKCgpID0+IHtcbiAgICAgIHJldHVybiBjcmVhdGVSb29tUmV2YWxpZGF0aW9uTWFuYWdlcihyb29tLmlkLCB7XG4gICAgICAgIGdldENhY2hlOiBzdG9yZS5nZXRUaHJlYWRzLFxuICAgICAgICBzZXRDYWNoZTogc3RvcmUuc2V0VGhyZWFkc1xuICAgICAgfSk7XG4gICAgfSwgW3Jvb20uaWRdKTtcbiAgICBjb25zdCBmZXRjaGVyID0gUmVhY3QyLnVzZUNhbGxiYWNrKGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG9wdGlvbnMgPSBtYW5hZ2VyLmdldFJldmFsaWRhdGlvbk1hbmFnZXJzKCkuZmlsdGVyKChba2V5XSkgPT4gbWFuYWdlci5nZXRSZWZlcmVuY2VDb3VudChrZXkpID4gMCkubWFwKChbXywgbWFuYWdlcjJdKSA9PiBtYW5hZ2VyMi5nZXRPcHRpb25zKCkpO1xuICAgICAgY29uc3QgcmVzcG9uc2VzID0gYXdhaXQgUHJvbWlzZS5hbGwoXG4gICAgICAgIG9wdGlvbnMubWFwKGFzeW5jIChvcHRpb24pID0+IHtcbiAgICAgICAgICByZXR1cm4gYXdhaXQgcm9vbS5nZXRUaHJlYWRzKG9wdGlvbik7XG4gICAgICAgIH0pXG4gICAgICApO1xuICAgICAgY29uc3QgdGhyZWFkcyA9IEFycmF5LmZyb20oXG4gICAgICAgIG5ldyBNYXAocmVzcG9uc2VzLmZsYXQoKS5tYXAoKHRocmVhZCkgPT4gW3RocmVhZC5pZCwgdGhyZWFkXSkpLnZhbHVlcygpXG4gICAgICApO1xuICAgICAgcmV0dXJuIHRocmVhZHM7XG4gICAgfSwgW3Jvb20sIG1hbmFnZXJdKTtcbiAgICBjb25zdCByZXZhbGlkYXRlQ2FjaGUgPSB1c2VSZXZhbGlkYXRlQ2FjaGUobWFuYWdlciwgZmV0Y2hlcik7XG4gICAgY29uc3Qgc3RhdHVzID0gdXNlU3luY0V4dGVybmFsU3RvcmUzKFxuICAgICAgcm9vbS5ldmVudHMuc3RhdHVzLnN1YnNjcmliZSxcbiAgICAgIHJvb20uZ2V0U3RhdHVzLFxuICAgICAgcm9vbS5nZXRTdGF0dXNcbiAgICApO1xuICAgIGNvbnN0IGlzT25saW5lID0gdXNlSXNPbmxpbmUoKTtcbiAgICBjb25zdCBpc0RvY3VtZW50VmlzaWJsZSA9IHVzZUlzRG9jdW1lbnRWaXNpYmxlKCk7XG4gICAgY29uc3QgcmVmcmVzaEludGVydmFsID0gZ2V0UG9sbGluZ0ludGVydmFsKFxuICAgICAgaXNPbmxpbmUsXG4gICAgICBpc0RvY3VtZW50VmlzaWJsZSxcbiAgICAgIHN0YXR1cyA9PT0gXCJjb25uZWN0ZWRcIlxuICAgICk7XG4gICAgdXNlRWZmZWN0MygoKSA9PiB7XG4gICAgICBsZXQgcmV2YWxpZGF0aW9uVGltZXJJZDtcbiAgICAgIGZ1bmN0aW9uIHNjaGVkdWxlUmV2YWxpZGF0aW9uKCkge1xuICAgICAgICBpZiAocmVmcmVzaEludGVydmFsID09PSAwKVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgcmV2YWxpZGF0aW9uVGltZXJJZCA9IHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICBpZiAoaXNPbmxpbmUgJiYgaXNEb2N1bWVudFZpc2libGUgJiYgIW1hbmFnZXIuZ2V0RXJyb3IoKSAmJiBtYW5hZ2VyLmdldFRvdGFsUmVmZXJlbmNlQ291bnQoKSA+IDApIHtcbiAgICAgICAgICAgIHZvaWQgcmV2YWxpZGF0ZUNhY2hlKHsgc2hvdWxkRGVkdXBlOiB0cnVlIH0pLnRoZW4oXG4gICAgICAgICAgICAgIHNjaGVkdWxlUmV2YWxpZGF0aW9uXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzY2hlZHVsZVJldmFsaWRhdGlvbigpO1xuICAgICAgICB9LCByZWZyZXNoSW50ZXJ2YWwpO1xuICAgICAgfVxuICAgICAgc2NoZWR1bGVSZXZhbGlkYXRpb24oKTtcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQocmV2YWxpZGF0aW9uVGltZXJJZCk7XG4gICAgICB9O1xuICAgIH0sIFtcbiAgICAgIHJldmFsaWRhdGVDYWNoZSxcbiAgICAgIHJlZnJlc2hJbnRlcnZhbCxcbiAgICAgIGlzT25saW5lLFxuICAgICAgaXNEb2N1bWVudFZpc2libGUsXG4gICAgICBtYW5hZ2VyXG4gICAgXSk7XG4gICAgdXNlRWZmZWN0MygoKSA9PiB7XG4gICAgICBmdW5jdGlvbiBoYW5kbGVJc09ubGluZSgpIHtcbiAgICAgICAgaWYgKGlzRG9jdW1lbnRWaXNpYmxlKSB7XG4gICAgICAgICAgdm9pZCByZXZhbGlkYXRlQ2FjaGUoeyBzaG91bGREZWR1cGU6IHRydWUgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwib25saW5lXCIsIGhhbmRsZUlzT25saW5lKTtcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwib25saW5lXCIsIGhhbmRsZUlzT25saW5lKTtcbiAgICAgIH07XG4gICAgfSwgW3JldmFsaWRhdGVDYWNoZSwgaXNEb2N1bWVudFZpc2libGVdKTtcbiAgICB1c2VFZmZlY3QzKCgpID0+IHtcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZVZpc2liaWxpdHlDaGFuZ2UoKSB7XG4gICAgICAgIGNvbnN0IGlzVmlzaWJsZSA9IGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSA9PT0gXCJ2aXNpYmxlXCI7XG4gICAgICAgIGlmIChpc1Zpc2libGUgJiYgaXNPbmxpbmUpIHtcbiAgICAgICAgICB2b2lkIHJldmFsaWRhdGVDYWNoZSh7IHNob3VsZERlZHVwZTogdHJ1ZSB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInZpc2liaWxpdHljaGFuZ2VcIiwgaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSk7XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFxuICAgICAgICAgIFwidmlzaWJpbGl0eWNoYW5nZVwiLFxuICAgICAgICAgIGhhbmRsZVZpc2liaWxpdHlDaGFuZ2VcbiAgICAgICAgKTtcbiAgICAgIH07XG4gICAgfSwgW3JldmFsaWRhdGVDYWNoZSwgaXNPbmxpbmVdKTtcbiAgICB1c2VFZmZlY3QzKCgpID0+IHtcbiAgICAgIGNvbnN0IHVuc3Vic2NyaWJlID0gcm9vbS5ldmVudHMuY29tbWVudHMuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgdm9pZCByZXZhbGlkYXRlQ2FjaGUoeyBzaG91bGREZWR1cGU6IGZhbHNlIH0pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICB1bnN1YnNjcmliZSgpO1xuICAgICAgfTtcbiAgICB9LCBbcm9vbSwgcmV2YWxpZGF0ZUNhY2hlXSk7XG4gICAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDIuY3JlYXRlRWxlbWVudChGZXRjaGVyQ29udGV4dC5Qcm92aWRlciwgeyB2YWx1ZTogZmV0Y2hlciB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3QyLmNyZWF0ZUVsZW1lbnQoUm9vbU1hbmFnZXJDb250ZXh0LlByb3ZpZGVyLCB7IHZhbHVlOiBtYW5hZ2VyIH0sIGNoaWxkcmVuKSk7XG4gIH1cbiAgZnVuY3Rpb24gdXNlUm9vbU1hbmFnZXIoKSB7XG4gICAgY29uc3QgbWFuYWdlciA9IHVzZUNvbnRleHQoUm9vbU1hbmFnZXJDb250ZXh0KTtcbiAgICBpZiAobWFuYWdlciA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ29tbWVudHNSb29tUHJvdmlkZXIgaXMgbWlzc2luZyBmcm9tIHRoZSBSZWFjdCB0cmVlLlwiKTtcbiAgICB9XG4gICAgcmV0dXJuIG1hbmFnZXI7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0VXNlVGhyZWFkc1JldmFsaWRhdGlvbk1hbmFnZXIob3B0aW9ucywgcm9vbU1hbmFnZXIpIHtcbiAgICBjb25zdCBrZXkgPSBzdHJpbmdpZnkob3B0aW9ucyk7XG4gICAgY29uc3QgcmV2YWxpZGF0aW9uTWFuYWdlciA9IHJvb21NYW5hZ2VyLmdldFJldmFsaWRhdGlvbk1hbmFnZXIoa2V5KTtcbiAgICBpZiAoIXJldmFsaWRhdGlvbk1hbmFnZXIpIHtcbiAgICAgIGNvbnN0IHVzZVRocmVhZHNSZXZhbGlkYXRpb25NYW5hZ2VyID0gY3JlYXRlVXNlVGhyZWFkc1JldmFsaWRhdGlvbk1hbmFnZXIoXG4gICAgICAgIG9wdGlvbnMsXG4gICAgICAgIHJvb21NYW5hZ2VyXG4gICAgICApO1xuICAgICAgcm9vbU1hbmFnZXIuc2V0UmV2YWxpZGF0aW9ubWFuYWdlcihrZXksIHVzZVRocmVhZHNSZXZhbGlkYXRpb25NYW5hZ2VyKTtcbiAgICAgIHJldHVybiB1c2VUaHJlYWRzUmV2YWxpZGF0aW9uTWFuYWdlcjtcbiAgICB9XG4gICAgcmV0dXJuIHJldmFsaWRhdGlvbk1hbmFnZXI7XG4gIH1cbiAgZnVuY3Rpb24gdXNlVGhyZWFkc0ZldGNoZXIoKSB7XG4gICAgY29uc3QgZmV0Y2hlciA9IHVzZUNvbnRleHQoRmV0Y2hlckNvbnRleHQpO1xuICAgIGlmIChmZXRjaGVyID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb21tZW50c1Jvb21Qcm92aWRlciBpcyBtaXNzaW5nIGZyb20gdGhlIFJlYWN0IHRyZWUuXCIpO1xuICAgIH1cbiAgICByZXR1cm4gZmV0Y2hlcjtcbiAgfVxuICBmdW5jdGlvbiB1c2VUaHJlYWRzKHJvb20sIG9wdGlvbnMgPSB7IHF1ZXJ5OiB7IG1ldGFkYXRhOiB7fSB9IH0pIHtcbiAgICBjb25zdCBrZXkgPSB1c2VNZW1vKCgpID0+IHN0cmluZ2lmeShvcHRpb25zKSwgW29wdGlvbnNdKTtcbiAgICBjb25zdCBtYW5hZ2VyID0gdXNlUm9vbU1hbmFnZXIoKTtcbiAgICBjb25zdCB1c2VUaHJlYWRzUmV2YWxpZGF0aW9uTWFuYWdlciA9IGdldFVzZVRocmVhZHNSZXZhbGlkYXRpb25NYW5hZ2VyKFxuICAgICAgb3B0aW9ucyxcbiAgICAgIG1hbmFnZXJcbiAgICApO1xuICAgIGNvbnN0IGZldGNoZXIgPSBSZWFjdDIudXNlQ2FsbGJhY2soXG4gICAgICAoKSA9PiB7XG4gICAgICAgIHJldHVybiByb29tLmdldFRocmVhZHMob3B0aW9ucyk7XG4gICAgICB9LFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwcyAtLSBUaGUgbWlzc2luZyBkZXBlbmRlbmN5IGlzIGBvcHRpb25zYCBidXQgYGtleWAgYW5kIGBub3JtYWxpemVkYCBhcmUgYW5hbG9nb3VzLCBzbyB3ZSBvbmx5IGluY2x1ZGUgYGtleWAgYXMgZGVwZW5kZW5jeS4gVGhpcyBoZWxwcyBtaW5pbWl6ZSB0aGUgbnVtYmVyIG9mIHJlLXJlbmRlcnMgYXMgYG9wdGlvbnNgIGNhbiBjaGFuZ2Ugb24gZWFjaCByZW5kZXJcbiAgICAgIFtrZXksIHJvb21dXG4gICAgKTtcbiAgICBjb25zdCByZXZhbGlkYXRlQ2FjaGUgPSB1c2VSZXZhbGlkYXRlQ2FjaGUoXG4gICAgICB1c2VUaHJlYWRzUmV2YWxpZGF0aW9uTWFuYWdlcixcbiAgICAgIGZldGNoZXJcbiAgICApO1xuICAgIHVzZUVmZmVjdDMoKCkgPT4ge1xuICAgICAgdm9pZCByZXZhbGlkYXRlQ2FjaGUoeyBzaG91bGREZWR1cGU6IHRydWUgfSk7XG4gICAgfSwgW3JldmFsaWRhdGVDYWNoZV0pO1xuICAgIHVzZUVmZmVjdDMoKCkgPT4ge1xuICAgICAgbWFuYWdlci5pbmNyZW1lbnRSZWZlcmVuY2VDb3VudChrZXkpO1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgbWFuYWdlci5kZWNyZW1lbnRSZWZlcmVuY2VDb3VudChrZXkpO1xuICAgICAgfTtcbiAgICB9LCBbbWFuYWdlciwga2V5XSk7XG4gICAgY29uc3QgY2FjaGUgPSBfdXNlVGhyZWFkcyhyb29tLCBvcHRpb25zKTtcbiAgICByZXR1cm4gY2FjaGU7XG4gIH1cbiAgZnVuY3Rpb24gdXNlVGhyZWFkc1N1c3BlbnNlKHJvb20sIG9wdGlvbnMgPSB7IHF1ZXJ5OiB7IG1ldGFkYXRhOiB7fSB9IH0pIHtcbiAgICBjb25zdCBrZXkgPSB1c2VNZW1vKCgpID0+IHN0cmluZ2lmeShvcHRpb25zKSwgW29wdGlvbnNdKTtcbiAgICBjb25zdCBtYW5hZ2VyID0gdXNlUm9vbU1hbmFnZXIoKTtcbiAgICBjb25zdCB1c2VUaHJlYWRzUmV2YWxpZGF0aW9uTWFuYWdlciA9IGdldFVzZVRocmVhZHNSZXZhbGlkYXRpb25NYW5hZ2VyKFxuICAgICAgb3B0aW9ucyxcbiAgICAgIG1hbmFnZXJcbiAgICApO1xuICAgIGNvbnN0IGZldGNoZXIgPSBSZWFjdDIudXNlQ2FsbGJhY2soXG4gICAgICAoKSA9PiB7XG4gICAgICAgIHJldHVybiByb29tLmdldFRocmVhZHMob3B0aW9ucyk7XG4gICAgICB9LFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwcyAtLSBUaGUgbWlzc2luZyBkZXBlbmRlbmN5IGlzIGBvcHRpb25zYCBidXQgYGtleWAgYW5kIGBub3JtYWxpemVkYCBhcmUgYW5hbG9nb3VzLCBzbyB3ZSBvbmx5IGluY2x1ZGUgYGtleWAgYXMgZGVwZW5kZW5jeS4gVGhpcyBoZWxwcyBtaW5pbWl6ZSB0aGUgbnVtYmVyIG9mIHJlLXJlbmRlcnMgYXMgYG9wdGlvbnNgIGNhbiBjaGFuZ2Ugb24gZWFjaCByZW5kZXJcbiAgICAgIFtrZXksIHJvb21dXG4gICAgKTtcbiAgICBjb25zdCByZXZhbGlkYXRlQ2FjaGUgPSB1c2VSZXZhbGlkYXRlQ2FjaGUoXG4gICAgICB1c2VUaHJlYWRzUmV2YWxpZGF0aW9uTWFuYWdlcixcbiAgICAgIGZldGNoZXJcbiAgICApO1xuICAgIHVzZUVmZmVjdDMoKCkgPT4ge1xuICAgICAgdm9pZCByZXZhbGlkYXRlQ2FjaGUoeyBzaG91bGREZWR1cGU6IHRydWUgfSk7XG4gICAgfSwgW3JldmFsaWRhdGVDYWNoZV0pO1xuICAgIHVzZUVmZmVjdDMoKCkgPT4ge1xuICAgICAgbWFuYWdlci5pbmNyZW1lbnRSZWZlcmVuY2VDb3VudChrZXkpO1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgbWFuYWdlci5kZWNyZW1lbnRSZWZlcmVuY2VDb3VudChrZXkpO1xuICAgICAgfTtcbiAgICB9LCBbbWFuYWdlciwga2V5XSk7XG4gICAgY29uc3QgY2FjaGUgPSBfdXNlVGhyZWFkcyhyb29tLCBvcHRpb25zKTtcbiAgICBpZiAoY2FjaGUuZXJyb3IpIHtcbiAgICAgIHRocm93IGNhY2hlLmVycm9yO1xuICAgIH1cbiAgICBpZiAoY2FjaGUuaXNMb2FkaW5nIHx8ICFjYWNoZS50aHJlYWRzKSB7XG4gICAgICB0aHJvdyByZXZhbGlkYXRlQ2FjaGUoe1xuICAgICAgICBzaG91bGREZWR1cGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgaXNMb2FkaW5nOiBmYWxzZSxcbiAgICAgIHRocmVhZHM6IGNhY2hlLnRocmVhZHMsXG4gICAgICBlcnJvcjogY2FjaGUuZXJyb3JcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIF91c2VUaHJlYWRzKHJvb20sIG9wdGlvbnMpIHtcbiAgICBjb25zdCBtYW5hZ2VyID0gdXNlUm9vbU1hbmFnZXIoKTtcbiAgICBjb25zdCB1c2VUaHJlYWRzUmV2YWxpZGF0aW9uTWFuYWdlciA9IGdldFVzZVRocmVhZHNSZXZhbGlkYXRpb25NYW5hZ2VyKFxuICAgICAgb3B0aW9ucyxcbiAgICAgIG1hbmFnZXJcbiAgICApO1xuICAgIHJldHVybiB1c2VTeW5jRXh0ZXJuYWxTdG9yZVdpdGhTZWxlY3RvcihcbiAgICAgIHN0b3JlLnN1YnNjcmliZSxcbiAgICAgICgpID0+IHN0b3JlLmdldFRocmVhZHMoKSxcbiAgICAgICgpID0+IHN0b3JlLmdldFRocmVhZHMoKSxcbiAgICAgIChzdGF0ZSkgPT4ge1xuICAgICAgICBjb25zdCBpc0xvYWRpbmcgPSB1c2VUaHJlYWRzUmV2YWxpZGF0aW9uTWFuYWdlci5nZXRJc0xvYWRpbmcoKTtcbiAgICAgICAgaWYgKGlzTG9hZGluZykge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpc0xvYWRpbmc6IHRydWVcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG9wdGlvbnMyID0gdXNlVGhyZWFkc1JldmFsaWRhdGlvbk1hbmFnZXIuZ2V0T3B0aW9ucygpO1xuICAgICAgICBjb25zdCBlcnJvciA9IHVzZVRocmVhZHNSZXZhbGlkYXRpb25NYW5hZ2VyLmdldEVycm9yKCk7XG4gICAgICAgIGNvbnN0IGZpbHRlcmVkID0gc3RhdGUuZmlsdGVyKCh0aHJlYWQpID0+IHtcbiAgICAgICAgICBpZiAodGhyZWFkLnJvb21JZCAhPT0gcm9vbS5pZClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICBjb25zdCBxdWVyeSA9IG9wdGlvbnMyLnF1ZXJ5ID8/IHt9O1xuICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHF1ZXJ5Lm1ldGFkYXRhKSB7XG4gICAgICAgICAgICBpZiAodGhyZWFkLm1ldGFkYXRhW2tleV0gIT09IHF1ZXJ5Lm1ldGFkYXRhW2tleV0pIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaXNMb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgICB0aHJlYWRzOiBmaWx0ZXJlZCxcbiAgICAgICAgICBlcnJvclxuICAgICAgICB9O1xuICAgICAgfVxuICAgICk7XG4gIH1cbiAgZnVuY3Rpb24gdXNlRWRpdFRocmVhZE1ldGFkYXRhKHJvb20pIHtcbiAgICBjb25zdCBtYW5hZ2VyID0gdXNlUm9vbU1hbmFnZXIoKTtcbiAgICBjb25zdCBmZXRjaGVyID0gdXNlVGhyZWFkc0ZldGNoZXIoKTtcbiAgICBjb25zdCByZXZhbGlkYXRlID0gdXNlUmV2YWxpZGF0ZUNhY2hlKG1hbmFnZXIsIGZldGNoZXIpO1xuICAgIGNvbnN0IG11dGF0ZSA9IHVzZU11dGF0ZShtYW5hZ2VyLCByZXZhbGlkYXRlKTtcbiAgICBjb25zdCBlZGl0VGhyZWFkTWV0YWRhdGEgPSB1c2VDYWxsYmFjazMoXG4gICAgICAob3B0aW9ucykgPT4ge1xuICAgICAgICBjb25zdCB0aHJlYWRJZCA9IG9wdGlvbnMudGhyZWFkSWQ7XG4gICAgICAgIGNvbnN0IG1ldGFkYXRhID0gXCJtZXRhZGF0YVwiIGluIG9wdGlvbnMgPyBvcHRpb25zLm1ldGFkYXRhIDoge307XG4gICAgICAgIGNvbnN0IHRocmVhZHMgPSBnZXRUaHJlYWRzKG1hbmFnZXIpO1xuICAgICAgICBjb25zdCBvcHRpbWlzdGljRGF0YSA9IHRocmVhZHMubWFwKFxuICAgICAgICAgICh0aHJlYWQpID0+IHRocmVhZC5pZCA9PT0gdGhyZWFkSWQgPyB7XG4gICAgICAgICAgICAuLi50aHJlYWQsXG4gICAgICAgICAgICBtZXRhZGF0YToge1xuICAgICAgICAgICAgICAuLi50aHJlYWQubWV0YWRhdGEsXG4gICAgICAgICAgICAgIC4uLm1ldGFkYXRhXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSA6IHRocmVhZFxuICAgICAgICApO1xuICAgICAgICBtdXRhdGUocm9vbS5lZGl0VGhyZWFkTWV0YWRhdGEoeyBtZXRhZGF0YSwgdGhyZWFkSWQgfSksIHtcbiAgICAgICAgICBvcHRpbWlzdGljRGF0YVxuICAgICAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgaWYgKCEoZXJyIGluc3RhbmNlb2YgQ29tbWVudHNBcGlFcnJvcikpIHtcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgZXJyb3IgPSBoYW5kbGVDb21tZW50c0FwaUVycm9yKGVycik7XG4gICAgICAgICAgZXJyb3JFdmVudFNvdXJjZS5ub3RpZnkoXG4gICAgICAgICAgICBuZXcgRWRpdFRocmVhZE1ldGFkYXRhRXJyb3IoZXJyb3IsIHtcbiAgICAgICAgICAgICAgcm9vbUlkOiByb29tLmlkLFxuICAgICAgICAgICAgICB0aHJlYWRJZCxcbiAgICAgICAgICAgICAgbWV0YWRhdGFcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgW3Jvb20sIG11dGF0ZSwgbWFuYWdlcl1cbiAgICApO1xuICAgIHJldHVybiBlZGl0VGhyZWFkTWV0YWRhdGE7XG4gIH1cbiAgZnVuY3Rpb24gdXNlQ3JlYXRlVGhyZWFkKHJvb20pIHtcbiAgICBjb25zdCBtYW5hZ2VyID0gdXNlUm9vbU1hbmFnZXIoKTtcbiAgICBjb25zdCBmZXRjaGVyID0gdXNlVGhyZWFkc0ZldGNoZXIoKTtcbiAgICBjb25zdCByZXZhbGlkYXRlID0gdXNlUmV2YWxpZGF0ZUNhY2hlKG1hbmFnZXIsIGZldGNoZXIpO1xuICAgIGNvbnN0IG11dGF0ZSA9IHVzZU11dGF0ZShtYW5hZ2VyLCByZXZhbGlkYXRlKTtcbiAgICBjb25zdCBjcmVhdGVUaHJlYWQgPSB1c2VDYWxsYmFjazMoXG4gICAgICAob3B0aW9ucykgPT4ge1xuICAgICAgICBjb25zdCBib2R5ID0gb3B0aW9ucy5ib2R5O1xuICAgICAgICBjb25zdCBtZXRhZGF0YSA9IFwibWV0YWRhdGFcIiBpbiBvcHRpb25zID8gb3B0aW9ucy5tZXRhZGF0YSA6IHt9O1xuICAgICAgICBjb25zdCB0aHJlYWRzID0gZ2V0VGhyZWFkcyhtYW5hZ2VyKTtcbiAgICAgICAgY29uc3QgdGhyZWFkSWQgPSBjcmVhdGVUaHJlYWRJZCgpO1xuICAgICAgICBjb25zdCBjb21tZW50SWQgPSBjcmVhdGVDb21tZW50SWQoKTtcbiAgICAgICAgY29uc3Qgbm93ID0gLyogQF9fUFVSRV9fICovIG5ldyBEYXRlKCk7XG4gICAgICAgIGNvbnN0IG5ld0NvbW1lbnQgPSB7XG4gICAgICAgICAgaWQ6IGNvbW1lbnRJZCxcbiAgICAgICAgICB0aHJlYWRJZCxcbiAgICAgICAgICByb29tSWQ6IHJvb20uaWQsXG4gICAgICAgICAgY3JlYXRlZEF0OiBub3csXG4gICAgICAgICAgdHlwZTogXCJjb21tZW50XCIsXG4gICAgICAgICAgdXNlcklkOiBnZXRDdXJyZW50VXNlcklkKHJvb20pLFxuICAgICAgICAgIGJvZHksXG4gICAgICAgICAgcmVhY3Rpb25zOiBbXVxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBuZXdUaHJlYWQgPSB7XG4gICAgICAgICAgaWQ6IHRocmVhZElkLFxuICAgICAgICAgIHR5cGU6IFwidGhyZWFkXCIsXG4gICAgICAgICAgY3JlYXRlZEF0OiBub3csXG4gICAgICAgICAgcm9vbUlkOiByb29tLmlkLFxuICAgICAgICAgIG1ldGFkYXRhLFxuICAgICAgICAgIGNvbW1lbnRzOiBbbmV3Q29tbWVudF1cbiAgICAgICAgfTtcbiAgICAgICAgbXV0YXRlKHJvb20uY3JlYXRlVGhyZWFkKHsgdGhyZWFkSWQsIGNvbW1lbnRJZCwgYm9keSwgbWV0YWRhdGEgfSksIHtcbiAgICAgICAgICBvcHRpbWlzdGljRGF0YTogWy4uLnRocmVhZHMsIG5ld1RocmVhZF1cbiAgICAgICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgIGlmICghKGVyciBpbnN0YW5jZW9mIENvbW1lbnRzQXBpRXJyb3IpKSB7XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IGVycm9yID0gaGFuZGxlQ29tbWVudHNBcGlFcnJvcihlcnIpO1xuICAgICAgICAgIGVycm9yRXZlbnRTb3VyY2Uubm90aWZ5KFxuICAgICAgICAgICAgbmV3IENyZWF0ZVRocmVhZEVycm9yKGVycm9yLCB7XG4gICAgICAgICAgICAgIHJvb21JZDogcm9vbS5pZCxcbiAgICAgICAgICAgICAgdGhyZWFkSWQsXG4gICAgICAgICAgICAgIGNvbW1lbnRJZCxcbiAgICAgICAgICAgICAgYm9keSxcbiAgICAgICAgICAgICAgbWV0YWRhdGFcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBuZXdUaHJlYWQ7XG4gICAgICB9LFxuICAgICAgW3Jvb20sIG11dGF0ZSwgbWFuYWdlcl1cbiAgICApO1xuICAgIHJldHVybiBjcmVhdGVUaHJlYWQ7XG4gIH1cbiAgZnVuY3Rpb24gdXNlQ3JlYXRlQ29tbWVudChyb29tKSB7XG4gICAgY29uc3QgbWFuYWdlciA9IHVzZVJvb21NYW5hZ2VyKCk7XG4gICAgY29uc3QgZmV0Y2hlciA9IHVzZVRocmVhZHNGZXRjaGVyKCk7XG4gICAgY29uc3QgcmV2YWxpZGF0ZSA9IHVzZVJldmFsaWRhdGVDYWNoZShtYW5hZ2VyLCBmZXRjaGVyKTtcbiAgICBjb25zdCBtdXRhdGUgPSB1c2VNdXRhdGUobWFuYWdlciwgcmV2YWxpZGF0ZSk7XG4gICAgY29uc3QgY3JlYXRlQ29tbWVudCA9IHVzZUNhbGxiYWNrMyhcbiAgICAgICh7IHRocmVhZElkLCBib2R5IH0pID0+IHtcbiAgICAgICAgY29uc3QgdGhyZWFkcyA9IGdldFRocmVhZHMobWFuYWdlcik7XG4gICAgICAgIGNvbnN0IGNvbW1lbnRJZCA9IGNyZWF0ZUNvbW1lbnRJZCgpO1xuICAgICAgICBjb25zdCBub3cgPSAvKiBAX19QVVJFX18gKi8gbmV3IERhdGUoKTtcbiAgICAgICAgY29uc3QgY29tbWVudCA9IHtcbiAgICAgICAgICBpZDogY29tbWVudElkLFxuICAgICAgICAgIHRocmVhZElkLFxuICAgICAgICAgIHJvb21JZDogcm9vbS5pZCxcbiAgICAgICAgICB0eXBlOiBcImNvbW1lbnRcIixcbiAgICAgICAgICBjcmVhdGVkQXQ6IG5vdyxcbiAgICAgICAgICB1c2VySWQ6IGdldEN1cnJlbnRVc2VySWQocm9vbSksXG4gICAgICAgICAgYm9keSxcbiAgICAgICAgICByZWFjdGlvbnM6IFtdXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IG9wdGltaXN0aWNEYXRhID0gdGhyZWFkcy5tYXAoXG4gICAgICAgICAgKHRocmVhZCkgPT4gdGhyZWFkLmlkID09PSB0aHJlYWRJZCA/IHtcbiAgICAgICAgICAgIC4uLnRocmVhZCxcbiAgICAgICAgICAgIGNvbW1lbnRzOiBbLi4udGhyZWFkLmNvbW1lbnRzLCBjb21tZW50XVxuICAgICAgICAgIH0gOiB0aHJlYWRcbiAgICAgICAgKTtcbiAgICAgICAgbXV0YXRlKHJvb20uY3JlYXRlQ29tbWVudCh7IHRocmVhZElkLCBjb21tZW50SWQsIGJvZHkgfSksIHtcbiAgICAgICAgICBvcHRpbWlzdGljRGF0YVxuICAgICAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgaWYgKCEoZXJyIGluc3RhbmNlb2YgQ29tbWVudHNBcGlFcnJvcikpIHtcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgZXJyb3IgPSBoYW5kbGVDb21tZW50c0FwaUVycm9yKGVycik7XG4gICAgICAgICAgZXJyb3JFdmVudFNvdXJjZS5ub3RpZnkoXG4gICAgICAgICAgICBuZXcgQ3JlYXRlQ29tbWVudEVycm9yKGVycm9yLCB7XG4gICAgICAgICAgICAgIHJvb21JZDogcm9vbS5pZCxcbiAgICAgICAgICAgICAgdGhyZWFkSWQsXG4gICAgICAgICAgICAgIGNvbW1lbnRJZCxcbiAgICAgICAgICAgICAgYm9keVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGNvbW1lbnQ7XG4gICAgICB9LFxuICAgICAgW3Jvb20sIG11dGF0ZSwgbWFuYWdlcl1cbiAgICApO1xuICAgIHJldHVybiBjcmVhdGVDb21tZW50O1xuICB9XG4gIGZ1bmN0aW9uIHVzZUVkaXRDb21tZW50KHJvb20pIHtcbiAgICBjb25zdCBtYW5hZ2VyID0gdXNlUm9vbU1hbmFnZXIoKTtcbiAgICBjb25zdCBmZXRjaGVyID0gdXNlVGhyZWFkc0ZldGNoZXIoKTtcbiAgICBjb25zdCByZXZhbGlkYXRlID0gdXNlUmV2YWxpZGF0ZUNhY2hlKG1hbmFnZXIsIGZldGNoZXIpO1xuICAgIGNvbnN0IG11dGF0ZSA9IHVzZU11dGF0ZShtYW5hZ2VyLCByZXZhbGlkYXRlKTtcbiAgICBjb25zdCBlZGl0Q29tbWVudCA9IHVzZUNhbGxiYWNrMyhcbiAgICAgICh7IHRocmVhZElkLCBjb21tZW50SWQsIGJvZHkgfSkgPT4ge1xuICAgICAgICBjb25zdCB0aHJlYWRzID0gZ2V0VGhyZWFkcyhtYW5hZ2VyKTtcbiAgICAgICAgY29uc3Qgbm93ID0gLyogQF9fUFVSRV9fICovIG5ldyBEYXRlKCk7XG4gICAgICAgIGNvbnN0IG9wdGltaXN0aWNEYXRhID0gdGhyZWFkcy5tYXAoXG4gICAgICAgICAgKHRocmVhZCkgPT4gdGhyZWFkLmlkID09PSB0aHJlYWRJZCA/IHtcbiAgICAgICAgICAgIC4uLnRocmVhZCxcbiAgICAgICAgICAgIGNvbW1lbnRzOiB0aHJlYWQuY29tbWVudHMubWFwKFxuICAgICAgICAgICAgICAoY29tbWVudCkgPT4gY29tbWVudC5pZCA9PT0gY29tbWVudElkID8ge1xuICAgICAgICAgICAgICAgIC4uLmNvbW1lbnQsXG4gICAgICAgICAgICAgICAgZWRpdGVkQXQ6IG5vdyxcbiAgICAgICAgICAgICAgICBib2R5XG4gICAgICAgICAgICAgIH0gOiBjb21tZW50XG4gICAgICAgICAgICApXG4gICAgICAgICAgfSA6IHRocmVhZFxuICAgICAgICApO1xuICAgICAgICBtdXRhdGUocm9vbS5lZGl0Q29tbWVudCh7IHRocmVhZElkLCBjb21tZW50SWQsIGJvZHkgfSksIHtcbiAgICAgICAgICBvcHRpbWlzdGljRGF0YVxuICAgICAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgaWYgKCEoZXJyIGluc3RhbmNlb2YgQ29tbWVudHNBcGlFcnJvcikpIHtcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgZXJyb3IgPSBoYW5kbGVDb21tZW50c0FwaUVycm9yKGVycik7XG4gICAgICAgICAgZXJyb3JFdmVudFNvdXJjZS5ub3RpZnkoXG4gICAgICAgICAgICBuZXcgRWRpdENvbW1lbnRFcnJvcihlcnJvciwge1xuICAgICAgICAgICAgICByb29tSWQ6IHJvb20uaWQsXG4gICAgICAgICAgICAgIHRocmVhZElkLFxuICAgICAgICAgICAgICBjb21tZW50SWQsXG4gICAgICAgICAgICAgIGJvZHlcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgW3Jvb20sIG11dGF0ZSwgbWFuYWdlcl1cbiAgICApO1xuICAgIHJldHVybiBlZGl0Q29tbWVudDtcbiAgfVxuICBmdW5jdGlvbiB1c2VEZWxldGVDb21tZW50KHJvb20pIHtcbiAgICBjb25zdCBtYW5hZ2VyID0gdXNlUm9vbU1hbmFnZXIoKTtcbiAgICBjb25zdCBmZXRjaGVyID0gdXNlVGhyZWFkc0ZldGNoZXIoKTtcbiAgICBjb25zdCByZXZhbGlkYXRlID0gdXNlUmV2YWxpZGF0ZUNhY2hlKG1hbmFnZXIsIGZldGNoZXIpO1xuICAgIGNvbnN0IG11dGF0ZSA9IHVzZU11dGF0ZShtYW5hZ2VyLCByZXZhbGlkYXRlKTtcbiAgICBjb25zdCBkZWxldGVDb21tZW50ID0gdXNlQ2FsbGJhY2szKFxuICAgICAgKHsgdGhyZWFkSWQsIGNvbW1lbnRJZCB9KSA9PiB7XG4gICAgICAgIGNvbnN0IHRocmVhZHMgPSBnZXRUaHJlYWRzKG1hbmFnZXIpO1xuICAgICAgICBjb25zdCBub3cgPSAvKiBAX19QVVJFX18gKi8gbmV3IERhdGUoKTtcbiAgICAgICAgY29uc3QgbmV3VGhyZWFkcyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IHRocmVhZCBvZiB0aHJlYWRzKSB7XG4gICAgICAgICAgaWYgKHRocmVhZC5pZCA9PT0gdGhyZWFkSWQpIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld1RocmVhZCA9IHtcbiAgICAgICAgICAgICAgLi4udGhyZWFkLFxuICAgICAgICAgICAgICBjb21tZW50czogdGhyZWFkLmNvbW1lbnRzLm1hcChcbiAgICAgICAgICAgICAgICAoY29tbWVudCkgPT4gY29tbWVudC5pZCA9PT0gY29tbWVudElkID8ge1xuICAgICAgICAgICAgICAgICAgLi4uY29tbWVudCxcbiAgICAgICAgICAgICAgICAgIGRlbGV0ZWRBdDogbm93LFxuICAgICAgICAgICAgICAgICAgYm9keTogdm9pZCAwXG4gICAgICAgICAgICAgICAgfSA6IGNvbW1lbnRcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChuZXdUaHJlYWQuY29tbWVudHMuc29tZShcbiAgICAgICAgICAgICAgKGNvbW1lbnQpID0+IGNvbW1lbnQuZGVsZXRlZEF0ID09PSB2b2lkIDBcbiAgICAgICAgICAgICkpIHtcbiAgICAgICAgICAgICAgbmV3VGhyZWFkcy5wdXNoKG5ld1RocmVhZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ld1RocmVhZHMucHVzaCh0aHJlYWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBtdXRhdGUocm9vbS5kZWxldGVDb21tZW50KHsgdGhyZWFkSWQsIGNvbW1lbnRJZCB9KSwge1xuICAgICAgICAgIG9wdGltaXN0aWNEYXRhOiBuZXdUaHJlYWRzXG4gICAgICAgIH0pLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICBpZiAoIShlcnIgaW5zdGFuY2VvZiBDb21tZW50c0FwaUVycm9yKSkge1xuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBlcnJvciA9IGhhbmRsZUNvbW1lbnRzQXBpRXJyb3IoZXJyKTtcbiAgICAgICAgICBlcnJvckV2ZW50U291cmNlLm5vdGlmeShcbiAgICAgICAgICAgIG5ldyBEZWxldGVDb21tZW50RXJyb3IoZXJyb3IsIHtcbiAgICAgICAgICAgICAgcm9vbUlkOiByb29tLmlkLFxuICAgICAgICAgICAgICB0aHJlYWRJZCxcbiAgICAgICAgICAgICAgY29tbWVudElkXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIFtyb29tLCBtdXRhdGUsIG1hbmFnZXJdXG4gICAgKTtcbiAgICByZXR1cm4gZGVsZXRlQ29tbWVudDtcbiAgfVxuICBmdW5jdGlvbiB1c2VBZGRSZWFjdGlvbihyb29tKSB7XG4gICAgY29uc3QgbWFuYWdlciA9IHVzZVJvb21NYW5hZ2VyKCk7XG4gICAgY29uc3QgZmV0Y2hlciA9IHVzZVRocmVhZHNGZXRjaGVyKCk7XG4gICAgY29uc3QgcmV2YWxpZGF0ZSA9IHVzZVJldmFsaWRhdGVDYWNoZShtYW5hZ2VyLCBmZXRjaGVyKTtcbiAgICBjb25zdCBtdXRhdGUgPSB1c2VNdXRhdGUobWFuYWdlciwgcmV2YWxpZGF0ZSk7XG4gICAgY29uc3QgY3JlYXRlQ29tbWVudCA9IHVzZUNhbGxiYWNrMyhcbiAgICAgICh7IHRocmVhZElkLCBjb21tZW50SWQsIGVtb2ppIH0pID0+IHtcbiAgICAgICAgY29uc3QgdGhyZWFkcyA9IGdldFRocmVhZHMobWFuYWdlcik7XG4gICAgICAgIGNvbnN0IG5vdyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgRGF0ZSgpO1xuICAgICAgICBjb25zdCB1c2VySWQgPSBnZXRDdXJyZW50VXNlcklkKHJvb20pO1xuICAgICAgICBjb25zdCBvcHRpbWlzdGljRGF0YSA9IHRocmVhZHMubWFwKFxuICAgICAgICAgICh0aHJlYWQpID0+IHRocmVhZC5pZCA9PT0gdGhyZWFkSWQgPyB7XG4gICAgICAgICAgICAuLi50aHJlYWQsXG4gICAgICAgICAgICBjb21tZW50czogdGhyZWFkLmNvbW1lbnRzLm1hcCgoY29tbWVudCkgPT4ge1xuICAgICAgICAgICAgICBpZiAoY29tbWVudC5pZCAhPT0gY29tbWVudElkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1lbnQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgbGV0IHJlYWN0aW9ucztcbiAgICAgICAgICAgICAgaWYgKGNvbW1lbnQucmVhY3Rpb25zLnNvbWUoXG4gICAgICAgICAgICAgICAgKHJlYWN0aW9uKSA9PiByZWFjdGlvbi5lbW9qaSA9PT0gZW1vamlcbiAgICAgICAgICAgICAgKSkge1xuICAgICAgICAgICAgICAgIHJlYWN0aW9ucyA9IGNvbW1lbnQucmVhY3Rpb25zLm1hcChcbiAgICAgICAgICAgICAgICAgIChyZWFjdGlvbikgPT4gcmVhY3Rpb24uZW1vamkgPT09IGVtb2ppID8ge1xuICAgICAgICAgICAgICAgICAgICAuLi5yZWFjdGlvbixcbiAgICAgICAgICAgICAgICAgICAgdXNlcnM6IFsuLi5yZWFjdGlvbi51c2VycywgeyBpZDogdXNlcklkIH1dXG4gICAgICAgICAgICAgICAgICB9IDogcmVhY3Rpb25cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlYWN0aW9ucyA9IFtcbiAgICAgICAgICAgICAgICAgIC4uLmNvbW1lbnQucmVhY3Rpb25zLFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBlbW9qaSxcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlZEF0OiBub3csXG4gICAgICAgICAgICAgICAgICAgIHVzZXJzOiBbeyBpZDogdXNlcklkIH1dXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLmNvbW1lbnQsXG4gICAgICAgICAgICAgICAgcmVhY3Rpb25zXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0gOiB0aHJlYWRcbiAgICAgICAgKTtcbiAgICAgICAgbXV0YXRlKHJvb20uYWRkUmVhY3Rpb24oeyB0aHJlYWRJZCwgY29tbWVudElkLCBlbW9qaSB9KSwge1xuICAgICAgICAgIG9wdGltaXN0aWNEYXRhXG4gICAgICAgIH0pLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICBpZiAoIShlcnIgaW5zdGFuY2VvZiBDb21tZW50c0FwaUVycm9yKSkge1xuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBlcnJvciA9IGhhbmRsZUNvbW1lbnRzQXBpRXJyb3IoZXJyKTtcbiAgICAgICAgICBlcnJvckV2ZW50U291cmNlLm5vdGlmeShcbiAgICAgICAgICAgIG5ldyBBZGRSZWFjdGlvbkVycm9yKGVycm9yLCB7XG4gICAgICAgICAgICAgIHJvb21JZDogcm9vbS5pZCxcbiAgICAgICAgICAgICAgdGhyZWFkSWQsXG4gICAgICAgICAgICAgIGNvbW1lbnRJZCxcbiAgICAgICAgICAgICAgZW1vamlcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgW3Jvb20sIG11dGF0ZSwgbWFuYWdlcl1cbiAgICApO1xuICAgIHJldHVybiBjcmVhdGVDb21tZW50O1xuICB9XG4gIGZ1bmN0aW9uIHVzZVJlbW92ZVJlYWN0aW9uKHJvb20pIHtcbiAgICBjb25zdCBtYW5hZ2VyID0gdXNlUm9vbU1hbmFnZXIoKTtcbiAgICBjb25zdCBmZXRjaGVyID0gdXNlVGhyZWFkc0ZldGNoZXIoKTtcbiAgICBjb25zdCByZXZhbGlkYXRlID0gdXNlUmV2YWxpZGF0ZUNhY2hlKG1hbmFnZXIsIGZldGNoZXIpO1xuICAgIGNvbnN0IG11dGF0ZSA9IHVzZU11dGF0ZShtYW5hZ2VyLCByZXZhbGlkYXRlKTtcbiAgICBjb25zdCBjcmVhdGVDb21tZW50ID0gdXNlQ2FsbGJhY2szKFxuICAgICAgKHsgdGhyZWFkSWQsIGNvbW1lbnRJZCwgZW1vamkgfSkgPT4ge1xuICAgICAgICBjb25zdCB0aHJlYWRzID0gZ2V0VGhyZWFkcyhtYW5hZ2VyKTtcbiAgICAgICAgY29uc3QgdXNlcklkID0gZ2V0Q3VycmVudFVzZXJJZChyb29tKTtcbiAgICAgICAgY29uc3Qgb3B0aW1pc3RpY0RhdGEgPSB0aHJlYWRzLm1hcChcbiAgICAgICAgICAodGhyZWFkKSA9PiB0aHJlYWQuaWQgPT09IHRocmVhZElkID8ge1xuICAgICAgICAgICAgLi4udGhyZWFkLFxuICAgICAgICAgICAgY29tbWVudHM6IHRocmVhZC5jb21tZW50cy5tYXAoKGNvbW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgaWYgKGNvbW1lbnQuaWQgIT09IGNvbW1lbnRJZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb21tZW50O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNvbnN0IHJlYWN0aW9uSW5kZXggPSBjb21tZW50LnJlYWN0aW9ucy5maW5kSW5kZXgoXG4gICAgICAgICAgICAgICAgKHJlYWN0aW9uKSA9PiByZWFjdGlvbi5lbW9qaSA9PT0gZW1vamlcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgbGV0IHJlYWN0aW9ucyA9IGNvbW1lbnQucmVhY3Rpb25zO1xuICAgICAgICAgICAgICBpZiAocmVhY3Rpb25JbmRleCA+PSAwICYmIGNvbW1lbnQucmVhY3Rpb25zW3JlYWN0aW9uSW5kZXhdLnVzZXJzLnNvbWUoXG4gICAgICAgICAgICAgICAgKHVzZXIpID0+IHVzZXIuaWQgPT09IHVzZXJJZFxuICAgICAgICAgICAgICApKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbW1lbnQucmVhY3Rpb25zW3JlYWN0aW9uSW5kZXhdLnVzZXJzLmxlbmd0aCA8PSAxKSB7XG4gICAgICAgICAgICAgICAgICByZWFjdGlvbnMgPSBbLi4uY29tbWVudC5yZWFjdGlvbnNdO1xuICAgICAgICAgICAgICAgICAgcmVhY3Rpb25zLnNwbGljZShyZWFjdGlvbkluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcmVhY3Rpb25zW3JlYWN0aW9uSW5kZXhdID0ge1xuICAgICAgICAgICAgICAgICAgICAuLi5yZWFjdGlvbnNbcmVhY3Rpb25JbmRleF0sXG4gICAgICAgICAgICAgICAgICAgIHVzZXJzOiByZWFjdGlvbnNbcmVhY3Rpb25JbmRleF0udXNlcnMuZmlsdGVyKFxuICAgICAgICAgICAgICAgICAgICAgICh1c2VyKSA9PiB1c2VyLmlkICE9PSB1c2VySWRcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5jb21tZW50LFxuICAgICAgICAgICAgICAgIHJlYWN0aW9uc1xuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9IDogdGhyZWFkXG4gICAgICAgICk7XG4gICAgICAgIG11dGF0ZShyb29tLnJlbW92ZVJlYWN0aW9uKHsgdGhyZWFkSWQsIGNvbW1lbnRJZCwgZW1vamkgfSksIHtcbiAgICAgICAgICBvcHRpbWlzdGljRGF0YVxuICAgICAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgaWYgKCEoZXJyIGluc3RhbmNlb2YgQ29tbWVudHNBcGlFcnJvcikpIHtcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgZXJyb3IgPSBoYW5kbGVDb21tZW50c0FwaUVycm9yKGVycik7XG4gICAgICAgICAgZXJyb3JFdmVudFNvdXJjZS5ub3RpZnkoXG4gICAgICAgICAgICBuZXcgUmVtb3ZlUmVhY3Rpb25FcnJvcihlcnJvciwge1xuICAgICAgICAgICAgICByb29tSWQ6IHJvb20uaWQsXG4gICAgICAgICAgICAgIHRocmVhZElkLFxuICAgICAgICAgICAgICBjb21tZW50SWQsXG4gICAgICAgICAgICAgIGVtb2ppXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIFtyb29tLCBtdXRhdGUsIG1hbmFnZXJdXG4gICAgKTtcbiAgICByZXR1cm4gY3JlYXRlQ29tbWVudDtcbiAgfVxuICByZXR1cm4ge1xuICAgIENvbW1lbnRzUm9vbVByb3ZpZGVyLFxuICAgIHVzZVRocmVhZHMsXG4gICAgdXNlVGhyZWFkc1N1c3BlbnNlLFxuICAgIHVzZUVkaXRUaHJlYWRNZXRhZGF0YSxcbiAgICB1c2VDcmVhdGVUaHJlYWQsXG4gICAgdXNlQ3JlYXRlQ29tbWVudCxcbiAgICB1c2VFZGl0Q29tbWVudCxcbiAgICB1c2VEZWxldGVDb21tZW50LFxuICAgIHVzZUFkZFJlYWN0aW9uLFxuICAgIHVzZVJlbW92ZVJlYWN0aW9uXG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVPcHRpbWlzdGljSWQocHJlZml4KSB7XG4gIHJldHVybiBgJHtwcmVmaXh9XyR7bmFub2lkKCl9YDtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVRocmVhZElkKCkge1xuICByZXR1cm4gY3JlYXRlT3B0aW1pc3RpY0lkKFRIUkVBRF9JRF9QUkVGSVgpO1xufVxuZnVuY3Rpb24gY3JlYXRlQ29tbWVudElkKCkge1xuICByZXR1cm4gY3JlYXRlT3B0aW1pc3RpY0lkKENPTU1FTlRfSURfUFJFRklYKTtcbn1cbmZ1bmN0aW9uIGdldEN1cnJlbnRVc2VySWQocm9vbSkge1xuICBjb25zdCBzZWxmID0gcm9vbS5nZXRTZWxmKCk7XG4gIGlmIChzZWxmID09PSBudWxsIHx8IHNlbGYuaWQgPT09IHZvaWQgMCkge1xuICAgIHJldHVybiBcImFub255bW91c1wiO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzZWxmLmlkO1xuICB9XG59XG5mdW5jdGlvbiBoYW5kbGVDb21tZW50c0FwaUVycm9yKGVycikge1xuICBjb25zdCBtZXNzYWdlID0gYFJlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzICR7ZXJyLnN0YXR1c306ICR7ZXJyLm1lc3NhZ2V9YDtcbiAgaWYgKGVyci5kZXRhaWxzPy5lcnJvciA9PT0gXCJGT1JCSURERU5cIikge1xuICAgIGNvbnN0IGRldGFpbGVkTWVzc2FnZSA9IFttZXNzYWdlLCBlcnIuZGV0YWlscy5zdWdnZXN0aW9uLCBlcnIuZGV0YWlscy5kb2NzXS5maWx0ZXIoQm9vbGVhbikuam9pbihcIlxcblwiKTtcbiAgICBjb25zb2xlLmVycm9yKGRldGFpbGVkTWVzc2FnZSk7XG4gIH1cbiAgcmV0dXJuIG5ldyBFcnJvcihtZXNzYWdlKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVJvb21SZXZhbGlkYXRpb25NYW5hZ2VyKHJvb21JZCwge1xuICBnZXRDYWNoZSxcbiAgc2V0Q2FjaGVcbn0pIHtcbiAgbGV0IHJlcXVlc3Q7XG4gIGxldCBlcnJvcjtcbiAgbGV0IG11dGF0aW9uO1xuICBjb25zdCByZXZhbGlkYXRpb25NYW5hZ2VyQnlPcHRpb25zID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgY29uc3QgcmVmZXJlbmNlQ291bnRCeU9wdGlvbnMgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICByZXR1cm4ge1xuICAgIC8vIENhY2hlXG4gICAgZ2V0Q2FjaGUoKSB7XG4gICAgICBjb25zdCB0aHJlYWRzID0gZ2V0Q2FjaGUoKTtcbiAgICAgIGNvbnN0IGZpbHRlcmVkID0gdGhyZWFkcy5maWx0ZXIoKHRocmVhZCkgPT4gdGhyZWFkLnJvb21JZCA9PT0gcm9vbUlkKTtcbiAgICAgIHJldHVybiBmaWx0ZXJlZDtcbiAgICB9LFxuICAgIHNldENhY2hlKHZhbHVlKSB7XG4gICAgICBmb3IgKGNvbnN0IGtleSBvZiByZXZhbGlkYXRpb25NYW5hZ2VyQnlPcHRpb25zLmtleXMoKSkge1xuICAgICAgICBpZiAocmVmZXJlbmNlQ291bnRCeU9wdGlvbnMuZ2V0KGtleSkgPT09IDApIHtcbiAgICAgICAgICByZXZhbGlkYXRpb25NYW5hZ2VyQnlPcHRpb25zLmRlbGV0ZShrZXkpO1xuICAgICAgICAgIHJlZmVyZW5jZUNvdW50QnlPcHRpb25zLmRlbGV0ZShrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zdCBzb3J0ZWQgPSB2YWx1ZS5zb3J0KFxuICAgICAgICAoYSwgYikgPT4gbmV3IERhdGUoYS5jcmVhdGVkQXQpLmdldFRpbWUoKSAtIG5ldyBEYXRlKGIuY3JlYXRlZEF0KS5nZXRUaW1lKClcbiAgICAgICk7XG4gICAgICBjb25zdCB0aHJlYWRzID0gZ2V0Q2FjaGUoKTtcbiAgICAgIGNvbnN0IG5ld1RocmVhZHMgPSB0aHJlYWRzLmZpbHRlcigodGhyZWFkKSA9PiB0aHJlYWQucm9vbUlkICE9PSByb29tSWQpLmNvbmNhdChzb3J0ZWQpO1xuICAgICAgc2V0Q2FjaGUobmV3VGhyZWFkcyk7XG4gICAgfSxcbiAgICAvLyBSZXF1ZXN0XG4gICAgZ2V0UmVxdWVzdCgpIHtcbiAgICAgIHJldHVybiByZXF1ZXN0O1xuICAgIH0sXG4gICAgc2V0UmVxdWVzdCh2YWx1ZSkge1xuICAgICAgcmVxdWVzdCA9IHZhbHVlO1xuICAgIH0sXG4gICAgLy8gRXJyb3JcbiAgICBnZXRFcnJvcigpIHtcbiAgICAgIHJldHVybiBlcnJvcjtcbiAgICB9LFxuICAgIHNldEVycm9yKGVycikge1xuICAgICAgZXJyb3IgPSBlcnI7XG4gICAgfSxcbiAgICAvLyBNdXRhdGlvblxuICAgIGdldE11dGF0aW9uKCkge1xuICAgICAgcmV0dXJuIG11dGF0aW9uO1xuICAgIH0sXG4gICAgc2V0TXV0YXRpb24oaW5mbykge1xuICAgICAgbXV0YXRpb24gPSBpbmZvO1xuICAgIH0sXG4gICAgZ2V0UmV2YWxpZGF0aW9uTWFuYWdlcnMoKSB7XG4gICAgICByZXR1cm4gQXJyYXkuZnJvbShyZXZhbGlkYXRpb25NYW5hZ2VyQnlPcHRpb25zLmVudHJpZXMoKSk7XG4gICAgfSxcbiAgICBnZXRSZXZhbGlkYXRpb25NYW5hZ2VyKGtleSkge1xuICAgICAgcmV0dXJuIHJldmFsaWRhdGlvbk1hbmFnZXJCeU9wdGlvbnMuZ2V0KGtleSk7XG4gICAgfSxcbiAgICBzZXRSZXZhbGlkYXRpb25tYW5hZ2VyKGtleSwgbWFuYWdlcikge1xuICAgICAgcmV2YWxpZGF0aW9uTWFuYWdlckJ5T3B0aW9ucy5zZXQoa2V5LCBtYW5hZ2VyKTtcbiAgICB9LFxuICAgIGdldFRvdGFsUmVmZXJlbmNlQ291bnQoKSB7XG4gICAgICByZXR1cm4gQXJyYXkuZnJvbShyZWZlcmVuY2VDb3VudEJ5T3B0aW9ucy52YWx1ZXMoKSkucmVkdWNlKFxuICAgICAgICAoYWNjLCBjb3VudCkgPT4gYWNjICsgY291bnQsXG4gICAgICAgIDBcbiAgICAgICk7XG4gICAgfSxcbiAgICBpbmNyZW1lbnRSZWZlcmVuY2VDb3VudChrZXkpIHtcbiAgICAgIGNvbnN0IGNvdW50ID0gcmVmZXJlbmNlQ291bnRCeU9wdGlvbnMuZ2V0KGtleSkgPz8gMDtcbiAgICAgIHJlZmVyZW5jZUNvdW50QnlPcHRpb25zLnNldChrZXksIGNvdW50ICsgMSk7XG4gICAgfSxcbiAgICBkZWNyZW1lbnRSZWZlcmVuY2VDb3VudChrZXkpIHtcbiAgICAgIGNvbnN0IGNvdW50ID0gcmVmZXJlbmNlQ291bnRCeU9wdGlvbnMuZ2V0KGtleSkgPz8gMDtcbiAgICAgIHJlZmVyZW5jZUNvdW50QnlPcHRpb25zLnNldChrZXksIGNvdW50IC0gMSk7XG4gICAgfSxcbiAgICBnZXRSZWZlcmVuY2VDb3VudChrZXkpIHtcbiAgICAgIHJldHVybiByZWZlcmVuY2VDb3VudEJ5T3B0aW9ucy5nZXQoa2V5KSA/PyAwO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUNsaWVudENhY2hlU3RvcmUoKSB7XG4gIGxldCB0aHJlYWRzID0gW107XG4gIGNvbnN0IHRocmVhZHNFdmVudFNvdXJjZSA9IG1ha2VFdmVudFNvdXJjZSgpO1xuICByZXR1cm4ge1xuICAgIGdldFRocmVhZHMoKSB7XG4gICAgICByZXR1cm4gdGhyZWFkcztcbiAgICB9LFxuICAgIHNldFRocmVhZHModmFsdWUpIHtcbiAgICAgIHRocmVhZHMgPSB2YWx1ZTtcbiAgICAgIHRocmVhZHNFdmVudFNvdXJjZS5ub3RpZnkodGhyZWFkcyk7XG4gICAgfSxcbiAgICBzdWJzY3JpYmUoY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiB0aHJlYWRzRXZlbnRTb3VyY2Uuc3Vic2NyaWJlKGNhbGxiYWNrKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVVc2VUaHJlYWRzUmV2YWxpZGF0aW9uTWFuYWdlcihvcHRpb25zLCBtYW5hZ2VyKSB7XG4gIGxldCBpc0xvYWRpbmcgPSB0cnVlO1xuICBsZXQgcmVxdWVzdDtcbiAgbGV0IGVycm9yO1xuICByZXR1cm4ge1xuICAgIC8vIENhY2hlXG4gICAgZ2V0Q2FjaGUoKSB7XG4gICAgICByZXR1cm4gdm9pZCAwO1xuICAgIH0sXG4gICAgc2V0Q2FjaGUodmFsdWUpIHtcbiAgICAgIGNvbnN0IGNhY2hlID0gbmV3IE1hcChcbiAgICAgICAgKG1hbmFnZXIuZ2V0Q2FjaGUoKSA/PyBbXSkubWFwKCh0aHJlYWQpID0+IFt0aHJlYWQuaWQsIHRocmVhZF0pXG4gICAgICApO1xuICAgICAgZm9yIChjb25zdCB0aHJlYWQgb2YgdmFsdWUpIHtcbiAgICAgICAgY2FjaGUuc2V0KHRocmVhZC5pZCwgdGhyZWFkKTtcbiAgICAgIH1cbiAgICAgIG1hbmFnZXIuc2V0Q2FjaGUoQXJyYXkuZnJvbShjYWNoZS52YWx1ZXMoKSkpO1xuICAgICAgaXNMb2FkaW5nID0gZmFsc2U7XG4gICAgfSxcbiAgICAvLyBSZXF1ZXN0XG4gICAgZ2V0UmVxdWVzdCgpIHtcbiAgICAgIHJldHVybiByZXF1ZXN0O1xuICAgIH0sXG4gICAgc2V0UmVxdWVzdCh2YWx1ZSkge1xuICAgICAgcmVxdWVzdCA9IHZhbHVlO1xuICAgIH0sXG4gICAgLy8gRXJyb3JcbiAgICBnZXRFcnJvcigpIHtcbiAgICAgIHJldHVybiBlcnJvcjtcbiAgICB9LFxuICAgIHNldEVycm9yKGVycikge1xuICAgICAgZXJyb3IgPSBlcnI7XG4gICAgICBpc0xvYWRpbmcgPSBmYWxzZTtcbiAgICAgIGNvbnN0IGNhY2hlID0gbWFuYWdlci5nZXRDYWNoZSgpO1xuICAgICAgbWFuYWdlci5zZXRDYWNoZShjYWNoZSk7XG4gICAgfSxcbiAgICAvLyBNdXRhdGlvblxuICAgIGdldE11dGF0aW9uKCkge1xuICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICB9LFxuICAgIHNldE11dGF0aW9uKF8pIHtcbiAgICAgIHJldHVybjtcbiAgICB9LFxuICAgIGdldE9wdGlvbnMoKSB7XG4gICAgICByZXR1cm4gb3B0aW9ucztcbiAgICB9LFxuICAgIGdldElzTG9hZGluZygpIHtcbiAgICAgIHJldHVybiBpc0xvYWRpbmc7XG4gICAgfSxcbiAgICBzZXRJc0xvYWRpbmcodmFsdWUpIHtcbiAgICAgIGlzTG9hZGluZyA9IHZhbHVlO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGdldFBvbGxpbmdJbnRlcnZhbChpc0Jyb3dzZXJPbmxpbmUsIGlzRG9jdW1lbnRWaXNpYmxlLCBpc1Jvb21Db25uZWN0ZWQpIHtcbiAgaWYgKCFpc0Jyb3dzZXJPbmxpbmUgfHwgIWlzRG9jdW1lbnRWaXNpYmxlKVxuICAgIHJldHVybjtcbiAgaWYgKGlzUm9vbUNvbm5lY3RlZClcbiAgICByZXR1cm4gUE9MTElOR19JTlRFUlZBTF9SRUFMVElNRTtcbiAgcmV0dXJuIFBPTExJTkdfSU5URVJWQUw7XG59XG5cbi8vIHNyYy9jb21tZW50cy9saWIvdXNlLWRlYm91bmNlLnRzXG5pbXBvcnQgeyB1c2VFZmZlY3QgYXMgdXNlRWZmZWN0NCwgdXNlUmVmIGFzIHVzZVJlZjMsIHVzZVN0YXRlIGFzIHVzZVN0YXRlMiB9IGZyb20gXCJyZWFjdFwiO1xudmFyIERFRkFVTFRfREVMQVkgPSA1MDA7XG5mdW5jdGlvbiB1c2VEZWJvdW5jZSh2YWx1ZSwgZGVsYXkgPSBERUZBVUxUX0RFTEFZKSB7XG4gIGNvbnN0IHRpbWVvdXQgPSB1c2VSZWYzKCk7XG4gIGNvbnN0IFtkZWJvdW5jZWRWYWx1ZSwgc2V0RGVib3VuY2VkVmFsdWVdID0gdXNlU3RhdGUyKHZhbHVlKTtcbiAgdXNlRWZmZWN0NCgoKSA9PiB7XG4gICAgaWYgKGRlbGF5ID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodGltZW91dC5jdXJyZW50ID09PSB2b2lkIDApIHtcbiAgICAgIHNldERlYm91bmNlZFZhbHVlKHZhbHVlKTtcbiAgICB9XG4gICAgdGltZW91dC5jdXJyZW50ID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgc2V0RGVib3VuY2VkVmFsdWUodmFsdWUpO1xuICAgICAgdGltZW91dC5jdXJyZW50ID0gdm9pZCAwO1xuICAgIH0sIGRlbGF5KTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgd2luZG93LmNsZWFyVGltZW91dCh0aW1lb3V0LmN1cnJlbnQpO1xuICAgIH07XG4gIH0sIFt2YWx1ZSwgZGVsYXldKTtcbiAgcmV0dXJuIGRlYm91bmNlZFZhbHVlO1xufVxuXG4vLyBzcmMvbGliL3VzZS1hc3luYy1jYWNoZS50c1xuaW1wb3J0IHsgdXNlQ2FsbGJhY2sgYXMgdXNlQ2FsbGJhY2s0LCB1c2VFZmZlY3QgYXMgdXNlRWZmZWN0NSwgdXNlTWVtbyBhcyB1c2VNZW1vMiwgdXNlUmVmIGFzIHVzZVJlZjQgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZVN5bmNFeHRlcm5hbFN0b3JlIGFzIHVzZVN5bmNFeHRlcm5hbFN0b3JlNCB9IGZyb20gXCJ1c2Utc3luYy1leHRlcm5hbC1zdG9yZS9zaGltL2luZGV4LmpzXCI7XG5cbi8vIHNyYy9saWIvdXNlLWluaXRpYWwudHNcbmltcG9ydCB7IHVzZVN0YXRlIGFzIHVzZVN0YXRlMyB9IGZyb20gXCJyZWFjdFwiO1xuZnVuY3Rpb24gdXNlSW5pdGlhbCh2YWx1ZSkge1xuICByZXR1cm4gdXNlU3RhdGUzKHZhbHVlKVswXTtcbn1cblxuLy8gc3JjL2xpYi91c2UtYXN5bmMtY2FjaGUudHNcbnZhciBJTklUSUFMX0FTWU5DX1NUQVRFID0ge1xuICBpc0xvYWRpbmc6IGZhbHNlLFxuICBkYXRhOiB2b2lkIDAsXG4gIGVycm9yOiB2b2lkIDBcbn07XG52YXIgbm9vcCA9ICgpID0+IHtcbn07XG5mdW5jdGlvbiB1c2VBc3luY0NhY2hlKGNhY2hlLCBrZXksIG9wdGlvbnMpIHtcbiAgY29uc3QgZnJvemVuT3B0aW9ucyA9IHVzZUluaXRpYWwob3B0aW9ucyk7XG4gIGNvbnN0IGNhY2hlSXRlbSA9IHVzZU1lbW8yKCgpID0+IHtcbiAgICBpZiAoa2V5ID09PSBudWxsIHx8ICFjYWNoZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IGNhY2hlSXRlbTIgPSBjYWNoZS5jcmVhdGUoa2V5KTtcbiAgICB2b2lkIGNhY2hlSXRlbTIuZ2V0KCk7XG4gICAgcmV0dXJuIGNhY2hlSXRlbTI7XG4gIH0sIFtjYWNoZSwga2V5XSk7XG4gIGNvbnN0IHN1YnNjcmliZTIgPSB1c2VDYWxsYmFjazQoXG4gICAgKGNhbGxiYWNrKSA9PiBjYWNoZUl0ZW0/LnN1YnNjcmliZShjYWxsYmFjaykgPz8gbm9vcCxcbiAgICBbY2FjaGVJdGVtXVxuICApO1xuICBjb25zdCBnZXRTdGF0ZSA9IHVzZUNhbGxiYWNrNChcbiAgICAoKSA9PiBjYWNoZUl0ZW0/LmdldFN0YXRlKCkgPz8gSU5JVElBTF9BU1lOQ19TVEFURSxcbiAgICBbY2FjaGVJdGVtXVxuICApO1xuICBjb25zdCByZXZhbGlkYXRlID0gdXNlQ2FsbGJhY2s0KCgpID0+IGNhY2hlSXRlbT8ucmV2YWxpZGF0ZSgpLCBbY2FjaGVJdGVtXSk7XG4gIGNvbnN0IHN0YXRlID0gdXNlU3luY0V4dGVybmFsU3RvcmU0KHN1YnNjcmliZTIsIGdldFN0YXRlLCBnZXRTdGF0ZSk7XG4gIGNvbnN0IHByZXZpb3VzRGF0YSA9IHVzZVJlZjQoKTtcbiAgbGV0IGRhdGEgPSBzdGF0ZS5kYXRhO1xuICB1c2VFZmZlY3Q1KCgpID0+IHtcbiAgICBwcmV2aW91c0RhdGEuY3VycmVudCA9IHsga2V5LCBkYXRhOiBzdGF0ZS5kYXRhIH07XG4gIH0sIFtrZXksIHN0YXRlLmRhdGFdKTtcbiAgaWYgKCFjYWNoZUl0ZW0pIHtcbiAgICByZXR1cm4ge1xuICAgICAgaXNMb2FkaW5nOiBmYWxzZSxcbiAgICAgIGRhdGE6IHZvaWQgMCxcbiAgICAgIGVycm9yOiB2b2lkIDAsXG4gICAgICBnZXRTdGF0ZSxcbiAgICAgIHJldmFsaWRhdGVcbiAgICB9O1xuICB9XG4gIGlmIChmcm96ZW5PcHRpb25zPy5zdXNwZW5zZSkge1xuICAgIGNvbnN0IGVycm9yID0gZ2V0U3RhdGUoKS5lcnJvcjtcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH0gZWxzZSBpZiAoZ2V0U3RhdGUoKS5pc0xvYWRpbmcpIHtcbiAgICAgIHRocm93IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgIGNhY2hlSXRlbS5zdWJzY3JpYmVPbmNlKChzdGF0ZTIpID0+IHtcbiAgICAgICAgICBpZiAoIXN0YXRlMi5pc0xvYWRpbmcpIHtcbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGlmIChzdGF0ZS5pc0xvYWRpbmcgJiYgZnJvemVuT3B0aW9ucz8ua2VlcFByZXZpb3VzRGF0YVdoaWxlTG9hZGluZyAmJiB0eXBlb2Ygc3RhdGUuZGF0YSA9PT0gXCJ1bmRlZmluZWRcIiAmJiBwcmV2aW91c0RhdGEuY3VycmVudD8ua2V5ICE9PSBrZXkgJiYgdHlwZW9mIHByZXZpb3VzRGF0YS5jdXJyZW50Py5kYXRhICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgZGF0YSA9IHByZXZpb3VzRGF0YS5jdXJyZW50LmRhdGE7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBpc0xvYWRpbmc6IHN0YXRlLmlzTG9hZGluZyxcbiAgICBkYXRhLFxuICAgIGVycm9yOiBzdGF0ZS5lcnJvcixcbiAgICBnZXRTdGF0ZSxcbiAgICByZXZhbGlkYXRlXG4gIH07XG59XG5cbi8vIHNyYy9saWIvdXNlLWxhdGVzdC50c1xuaW1wb3J0IHsgdXNlRWZmZWN0IGFzIHVzZUVmZmVjdDYsIHVzZVJlZiBhcyB1c2VSZWY1IH0gZnJvbSBcInJlYWN0XCI7XG5mdW5jdGlvbiB1c2VMYXRlc3QodmFsdWUpIHtcbiAgY29uc3QgcmVmID0gdXNlUmVmNSh2YWx1ZSk7XG4gIHVzZUVmZmVjdDYoKCkgPT4ge1xuICAgIHJlZi5jdXJyZW50ID0gdmFsdWU7XG4gIH0sIFt2YWx1ZV0pO1xuICByZXR1cm4gcmVmO1xufVxuXG4vLyBzcmMvbGliL3VzZS1yZXJlbmRlci50c1xuaW1wb3J0IHsgdXNlUmVkdWNlciB9IGZyb20gXCJyZWFjdFwiO1xuZnVuY3Rpb24gdXNlUmVyZW5kZXIoKSB7XG4gIGNvbnN0IFssIHVwZGF0ZV0gPSB1c2VSZWR1Y2VyKFxuICAgIC8vIFRoaXMgaW1wbGVtZW50YXRpb24gd29ya3MgYnkgaW5jcmVtZW50aW5nIGEgaGlkZGVuIGNvdW50ZXIgdmFsdWUgdGhhdCBpc1xuICAgIC8vIG5ldmVyIGNvbnN1bWVkLiBTaW1wbHkgaW5jcmVtZW50aW5nIHRoZSBjb3VudGVyIGNoYW5nZXMgdGhlIGNvbXBvbmVudCdzXG4gICAgLy8gc3RhdGUgYW5kLCB0aHVzLCB0cmlnZ2VyIGEgcmUtcmVuZGVyLlxuICAgICh4KSA9PiB4ICsgMSxcbiAgICAwXG4gICk7XG4gIHJldHVybiB1cGRhdGU7XG59XG5cbi8vIHNyYy9mYWN0b3J5LnRzeFxudmFyIG5vb3AyID0gKCkgPT4ge1xufTtcbnZhciBpZGVudGl0eSA9ICh4KSA9PiB4O1xudmFyIG1pc3NpbmdfdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMgPSAocmVhY3RWZXJzaW9uLCByb29tSWQpID0+IGBXZSBub3RpY2VkIHlvdVxcdTIwMTlyZSB1c2luZyBSZWFjdCAke3JlYWN0VmVyc2lvbn0uIFBsZWFzZSBwYXNzIHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIGF0IHRoZSBSb29tUHJvdmlkZXIgbGV2ZWwgdW50aWwgeW91XFx1MjAxOXJlIHJlYWR5IHRvIHVwZ3JhZGUgdG8gUmVhY3QgMTg6XG5cbiAgICBpbXBvcnQgeyB1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyB9IGZyb20gXCJyZWFjdC1kb21cIjsgIC8vIG9yIFwicmVhY3QtbmF0aXZlXCJcblxuICAgIDxSb29tUHJvdmlkZXIgaWQ9JHtKU09OLnN0cmluZ2lmeShcbiAgcm9vbUlkXG4pfSAuLi4gdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM9e3Vuc3RhYmxlX2JhdGNoZWRVcGRhdGVzfT5cbiAgICAgIC4uLlxuICAgIDwvUm9vbVByb3ZpZGVyPlxuXG5XaHk/IFBsZWFzZSBzZWUgaHR0cHM6Ly9saXZlYmxvY2tzLmlvL2RvY3MvcGxhdGZvcm0vdHJvdWJsZXNob290aW5nI3N0YWxlLXByb3BzLXpvbWJpZS1jaGlsZCBmb3IgbW9yZSBpbmZvcm1hdGlvbmA7XG52YXIgc3VwZXJmbHVvdXNfdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMgPSBcIllvdSBkb25cXHUyMDE5dCBuZWVkIHRvIHBhc3MgdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMgdG8gUm9vbVByb3ZpZGVyIGFueW1vcmUsIHNpbmNlIHlvdVxcdTIwMTlyZSBvbiBSZWFjdCAxOCsgYWxyZWFkeS5cIjtcbmZ1bmN0aW9uIHVzZVN5bmNFeHRlcm5hbFN0b3JlMyhzLCBncywgZ3NzKSB7XG4gIHJldHVybiB1c2VTeW5jRXh0ZXJuYWxTdG9yZVdpdGhTZWxlY3RvcjIocywgZ3MsIGdzcywgaWRlbnRpdHkpO1xufVxudmFyIFNUQUJMRV9FTVBUWV9MSVNUID0gT2JqZWN0LmZyZWV6ZShbXSk7XG5mdW5jdGlvbiBhbHdheXNFbXB0eUxpc3QoKSB7XG4gIHJldHVybiBTVEFCTEVfRU1QVFlfTElTVDtcbn1cbmZ1bmN0aW9uIGFsd2F5c051bGwoKSB7XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gbWFrZU11dGF0aW9uQ29udGV4dChyb29tKSB7XG4gIGNvbnN0IGVycm1zZyA9IFwiVGhpcyBtdXRhdGlvbiBjYW5ub3QgYmUgdXNlZCB1bnRpbCBjb25uZWN0ZWQgdG8gdGhlIExpdmVibG9ja3Mgcm9vbVwiO1xuICByZXR1cm4ge1xuICAgIGdldCBzdG9yYWdlKCkge1xuICAgICAgY29uc3QgbXV0YWJsZVJvb3QgPSByb29tLmdldFN0b3JhZ2VTbmFwc2hvdCgpO1xuICAgICAgaWYgKG11dGFibGVSb290ID09PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJtc2cpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG11dGFibGVSb290O1xuICAgIH0sXG4gICAgZ2V0IHNlbGYoKSB7XG4gICAgICBjb25zdCBzZWxmID0gcm9vbS5nZXRTZWxmKCk7XG4gICAgICBpZiAoc2VsZiA9PT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJybXNnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH0sXG4gICAgZ2V0IG90aGVycygpIHtcbiAgICAgIGNvbnN0IG90aGVycyA9IHJvb20uZ2V0T3RoZXJzKCk7XG4gICAgICBpZiAocm9vbS5nZXRTZWxmKCkgPT09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm1zZyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3RoZXJzO1xuICAgIH0sXG4gICAgc2V0TXlQcmVzZW5jZTogcm9vbS51cGRhdGVQcmVzZW5jZVxuICB9O1xufVxudmFyIGhhc1dhcm5lZElmTm9SZXNvbHZlVXNlcnMgPSBmYWxzZTtcbmZ1bmN0aW9uIHdhcm5JZk5vUmVzb2x2ZVVzZXJzKHVzZXJzQ2FjaGUpIHtcbiAgaWYgKCFoYXNXYXJuZWRJZk5vUmVzb2x2ZVVzZXJzICYmICF1c2Vyc0NhY2hlICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIGNvbnNvbGUud2FybihcbiAgICAgIFwiU2V0IHRoZSByZXNvbHZlVXNlcnMgb3B0aW9uIGluIGNyZWF0ZVJvb21Db250ZXh0IHRvIHNwZWNpZnkgdXNlciBpbmZvLlwiXG4gICAgKTtcbiAgICBoYXNXYXJuZWRJZk5vUmVzb2x2ZVVzZXJzID0gdHJ1ZTtcbiAgfVxufVxudmFyIENvbnRleHRCdW5kbGUgPSBSZWFjdDMuY3JlYXRlQ29udGV4dChudWxsKTtcbmZ1bmN0aW9uIHVzZVJvb21Db250ZXh0QnVuZGxlKCkge1xuICBjb25zdCBidW5kbGUgPSBSZWFjdDMudXNlQ29udGV4dChDb250ZXh0QnVuZGxlKTtcbiAgaWYgKGJ1bmRsZSA9PT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlJvb21Qcm92aWRlciBpcyBtaXNzaW5nIGZyb20gdGhlIFJlYWN0IHRyZWUuXCIpO1xuICB9XG4gIHJldHVybiBidW5kbGU7XG59XG5mdW5jdGlvbiBjcmVhdGVSb29tQ29udGV4dChjbGllbnQsIG9wdGlvbnMpIHtcbiAgY29uc3QgUm9vbUNvbnRleHQgPSBSZWFjdDMuY3JlYXRlQ29udGV4dChudWxsKTtcbiAgY29uc3QgY29tbWVudHNFcnJvckV2ZW50U291cmNlID0gbWFrZUV2ZW50U291cmNlMigpO1xuICBjb25zdCB7IENvbW1lbnRzUm9vbVByb3ZpZGVyLCAuLi5jb21tZW50c1Jvb20gfSA9IGNyZWF0ZUNvbW1lbnRzUm9vbShjb21tZW50c0Vycm9yRXZlbnRTb3VyY2UpO1xuICBmdW5jdGlvbiBSb29tUHJvdmlkZXJPdXRlcihwcm9wcykge1xuICAgIGNvbnN0IFtjYWNoZV0gPSBSZWFjdDMudXNlU3RhdGUoXG4gICAgICAoKSA9PiAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpXG4gICAgKTtcbiAgICBjb25zdCBzdGFibGVFbnRlclJvb20gPSBSZWFjdDMudXNlQ2FsbGJhY2soXG4gICAgICAocm9vbUlkLCBvcHRpb25zMikgPT4ge1xuICAgICAgICBjb25zdCBjYWNoZWQgPSBjYWNoZS5nZXQocm9vbUlkKTtcbiAgICAgICAgaWYgKGNhY2hlZClcbiAgICAgICAgICByZXR1cm4gY2FjaGVkO1xuICAgICAgICBjb25zdCBydiA9IGNsaWVudC5lbnRlclJvb20oXG4gICAgICAgICAgcm9vbUlkLFxuICAgICAgICAgIG9wdGlvbnMyXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IG9yaWdMZWF2ZSA9IHJ2LmxlYXZlO1xuICAgICAgICBydi5sZWF2ZSA9ICgpID0+IHtcbiAgICAgICAgICBvcmlnTGVhdmUoKTtcbiAgICAgICAgICBjYWNoZS5kZWxldGUocm9vbUlkKTtcbiAgICAgICAgfTtcbiAgICAgICAgY2FjaGUuc2V0KHJvb21JZCwgcnYpO1xuICAgICAgICByZXR1cm4gcnY7XG4gICAgICB9LFxuICAgICAgW2NhY2hlXVxuICAgICk7XG4gICAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDMuY3JlYXRlRWxlbWVudChSb29tUHJvdmlkZXJJbm5lciwgeyAuLi5wcm9wcywgc3RhYmxlRW50ZXJSb29tIH0pO1xuICB9XG4gIGZ1bmN0aW9uIFJvb21Qcm92aWRlcklubmVyKHByb3BzKSB7XG4gICAgY29uc3QgeyBpZDogcm9vbUlkLCBzdGFibGVFbnRlclJvb20gfSA9IHByb3BzO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIGlmICghcm9vbUlkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBcIlJvb21Qcm92aWRlciBpZCBwcm9wZXJ0eSBpcyByZXF1aXJlZC4gRm9yIG1vcmUgaW5mb3JtYXRpb246IGh0dHBzOi8vbGl2ZWJsb2Nrcy5pby9kb2NzL2Vycm9ycy9saXZlYmxvY2tzLXJlYWN0L1Jvb21Qcm92aWRlci1pZC1wcm9wZXJ0eS1pcy1yZXF1aXJlZFwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHJvb21JZCAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSb29tUHJvdmlkZXIgaWQgcHJvcGVydHkgc2hvdWxkIGJlIGEgc3RyaW5nLlwiKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG1ham9yUmVhY3RWZXJzaW9uID0gcGFyc2VJbnQoUmVhY3QzLnZlcnNpb24pIHx8IDE7XG4gICAgICBjb25zdCBvbGRSZWFjdFZlcnNpb24gPSBtYWpvclJlYWN0VmVyc2lvbiA8IDE4O1xuICAgICAgZXJyb3JJZihcbiAgICAgICAgb2xkUmVhY3RWZXJzaW9uICYmIHByb3BzLnVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzID09PSB2b2lkIDAsXG4gICAgICAgIG1pc3NpbmdfdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMobWFqb3JSZWFjdFZlcnNpb24sIHJvb21JZClcbiAgICAgICk7XG4gICAgICBkZXByZWNhdGVJZihcbiAgICAgICAgIW9sZFJlYWN0VmVyc2lvbiAmJiBwcm9wcy51bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyAhPT0gdm9pZCAwLFxuICAgICAgICBzdXBlcmZsdW91c191bnN0YWJsZV9iYXRjaGVkVXBkYXRlc1xuICAgICAgKTtcbiAgICB9XG4gICAgY29uc3QgZnJvemVuUHJvcHMgPSB1c2VJbml0aWFsKHtcbiAgICAgIGluaXRpYWxQcmVzZW5jZTogcHJvcHMuaW5pdGlhbFByZXNlbmNlLFxuICAgICAgaW5pdGlhbFN0b3JhZ2U6IHByb3BzLmluaXRpYWxTdG9yYWdlLFxuICAgICAgdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM6IHByb3BzLnVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzLFxuICAgICAgYXV0b0Nvbm5lY3Q6IHByb3BzLmF1dG9Db25uZWN0ID8/IHByb3BzLnNob3VsZEluaXRpYWxseUNvbm5lY3QgPz8gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIlxuICAgIH0pO1xuICAgIGNvbnN0IFt7IHJvb20gfSwgc2V0Um9vbUxlYXZlUGFpcl0gPSBSZWFjdDMudXNlU3RhdGUoXG4gICAgICAoKSA9PiBzdGFibGVFbnRlclJvb20ocm9vbUlkLCB7XG4gICAgICAgIC4uLmZyb3plblByb3BzLFxuICAgICAgICBhdXRvQ29ubmVjdDogZmFsc2VcbiAgICAgICAgLy8gRGVsaWJlcmF0ZWx5IHVzaW5nIGZhbHNlIGhlcmUgb24gdGhlIGZpcnN0IHJlbmRlciwgc2VlIGJlbG93XG4gICAgICB9KVxuICAgICk7XG4gICAgUmVhY3QzLnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICBjb25zdCBwYWlyID0gc3RhYmxlRW50ZXJSb29tKHJvb21JZCwgZnJvemVuUHJvcHMpO1xuICAgICAgc2V0Um9vbUxlYXZlUGFpcihwYWlyKTtcbiAgICAgIGNvbnN0IHsgcm9vbTogcm9vbTIsIGxlYXZlIH0gPSBwYWlyO1xuICAgICAgaWYgKGZyb3plblByb3BzLmF1dG9Db25uZWN0KSB7XG4gICAgICAgIHJvb20yLmNvbm5lY3QoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGxlYXZlKCk7XG4gICAgICB9O1xuICAgIH0sIFtyb29tSWQsIGZyb3plblByb3BzLCBzdGFibGVFbnRlclJvb21dKTtcbiAgICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0My5jcmVhdGVFbGVtZW50KFJvb21Db250ZXh0LlByb3ZpZGVyLCB7IHZhbHVlOiByb29tIH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDMuY3JlYXRlRWxlbWVudChDb21tZW50c1Jvb21Qcm92aWRlciwgeyByb29tIH0sIC8qIEBfX1BVUkVfXyAqLyBSZWFjdDMuY3JlYXRlRWxlbWVudChcbiAgICAgIENvbnRleHRCdW5kbGUuUHJvdmlkZXIsXG4gICAgICB7XG4gICAgICAgIHZhbHVlOiBpbnRlcm5hbEJ1bmRsZVxuICAgICAgfSxcbiAgICAgIHByb3BzLmNoaWxkcmVuXG4gICAgKSkpO1xuICB9XG4gIGZ1bmN0aW9uIGNvbm5lY3Rpb25JZFNlbGVjdG9yKG90aGVycykge1xuICAgIHJldHVybiBvdGhlcnMubWFwKCh1c2VyKSA9PiB1c2VyLmNvbm5lY3Rpb25JZCk7XG4gIH1cbiAgZnVuY3Rpb24gdXNlUm9vbSgpIHtcbiAgICBjb25zdCByb29tID0gUmVhY3QzLnVzZUNvbnRleHQoUm9vbUNvbnRleHQpO1xuICAgIGlmIChyb29tID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSb29tUHJvdmlkZXIgaXMgbWlzc2luZyBmcm9tIHRoZSBSZWFjdCB0cmVlLlwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHJvb207XG4gIH1cbiAgZnVuY3Rpb24gdXNlU3RhdHVzKCkge1xuICAgIGNvbnN0IHJvb20gPSB1c2VSb29tKCk7XG4gICAgY29uc3Qgc3Vic2NyaWJlMiA9IHJvb20uZXZlbnRzLnN0YXR1cy5zdWJzY3JpYmU7XG4gICAgY29uc3QgZ2V0U25hcHNob3QyID0gcm9vbS5nZXRTdGF0dXM7XG4gICAgY29uc3QgZ2V0U2VydmVyU25hcHNob3QgPSByb29tLmdldFN0YXR1cztcbiAgICByZXR1cm4gdXNlU3luY0V4dGVybmFsU3RvcmUzKHN1YnNjcmliZTIsIGdldFNuYXBzaG90MiwgZ2V0U2VydmVyU25hcHNob3QpO1xuICB9XG4gIGZ1bmN0aW9uIHVzZU15UHJlc2VuY2UoKSB7XG4gICAgY29uc3Qgcm9vbSA9IHVzZVJvb20oKTtcbiAgICBjb25zdCBzdWJzY3JpYmUyID0gcm9vbS5ldmVudHMubXlQcmVzZW5jZS5zdWJzY3JpYmU7XG4gICAgY29uc3QgZ2V0U25hcHNob3QyID0gcm9vbS5nZXRQcmVzZW5jZTtcbiAgICBjb25zdCBwcmVzZW5jZSA9IHVzZVN5bmNFeHRlcm5hbFN0b3JlMyhzdWJzY3JpYmUyLCBnZXRTbmFwc2hvdDIsIGdldFNuYXBzaG90Mik7XG4gICAgY29uc3Qgc2V0UHJlc2VuY2UgPSByb29tLnVwZGF0ZVByZXNlbmNlO1xuICAgIHJldHVybiBbcHJlc2VuY2UsIHNldFByZXNlbmNlXTtcbiAgfVxuICBmdW5jdGlvbiB1c2VVcGRhdGVNeVByZXNlbmNlKCkge1xuICAgIHJldHVybiB1c2VSb29tKCkudXBkYXRlUHJlc2VuY2U7XG4gIH1cbiAgZnVuY3Rpb24gdXNlT3RoZXJzKHNlbGVjdG9yLCBpc0VxdWFsKSB7XG4gICAgY29uc3Qgcm9vbSA9IHVzZVJvb20oKTtcbiAgICBjb25zdCBzdWJzY3JpYmUyID0gcm9vbS5ldmVudHMub3RoZXJzLnN1YnNjcmliZTtcbiAgICBjb25zdCBnZXRTbmFwc2hvdDIgPSByb29tLmdldE90aGVycztcbiAgICBjb25zdCBnZXRTZXJ2ZXJTbmFwc2hvdCA9IGFsd2F5c0VtcHR5TGlzdDtcbiAgICByZXR1cm4gdXNlU3luY0V4dGVybmFsU3RvcmVXaXRoU2VsZWN0b3IyKFxuICAgICAgc3Vic2NyaWJlMixcbiAgICAgIGdldFNuYXBzaG90MixcbiAgICAgIGdldFNlcnZlclNuYXBzaG90LFxuICAgICAgc2VsZWN0b3IgPz8gaWRlbnRpdHksXG4gICAgICBpc0VxdWFsXG4gICAgKTtcbiAgfVxuICBmdW5jdGlvbiB1c2VPdGhlcnNDb25uZWN0aW9uSWRzKCkge1xuICAgIHJldHVybiB1c2VPdGhlcnMoY29ubmVjdGlvbklkU2VsZWN0b3IsIHNoYWxsb3cpO1xuICB9XG4gIGZ1bmN0aW9uIHVzZU90aGVyc01hcHBlZChpdGVtU2VsZWN0b3IsIGl0ZW1Jc0VxdWFsKSB7XG4gICAgY29uc3Qgd3JhcHBlZFNlbGVjdG9yID0gUmVhY3QzLnVzZUNhbGxiYWNrKFxuICAgICAgKG90aGVycykgPT4gb3RoZXJzLm1hcChcbiAgICAgICAgKG90aGVyKSA9PiBbb3RoZXIuY29ubmVjdGlvbklkLCBpdGVtU2VsZWN0b3Iob3RoZXIpXVxuICAgICAgKSxcbiAgICAgIFtpdGVtU2VsZWN0b3JdXG4gICAgKTtcbiAgICBjb25zdCB3cmFwcGVkSXNFcXVhbCA9IFJlYWN0My51c2VDYWxsYmFjayhcbiAgICAgIChhLCBiKSA9PiB7XG4gICAgICAgIGNvbnN0IGVxID0gaXRlbUlzRXF1YWwgPz8gT2JqZWN0LmlzO1xuICAgICAgICByZXR1cm4gYS5sZW5ndGggPT09IGIubGVuZ3RoICYmIGEuZXZlcnkoKGF0dXBsZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICBjb25zdCBidHVwbGUgPSBiW2luZGV4XTtcbiAgICAgICAgICByZXR1cm4gYXR1cGxlWzBdID09PSBidHVwbGVbMF0gJiYgZXEoYXR1cGxlWzFdLCBidHVwbGVbMV0pO1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBbaXRlbUlzRXF1YWxdXG4gICAgKTtcbiAgICByZXR1cm4gdXNlT3RoZXJzKHdyYXBwZWRTZWxlY3Rvciwgd3JhcHBlZElzRXF1YWwpO1xuICB9XG4gIGNvbnN0IE5PVF9GT1VORCA9IFN5bWJvbCgpO1xuICBmdW5jdGlvbiB1c2VPdGhlcihjb25uZWN0aW9uSWQsIHNlbGVjdG9yLCBpc0VxdWFsKSB7XG4gICAgY29uc3Qgd3JhcHBlZFNlbGVjdG9yID0gUmVhY3QzLnVzZUNhbGxiYWNrKFxuICAgICAgKG90aGVycykgPT4ge1xuICAgICAgICBjb25zdCBvdGhlcjIgPSBvdGhlcnMuZmluZChcbiAgICAgICAgICAob3RoZXIzKSA9PiBvdGhlcjMuY29ubmVjdGlvbklkID09PSBjb25uZWN0aW9uSWRcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIG90aGVyMiAhPT0gdm9pZCAwID8gc2VsZWN0b3Iob3RoZXIyKSA6IE5PVF9GT1VORDtcbiAgICAgIH0sXG4gICAgICBbY29ubmVjdGlvbklkLCBzZWxlY3Rvcl1cbiAgICApO1xuICAgIGNvbnN0IHdyYXBwZWRJc0VxdWFsID0gUmVhY3QzLnVzZUNhbGxiYWNrKFxuICAgICAgKHByZXYsIGN1cnIpID0+IHtcbiAgICAgICAgaWYgKHByZXYgPT09IE5PVF9GT1VORCB8fCBjdXJyID09PSBOT1RfRk9VTkQpIHtcbiAgICAgICAgICByZXR1cm4gcHJldiA9PT0gY3VycjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBlcSA9IGlzRXF1YWwgPz8gT2JqZWN0LmlzO1xuICAgICAgICByZXR1cm4gZXEocHJldiwgY3Vycik7XG4gICAgICB9LFxuICAgICAgW2lzRXF1YWxdXG4gICAgKTtcbiAgICBjb25zdCBvdGhlciA9IHVzZU90aGVycyh3cmFwcGVkU2VsZWN0b3IsIHdyYXBwZWRJc0VxdWFsKTtcbiAgICBpZiAob3RoZXIgPT09IE5PVF9GT1VORCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgTm8gc3VjaCBvdGhlciB1c2VyIHdpdGggY29ubmVjdGlvbiBpZCAke2Nvbm5lY3Rpb25JZH0gZXhpc3RzYFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIG90aGVyO1xuICB9XG4gIGZ1bmN0aW9uIHVzZUJyb2FkY2FzdEV2ZW50KCkge1xuICAgIGNvbnN0IHJvb20gPSB1c2VSb29tKCk7XG4gICAgcmV0dXJuIFJlYWN0My51c2VDYWxsYmFjayhcbiAgICAgIChldmVudCwgb3B0aW9uczIgPSB7IHNob3VsZFF1ZXVlRXZlbnRJZk5vdFJlYWR5OiBmYWxzZSB9KSA9PiB7XG4gICAgICAgIHJvb20uYnJvYWRjYXN0RXZlbnQoZXZlbnQsIG9wdGlvbnMyKTtcbiAgICAgIH0sXG4gICAgICBbcm9vbV1cbiAgICApO1xuICB9XG4gIGZ1bmN0aW9uIHVzZU90aGVyc0xpc3RlbmVyKGNhbGxiYWNrKSB7XG4gICAgY29uc3Qgcm9vbSA9IHVzZVJvb20oKTtcbiAgICBjb25zdCBzYXZlZENhbGxiYWNrID0gdXNlTGF0ZXN0KGNhbGxiYWNrKTtcbiAgICBSZWFjdDMudXNlRWZmZWN0KFxuICAgICAgKCkgPT4gcm9vbS5ldmVudHMub3RoZXJzLnN1YnNjcmliZSgoZXZlbnQpID0+IHNhdmVkQ2FsbGJhY2suY3VycmVudChldmVudCkpLFxuICAgICAgW3Jvb20sIHNhdmVkQ2FsbGJhY2tdXG4gICAgKTtcbiAgfVxuICBmdW5jdGlvbiB1c2VMb3N0Q29ubmVjdGlvbkxpc3RlbmVyKGNhbGxiYWNrKSB7XG4gICAgY29uc3Qgcm9vbSA9IHVzZVJvb20oKTtcbiAgICBjb25zdCBzYXZlZENhbGxiYWNrID0gdXNlTGF0ZXN0KGNhbGxiYWNrKTtcbiAgICBSZWFjdDMudXNlRWZmZWN0KFxuICAgICAgKCkgPT4gcm9vbS5ldmVudHMubG9zdENvbm5lY3Rpb24uc3Vic2NyaWJlKFxuICAgICAgICAoZXZlbnQpID0+IHNhdmVkQ2FsbGJhY2suY3VycmVudChldmVudClcbiAgICAgICksXG4gICAgICBbcm9vbSwgc2F2ZWRDYWxsYmFja11cbiAgICApO1xuICB9XG4gIGZ1bmN0aW9uIHVzZUVycm9yTGlzdGVuZXIoY2FsbGJhY2spIHtcbiAgICBjb25zdCByb29tID0gdXNlUm9vbSgpO1xuICAgIGNvbnN0IHNhdmVkQ2FsbGJhY2sgPSB1c2VMYXRlc3QoY2FsbGJhY2spO1xuICAgIFJlYWN0My51c2VFZmZlY3QoXG4gICAgICAoKSA9PiByb29tLmV2ZW50cy5lcnJvci5zdWJzY3JpYmUoKGUpID0+IHNhdmVkQ2FsbGJhY2suY3VycmVudChlKSksXG4gICAgICBbcm9vbSwgc2F2ZWRDYWxsYmFja11cbiAgICApO1xuICB9XG4gIGZ1bmN0aW9uIHVzZUV2ZW50TGlzdGVuZXIoY2FsbGJhY2spIHtcbiAgICBjb25zdCByb29tID0gdXNlUm9vbSgpO1xuICAgIGNvbnN0IHNhdmVkQ2FsbGJhY2sgPSB1c2VMYXRlc3QoY2FsbGJhY2spO1xuICAgIFJlYWN0My51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgY29uc3QgbGlzdGVuZXIgPSAoZXZlbnREYXRhKSA9PiB7XG4gICAgICAgIHNhdmVkQ2FsbGJhY2suY3VycmVudChldmVudERhdGEpO1xuICAgICAgfTtcbiAgICAgIHJldHVybiByb29tLmV2ZW50cy5jdXN0b21FdmVudC5zdWJzY3JpYmUobGlzdGVuZXIpO1xuICAgIH0sIFtyb29tLCBzYXZlZENhbGxiYWNrXSk7XG4gIH1cbiAgZnVuY3Rpb24gdXNlU2VsZihtYXliZVNlbGVjdG9yLCBpc0VxdWFsKSB7XG4gICAgY29uc3Qgcm9vbSA9IHVzZVJvb20oKTtcbiAgICBjb25zdCBzdWJzY3JpYmUyID0gcm9vbS5ldmVudHMuc2VsZi5zdWJzY3JpYmU7XG4gICAgY29uc3QgZ2V0U25hcHNob3QyID0gcm9vbS5nZXRTZWxmO1xuICAgIGNvbnN0IHNlbGVjdG9yID0gbWF5YmVTZWxlY3RvciA/PyBpZGVudGl0eTtcbiAgICBjb25zdCB3cmFwcGVkU2VsZWN0b3IgPSBSZWFjdDMudXNlQ2FsbGJhY2soXG4gICAgICAobWUpID0+IG1lICE9PSBudWxsID8gc2VsZWN0b3IobWUpIDogbnVsbCxcbiAgICAgIFtzZWxlY3Rvcl1cbiAgICApO1xuICAgIGNvbnN0IGdldFNlcnZlclNuYXBzaG90ID0gYWx3YXlzTnVsbDtcbiAgICByZXR1cm4gdXNlU3luY0V4dGVybmFsU3RvcmVXaXRoU2VsZWN0b3IyKFxuICAgICAgc3Vic2NyaWJlMixcbiAgICAgIGdldFNuYXBzaG90MixcbiAgICAgIGdldFNlcnZlclNuYXBzaG90LFxuICAgICAgd3JhcHBlZFNlbGVjdG9yLFxuICAgICAgaXNFcXVhbFxuICAgICk7XG4gIH1cbiAgZnVuY3Rpb24gdXNlTXV0YWJsZVN0b3JhZ2VSb290KCkge1xuICAgIGNvbnN0IHJvb20gPSB1c2VSb29tKCk7XG4gICAgY29uc3Qgc3Vic2NyaWJlMiA9IHJvb20uZXZlbnRzLnN0b3JhZ2VEaWRMb2FkLnN1YnNjcmliZU9uY2U7XG4gICAgY29uc3QgZ2V0U25hcHNob3QyID0gcm9vbS5nZXRTdG9yYWdlU25hcHNob3Q7XG4gICAgY29uc3QgZ2V0U2VydmVyU25hcHNob3QgPSBhbHdheXNOdWxsO1xuICAgIHJldHVybiB1c2VTeW5jRXh0ZXJuYWxTdG9yZTMoc3Vic2NyaWJlMiwgZ2V0U25hcHNob3QyLCBnZXRTZXJ2ZXJTbmFwc2hvdCk7XG4gIH1cbiAgZnVuY3Rpb24gdXNlU3RvcmFnZVJvb3QoKSB7XG4gICAgcmV0dXJuIFt1c2VNdXRhYmxlU3RvcmFnZVJvb3QoKV07XG4gIH1cbiAgZnVuY3Rpb24gdXNlSGlzdG9yeSgpIHtcbiAgICByZXR1cm4gdXNlUm9vbSgpLmhpc3Rvcnk7XG4gIH1cbiAgZnVuY3Rpb24gdXNlVW5kbygpIHtcbiAgICByZXR1cm4gdXNlSGlzdG9yeSgpLnVuZG87XG4gIH1cbiAgZnVuY3Rpb24gdXNlUmVkbygpIHtcbiAgICByZXR1cm4gdXNlSGlzdG9yeSgpLnJlZG87XG4gIH1cbiAgZnVuY3Rpb24gdXNlQ2FuVW5kbygpIHtcbiAgICBjb25zdCByb29tID0gdXNlUm9vbSgpO1xuICAgIGNvbnN0IHN1YnNjcmliZTIgPSByb29tLmV2ZW50cy5oaXN0b3J5LnN1YnNjcmliZTtcbiAgICBjb25zdCBjYW5VbmRvID0gcm9vbS5oaXN0b3J5LmNhblVuZG87XG4gICAgcmV0dXJuIHVzZVN5bmNFeHRlcm5hbFN0b3JlMyhzdWJzY3JpYmUyLCBjYW5VbmRvLCBjYW5VbmRvKTtcbiAgfVxuICBmdW5jdGlvbiB1c2VDYW5SZWRvKCkge1xuICAgIGNvbnN0IHJvb20gPSB1c2VSb29tKCk7XG4gICAgY29uc3Qgc3Vic2NyaWJlMiA9IHJvb20uZXZlbnRzLmhpc3Rvcnkuc3Vic2NyaWJlO1xuICAgIGNvbnN0IGNhblJlZG8gPSByb29tLmhpc3RvcnkuY2FuUmVkbztcbiAgICByZXR1cm4gdXNlU3luY0V4dGVybmFsU3RvcmUzKHN1YnNjcmliZTIsIGNhblJlZG8sIGNhblJlZG8pO1xuICB9XG4gIGZ1bmN0aW9uIHVzZUJhdGNoKCkge1xuICAgIHJldHVybiB1c2VSb29tKCkuYmF0Y2g7XG4gIH1cbiAgZnVuY3Rpb24gdXNlTGVnYWN5S2V5KGtleSkge1xuICAgIGNvbnN0IHJvb20gPSB1c2VSb29tKCk7XG4gICAgY29uc3Qgcm9vdE9yTnVsbCA9IHVzZU11dGFibGVTdG9yYWdlUm9vdCgpO1xuICAgIGNvbnN0IHJlcmVuZGVyID0gdXNlUmVyZW5kZXIoKTtcbiAgICBSZWFjdDMudXNlRWZmZWN0KCgpID0+IHtcbiAgICAgIGlmIChyb290T3JOdWxsID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHJvb3QgPSByb290T3JOdWxsO1xuICAgICAgbGV0IHVuc3ViQ3VycjtcbiAgICAgIGxldCBjdXJyID0gcm9vdC5nZXQoa2V5KTtcbiAgICAgIGZ1bmN0aW9uIHN1YnNjcmliZVRvQ3VycigpIHtcbiAgICAgICAgdW5zdWJDdXJyID0gaXNMaXZlTm9kZShjdXJyKSA/IHJvb20uc3Vic2NyaWJlKGN1cnIsIHJlcmVuZGVyKSA6IHZvaWQgMDtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIG9uUm9vdENoYW5nZSgpIHtcbiAgICAgICAgY29uc3QgbmV3VmFsdWUgPSByb290LmdldChrZXkpO1xuICAgICAgICBpZiAobmV3VmFsdWUgIT09IGN1cnIpIHtcbiAgICAgICAgICB1bnN1YkN1cnI/LigpO1xuICAgICAgICAgIGN1cnIgPSBuZXdWYWx1ZTtcbiAgICAgICAgICBzdWJzY3JpYmVUb0N1cnIoKTtcbiAgICAgICAgICByZXJlbmRlcigpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzdWJzY3JpYmVUb0N1cnIoKTtcbiAgICAgIHJlcmVuZGVyKCk7XG4gICAgICBjb25zdCB1bnN1YnNjcmliZVJvb3QgPSByb29tLnN1YnNjcmliZShyb290LCBvblJvb3RDaGFuZ2UpO1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgdW5zdWJzY3JpYmVSb290KCk7XG4gICAgICAgIHVuc3ViQ3Vycj8uKCk7XG4gICAgICB9O1xuICAgIH0sIFtyb290T3JOdWxsLCByb29tLCBrZXksIHJlcmVuZGVyXSk7XG4gICAgaWYgKHJvb3RPck51bGwgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcm9vdE9yTnVsbC5nZXQoa2V5KTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gdXNlU3RvcmFnZShzZWxlY3RvciwgaXNFcXVhbCkge1xuICAgIGNvbnN0IHJvb20gPSB1c2VSb29tKCk7XG4gICAgY29uc3Qgcm9vdE9yTnVsbCA9IHVzZU11dGFibGVTdG9yYWdlUm9vdCgpO1xuICAgIGNvbnN0IHdyYXBwZWRTZWxlY3RvciA9IFJlYWN0My51c2VDYWxsYmFjayhcbiAgICAgIChyb290T3JOdWxsMikgPT4gcm9vdE9yTnVsbDIgIT09IG51bGwgPyBzZWxlY3Rvcihyb290T3JOdWxsMikgOiBudWxsLFxuICAgICAgW3NlbGVjdG9yXVxuICAgICk7XG4gICAgY29uc3Qgc3Vic2NyaWJlMiA9IFJlYWN0My51c2VDYWxsYmFjayhcbiAgICAgIChvblN0b3JlQ2hhbmdlKSA9PiByb290T3JOdWxsICE9PSBudWxsID8gcm9vbS5zdWJzY3JpYmUocm9vdE9yTnVsbCwgb25TdG9yZUNoYW5nZSwgeyBpc0RlZXA6IHRydWUgfSkgOiBub29wMixcbiAgICAgIFtyb29tLCByb290T3JOdWxsXVxuICAgICk7XG4gICAgY29uc3QgZ2V0U25hcHNob3QyID0gUmVhY3QzLnVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgIGlmIChyb290T3JOdWxsID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3Qgcm9vdCA9IHJvb3RPck51bGw7XG4gICAgICAgIGNvbnN0IGltbSA9IHJvb3QudG9JbW11dGFibGUoKTtcbiAgICAgICAgcmV0dXJuIGltbTtcbiAgICAgIH1cbiAgICB9LCBbcm9vdE9yTnVsbF0pO1xuICAgIGNvbnN0IGdldFNlcnZlclNuYXBzaG90ID0gYWx3YXlzTnVsbDtcbiAgICByZXR1cm4gdXNlU3luY0V4dGVybmFsU3RvcmVXaXRoU2VsZWN0b3IyKFxuICAgICAgc3Vic2NyaWJlMixcbiAgICAgIGdldFNuYXBzaG90MixcbiAgICAgIGdldFNlcnZlclNuYXBzaG90LFxuICAgICAgd3JhcHBlZFNlbGVjdG9yLFxuICAgICAgaXNFcXVhbFxuICAgICk7XG4gIH1cbiAgZnVuY3Rpb24gZW5zdXJlTm90U2VydmVyU2lkZSgpIHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBcIllvdSBjYW5ub3QgdXNlIHRoZSBTdXNwZW5zZSB2ZXJzaW9uIG9mIHRoaXMgaG9vayBvbiB0aGUgc2VydmVyIHNpZGUuIE1ha2Ugc3VyZSB0byBvbmx5IGNhbGwgdGhlbSBvbiB0aGUgY2xpZW50IHNpZGUuXFxuRm9yIHRpcHMsIHNlZSBodHRwczovL2xpdmVibG9ja3MuaW8vZG9jcy9hcGktcmVmZXJlbmNlL2xpdmVibG9ja3MtcmVhY3Qjc3VzcGVuc2UtYXZvaWQtc3NyXCJcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHVzZVN1c3BlbmRVbnRpbFN0b3JhZ2VMb2FkZWQoKSB7XG4gICAgY29uc3Qgcm9vbSA9IHVzZVJvb20oKTtcbiAgICBpZiAocm9vbS5nZXRTdG9yYWdlU25hcHNob3QoKSAhPT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBlbnN1cmVOb3RTZXJ2ZXJTaWRlKCk7XG4gICAgdGhyb3cgbmV3IFByb21pc2UoKHJlcykgPT4ge1xuICAgICAgcm9vbS5ldmVudHMuc3RvcmFnZURpZExvYWQuc3Vic2NyaWJlT25jZSgoKSA9PiByZXMoKSk7XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gdXNlU3VzcGVuZFVudGlsUHJlc2VuY2VMb2FkZWQoKSB7XG4gICAgY29uc3Qgcm9vbSA9IHVzZVJvb20oKTtcbiAgICBpZiAocm9vbS5nZXRTZWxmKCkgIT09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZW5zdXJlTm90U2VydmVyU2lkZSgpO1xuICAgIHRocm93IG5ldyBQcm9taXNlKChyZXMpID0+IHtcbiAgICAgIHJvb20uZXZlbnRzLnNlbGYuc3Vic2NyaWJlT25jZSgoKSA9PiByZXMoKSk7XG4gICAgICByb29tLmV2ZW50cy5zdGF0dXMuc3Vic2NyaWJlT25jZSgoKSA9PiByZXMoKSk7XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gdXNlTXV0YXRpb24oY2FsbGJhY2ssIGRlcHMpIHtcbiAgICBjb25zdCByb29tID0gdXNlUm9vbSgpO1xuICAgIHJldHVybiBSZWFjdDMudXNlTWVtbyhcbiAgICAgICgpID0+IHtcbiAgICAgICAgcmV0dXJuICguLi5hcmdzKSA9PiAoXG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtcmV0dXJuXG4gICAgICAgICAgcm9vbS5iYXRjaChcbiAgICAgICAgICAgICgpID0+IChcbiAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtcmV0dXJuXG4gICAgICAgICAgICAgIGNhbGxiYWNrKFxuICAgICAgICAgICAgICAgIG1ha2VNdXRhdGlvbkNvbnRleHQocm9vbSksXG4gICAgICAgICAgICAgICAgLi4uYXJnc1xuICAgICAgICAgICAgICApXG4gICAgICAgICAgICApXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgfSxcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgICAgIFtyb29tLCAuLi5kZXBzXVxuICAgICk7XG4gIH1cbiAgZnVuY3Rpb24gdXNlU3RvcmFnZVN1c3BlbnNlKHNlbGVjdG9yLCBpc0VxdWFsKSB7XG4gICAgdXNlU3VzcGVuZFVudGlsU3RvcmFnZUxvYWRlZCgpO1xuICAgIHJldHVybiB1c2VTdG9yYWdlKFxuICAgICAgc2VsZWN0b3IsXG4gICAgICBpc0VxdWFsXG4gICAgKTtcbiAgfVxuICBmdW5jdGlvbiB1c2VTZWxmU3VzcGVuc2Uoc2VsZWN0b3IsIGlzRXF1YWwpIHtcbiAgICB1c2VTdXNwZW5kVW50aWxQcmVzZW5jZUxvYWRlZCgpO1xuICAgIHJldHVybiB1c2VTZWxmKFxuICAgICAgc2VsZWN0b3IsXG4gICAgICBpc0VxdWFsXG4gICAgKTtcbiAgfVxuICBmdW5jdGlvbiB1c2VPdGhlcnNTdXNwZW5zZShzZWxlY3RvciwgaXNFcXVhbCkge1xuICAgIHVzZVN1c3BlbmRVbnRpbFByZXNlbmNlTG9hZGVkKCk7XG4gICAgcmV0dXJuIHVzZU90aGVycyhcbiAgICAgIHNlbGVjdG9yLFxuICAgICAgaXNFcXVhbFxuICAgICk7XG4gIH1cbiAgZnVuY3Rpb24gdXNlT3RoZXJzQ29ubmVjdGlvbklkc1N1c3BlbnNlKCkge1xuICAgIHVzZVN1c3BlbmRVbnRpbFByZXNlbmNlTG9hZGVkKCk7XG4gICAgcmV0dXJuIHVzZU90aGVyc0Nvbm5lY3Rpb25JZHMoKTtcbiAgfVxuICBmdW5jdGlvbiB1c2VPdGhlcnNNYXBwZWRTdXNwZW5zZShpdGVtU2VsZWN0b3IsIGl0ZW1Jc0VxdWFsKSB7XG4gICAgdXNlU3VzcGVuZFVudGlsUHJlc2VuY2VMb2FkZWQoKTtcbiAgICByZXR1cm4gdXNlT3RoZXJzTWFwcGVkKGl0ZW1TZWxlY3RvciwgaXRlbUlzRXF1YWwpO1xuICB9XG4gIGZ1bmN0aW9uIHVzZU90aGVyU3VzcGVuc2UoY29ubmVjdGlvbklkLCBzZWxlY3RvciwgaXNFcXVhbCkge1xuICAgIHVzZVN1c3BlbmRVbnRpbFByZXNlbmNlTG9hZGVkKCk7XG4gICAgcmV0dXJuIHVzZU90aGVyKGNvbm5lY3Rpb25JZCwgc2VsZWN0b3IsIGlzRXF1YWwpO1xuICB9XG4gIGZ1bmN0aW9uIHVzZUxlZ2FjeUtleVN1c3BlbnNlKGtleSkge1xuICAgIHVzZVN1c3BlbmRVbnRpbFN0b3JhZ2VMb2FkZWQoKTtcbiAgICByZXR1cm4gdXNlTGVnYWN5S2V5KGtleSk7XG4gIH1cbiAgZnVuY3Rpb24gdXNlVGhyZWFkcyhvcHRpb25zMikge1xuICAgIGNvbnN0IHJvb20gPSB1c2VSb29tKCk7XG4gICAgcmV0dXJuIGNvbW1lbnRzUm9vbS51c2VUaHJlYWRzKHJvb20sIG9wdGlvbnMyKTtcbiAgfVxuICBmdW5jdGlvbiB1c2VUaHJlYWRzU3VzcGVuc2Uob3B0aW9uczIpIHtcbiAgICBjb25zdCByb29tID0gdXNlUm9vbSgpO1xuICAgIHJldHVybiBjb21tZW50c1Jvb20udXNlVGhyZWFkc1N1c3BlbnNlKHJvb20sIG9wdGlvbnMyKTtcbiAgfVxuICBmdW5jdGlvbiB1c2VDcmVhdGVUaHJlYWQoKSB7XG4gICAgY29uc3Qgcm9vbSA9IHVzZVJvb20oKTtcbiAgICByZXR1cm4gY29tbWVudHNSb29tLnVzZUNyZWF0ZVRocmVhZChyb29tKTtcbiAgfVxuICBmdW5jdGlvbiB1c2VFZGl0VGhyZWFkTWV0YWRhdGEoKSB7XG4gICAgY29uc3Qgcm9vbSA9IHVzZVJvb20oKTtcbiAgICByZXR1cm4gY29tbWVudHNSb29tLnVzZUVkaXRUaHJlYWRNZXRhZGF0YShyb29tKTtcbiAgfVxuICBmdW5jdGlvbiB1c2VBZGRSZWFjdGlvbigpIHtcbiAgICBjb25zdCByb29tID0gdXNlUm9vbSgpO1xuICAgIHJldHVybiBjb21tZW50c1Jvb20udXNlQWRkUmVhY3Rpb24ocm9vbSk7XG4gIH1cbiAgZnVuY3Rpb24gdXNlUmVtb3ZlUmVhY3Rpb24oKSB7XG4gICAgY29uc3Qgcm9vbSA9IHVzZVJvb20oKTtcbiAgICByZXR1cm4gY29tbWVudHNSb29tLnVzZVJlbW92ZVJlYWN0aW9uKHJvb20pO1xuICB9XG4gIGZ1bmN0aW9uIHVzZUNyZWF0ZUNvbW1lbnQoKSB7XG4gICAgY29uc3Qgcm9vbSA9IHVzZVJvb20oKTtcbiAgICByZXR1cm4gY29tbWVudHNSb29tLnVzZUNyZWF0ZUNvbW1lbnQocm9vbSk7XG4gIH1cbiAgZnVuY3Rpb24gdXNlRWRpdENvbW1lbnQoKSB7XG4gICAgY29uc3Qgcm9vbSA9IHVzZVJvb20oKTtcbiAgICByZXR1cm4gY29tbWVudHNSb29tLnVzZUVkaXRDb21tZW50KHJvb20pO1xuICB9XG4gIGZ1bmN0aW9uIHVzZURlbGV0ZUNvbW1lbnQoKSB7XG4gICAgY29uc3Qgcm9vbSA9IHVzZVJvb20oKTtcbiAgICByZXR1cm4gY29tbWVudHNSb29tLnVzZURlbGV0ZUNvbW1lbnQocm9vbSk7XG4gIH1cbiAgY29uc3QgeyByZXNvbHZlVXNlcnMsIHJlc29sdmVNZW50aW9uU3VnZ2VzdGlvbnMgfSA9IG9wdGlvbnMgPz8ge307XG4gIGNvbnN0IHVzZXJzQ2FjaGUgPSByZXNvbHZlVXNlcnMgPyBjcmVhdGVBc3luY0NhY2hlKGFzeW5jIChzdHJpbmdpZmllZE9wdGlvbnMpID0+IHtcbiAgICBjb25zdCB1c2VycyA9IGF3YWl0IHJlc29sdmVVc2VycyhcbiAgICAgIEpTT04ucGFyc2Uoc3RyaW5naWZpZWRPcHRpb25zKVxuICAgICk7XG4gICAgcmV0dXJuIHVzZXJzPy5bMF07XG4gIH0pIDogdm9pZCAwO1xuICBmdW5jdGlvbiB1c2VVc2VyKHVzZXJJZCkge1xuICAgIGNvbnN0IHJvb20gPSB1c2VSb29tKCk7XG4gICAgY29uc3QgcmVzb2x2ZXJLZXkgPSBSZWFjdDMudXNlTWVtbyhcbiAgICAgICgpID0+IHN0cmluZ2lmeTIoeyB1c2VySWRzOiBbdXNlcklkXSwgcm9vbUlkOiByb29tLmlkIH0pLFxuICAgICAgW3VzZXJJZCwgcm9vbS5pZF1cbiAgICApO1xuICAgIGNvbnN0IHN0YXRlID0gdXNlQXN5bmNDYWNoZSh1c2Vyc0NhY2hlLCByZXNvbHZlcktleSk7XG4gICAgUmVhY3QzLnVzZUVmZmVjdCgoKSA9PiB3YXJuSWZOb1Jlc29sdmVVc2Vycyh1c2Vyc0NhY2hlKSwgW10pO1xuICAgIGlmIChzdGF0ZS5pc0xvYWRpbmcpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGlzTG9hZGluZzogdHJ1ZVxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdXNlcjogc3RhdGUuZGF0YSxcbiAgICAgICAgZXJyb3I6IHN0YXRlLmVycm9yLFxuICAgICAgICBpc0xvYWRpbmc6IGZhbHNlXG4gICAgICB9O1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiB1c2VVc2VyU3VzcGVuc2UodXNlcklkKSB7XG4gICAgY29uc3Qgcm9vbSA9IHVzZVJvb20oKTtcbiAgICBjb25zdCByZXNvbHZlcktleSA9IFJlYWN0My51c2VNZW1vKFxuICAgICAgKCkgPT4gc3RyaW5naWZ5Mih7IHVzZXJJZHM6IFt1c2VySWRdLCByb29tSWQ6IHJvb20uaWQgfSksXG4gICAgICBbdXNlcklkLCByb29tLmlkXVxuICAgICk7XG4gICAgY29uc3Qgc3RhdGUgPSB1c2VBc3luY0NhY2hlKHVzZXJzQ2FjaGUsIHJlc29sdmVyS2V5LCB7XG4gICAgICBzdXNwZW5zZTogdHJ1ZVxuICAgIH0pO1xuICAgIFJlYWN0My51c2VFZmZlY3QoKCkgPT4gd2FybklmTm9SZXNvbHZlVXNlcnModXNlcnNDYWNoZSksIFtdKTtcbiAgICByZXR1cm4ge1xuICAgICAgdXNlcjogc3RhdGUuZGF0YSxcbiAgICAgIGlzTG9hZGluZzogZmFsc2VcbiAgICB9O1xuICB9XG4gIGNvbnN0IG1lbnRpb25TdWdnZXN0aW9uc0NhY2hlID0gY3JlYXRlQXN5bmNDYWNoZShcbiAgICByZXNvbHZlTWVudGlvblN1Z2dlc3Rpb25zID8gKHN0cmluZ2lmaWVkT3B0aW9ucykgPT4ge1xuICAgICAgcmV0dXJuIHJlc29sdmVNZW50aW9uU3VnZ2VzdGlvbnMoXG4gICAgICAgIEpTT04ucGFyc2Uoc3RyaW5naWZpZWRPcHRpb25zKVxuICAgICAgKTtcbiAgICB9IDogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKFtdKVxuICApO1xuICBmdW5jdGlvbiB1c2VNZW50aW9uU3VnZ2VzdGlvbnMoc2VhcmNoKSB7XG4gICAgY29uc3Qgcm9vbSA9IHVzZVJvb20oKTtcbiAgICBjb25zdCBkZWJvdW5jZWRTZWFyY2ggPSB1c2VEZWJvdW5jZShzZWFyY2gsIDUwMCk7XG4gICAgY29uc3QgcmVzb2x2ZXJLZXkgPSBSZWFjdDMudXNlTWVtbyhcbiAgICAgICgpID0+IGRlYm91bmNlZFNlYXJjaCAhPT0gdm9pZCAwID8gc3RyaW5naWZ5Mih7IHRleHQ6IGRlYm91bmNlZFNlYXJjaCwgcm9vbUlkOiByb29tLmlkIH0pIDogbnVsbCxcbiAgICAgIFtkZWJvdW5jZWRTZWFyY2gsIHJvb20uaWRdXG4gICAgKTtcbiAgICBjb25zdCB7IGRhdGEgfSA9IHVzZUFzeW5jQ2FjaGUobWVudGlvblN1Z2dlc3Rpb25zQ2FjaGUsIHJlc29sdmVyS2V5LCB7XG4gICAgICBrZWVwUHJldmlvdXNEYXRhV2hpbGVMb2FkaW5nOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cbiAgY29uc3QgYnVuZGxlID0ge1xuICAgIFJvb21Db250ZXh0LFxuICAgIFJvb21Qcm92aWRlcjogUm9vbVByb3ZpZGVyT3V0ZXIsXG4gICAgdXNlUm9vbSxcbiAgICB1c2VTdGF0dXMsXG4gICAgdXNlQmF0Y2gsXG4gICAgdXNlQnJvYWRjYXN0RXZlbnQsXG4gICAgdXNlT3RoZXJzTGlzdGVuZXIsXG4gICAgdXNlTG9zdENvbm5lY3Rpb25MaXN0ZW5lcixcbiAgICB1c2VFcnJvckxpc3RlbmVyLFxuICAgIHVzZUV2ZW50TGlzdGVuZXIsXG4gICAgdXNlSGlzdG9yeSxcbiAgICB1c2VVbmRvLFxuICAgIHVzZVJlZG8sXG4gICAgdXNlQ2FuUmVkbyxcbiAgICB1c2VDYW5VbmRvLFxuICAgIC8vIFRoZXNlIGFyZSBqdXN0IGFsaWFzZXMuIFRoZSBwYXNzZWQtaW4ga2V5IHdpbGwgZGVmaW5lIHRoZWlyIHJldHVybiB2YWx1ZXMuXG4gICAgdXNlTGlzdDogdXNlTGVnYWN5S2V5LFxuICAgIHVzZU1hcDogdXNlTGVnYWN5S2V5LFxuICAgIHVzZU9iamVjdDogdXNlTGVnYWN5S2V5LFxuICAgIHVzZVN0b3JhZ2VSb290LFxuICAgIHVzZVN0b3JhZ2UsXG4gICAgdXNlU2VsZixcbiAgICB1c2VNeVByZXNlbmNlLFxuICAgIHVzZVVwZGF0ZU15UHJlc2VuY2UsXG4gICAgdXNlT3RoZXJzLFxuICAgIHVzZU90aGVyc01hcHBlZCxcbiAgICB1c2VPdGhlcnNDb25uZWN0aW9uSWRzLFxuICAgIHVzZU90aGVyLFxuICAgIHVzZU11dGF0aW9uLFxuICAgIHVzZVRocmVhZHMsXG4gICAgdXNlVXNlcixcbiAgICB1c2VDcmVhdGVUaHJlYWQsXG4gICAgdXNlRWRpdFRocmVhZE1ldGFkYXRhLFxuICAgIHVzZUNyZWF0ZUNvbW1lbnQsXG4gICAgdXNlRWRpdENvbW1lbnQsXG4gICAgdXNlRGVsZXRlQ29tbWVudCxcbiAgICB1c2VBZGRSZWFjdGlvbixcbiAgICB1c2VSZW1vdmVSZWFjdGlvbixcbiAgICBzdXNwZW5zZToge1xuICAgICAgUm9vbUNvbnRleHQsXG4gICAgICBSb29tUHJvdmlkZXI6IFJvb21Qcm92aWRlck91dGVyLFxuICAgICAgdXNlUm9vbSxcbiAgICAgIHVzZVN0YXR1cyxcbiAgICAgIHVzZUJhdGNoLFxuICAgICAgdXNlQnJvYWRjYXN0RXZlbnQsXG4gICAgICB1c2VPdGhlcnNMaXN0ZW5lcixcbiAgICAgIHVzZUxvc3RDb25uZWN0aW9uTGlzdGVuZXIsXG4gICAgICB1c2VFcnJvckxpc3RlbmVyLFxuICAgICAgdXNlRXZlbnRMaXN0ZW5lcixcbiAgICAgIHVzZUhpc3RvcnksXG4gICAgICB1c2VVbmRvLFxuICAgICAgdXNlUmVkbyxcbiAgICAgIHVzZUNhblJlZG8sXG4gICAgICB1c2VDYW5VbmRvLFxuICAgICAgLy8gTGVnYWN5IGhvb2tzXG4gICAgICB1c2VMaXN0OiB1c2VMZWdhY3lLZXlTdXNwZW5zZSxcbiAgICAgIHVzZU1hcDogdXNlTGVnYWN5S2V5U3VzcGVuc2UsXG4gICAgICB1c2VPYmplY3Q6IHVzZUxlZ2FjeUtleVN1c3BlbnNlLFxuICAgICAgdXNlU3RvcmFnZVJvb3QsXG4gICAgICB1c2VTdG9yYWdlOiB1c2VTdG9yYWdlU3VzcGVuc2UsXG4gICAgICB1c2VTZWxmOiB1c2VTZWxmU3VzcGVuc2UsXG4gICAgICB1c2VNeVByZXNlbmNlLFxuICAgICAgdXNlVXBkYXRlTXlQcmVzZW5jZSxcbiAgICAgIHVzZU90aGVyczogdXNlT3RoZXJzU3VzcGVuc2UsXG4gICAgICB1c2VPdGhlcnNNYXBwZWQ6IHVzZU90aGVyc01hcHBlZFN1c3BlbnNlLFxuICAgICAgdXNlT3RoZXJzQ29ubmVjdGlvbklkczogdXNlT3RoZXJzQ29ubmVjdGlvbklkc1N1c3BlbnNlLFxuICAgICAgdXNlT3RoZXI6IHVzZU90aGVyU3VzcGVuc2UsXG4gICAgICB1c2VNdXRhdGlvbixcbiAgICAgIHVzZVRocmVhZHM6IHVzZVRocmVhZHNTdXNwZW5zZSxcbiAgICAgIHVzZVVzZXI6IHVzZVVzZXJTdXNwZW5zZSxcbiAgICAgIHVzZUNyZWF0ZVRocmVhZCxcbiAgICAgIHVzZUVkaXRUaHJlYWRNZXRhZGF0YSxcbiAgICAgIHVzZUNyZWF0ZUNvbW1lbnQsXG4gICAgICB1c2VFZGl0Q29tbWVudCxcbiAgICAgIHVzZURlbGV0ZUNvbW1lbnQsXG4gICAgICB1c2VBZGRSZWFjdGlvbixcbiAgICAgIHVzZVJlbW92ZVJlYWN0aW9uXG4gICAgfVxuICB9O1xuICBjb25zdCBpbnRlcm5hbEJ1bmRsZSA9IHtcbiAgICAuLi5idW5kbGUsXG4gICAgaGFzUmVzb2x2ZU1lbnRpb25TdWdnZXN0aW9uczogcmVzb2x2ZU1lbnRpb25TdWdnZXN0aW9ucyAhPT0gdm9pZCAwLFxuICAgIHVzZU1lbnRpb25TdWdnZXN0aW9uc1xuICB9O1xuICByZXR1cm4gYnVuZGxlO1xufVxuXG4vLyBzcmMvaW5kZXgudHNcbmltcG9ydCB7IHNoYWxsb3cgYXMgc2hhbGxvdzIgfSBmcm9tIFwiQGxpdmVibG9ja3MvY2xpZW50XCI7XG5kZXRlY3REdXBlcyhQS0dfTkFNRSwgUEtHX1ZFUlNJT04sIFBLR19GT1JNQVQpO1xuZXhwb3J0IHtcbiAgQ2xpZW50U2lkZVN1c3BlbnNlLFxuICBjcmVhdGVSb29tQ29udGV4dCxcbiAgc2hhbGxvdzIgYXMgc2hhbGxvdyxcbiAgdXNlUm9vbUNvbnRleHRCdW5kbGVcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwIl0sIm5hbWVzIjpbImRldGVjdER1cGVzIiwiUEtHX05BTUUiLCJQS0dfVkVSU0lPTiIsIlBLR19GT1JNQVQiLCJSZWFjdCIsIkNsaWVudFNpZGVTdXNwZW5zZSIsInByb3BzIiwibW91bnRlZCIsInNldE1vdW50ZWQiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsImNyZWF0ZUVsZW1lbnQiLCJTdXNwZW5zZSIsImZhbGxiYWNrIiwiY2hpbGRyZW4iLCJzaGFsbG93IiwiY3JlYXRlQXN5bmNDYWNoZSIsImRlcHJlY2F0ZUlmIiwiZXJyb3JJZiIsImlzTGl2ZU5vZGUiLCJtYWtlRXZlbnRTb3VyY2UiLCJtYWtlRXZlbnRTb3VyY2UyIiwic3RyaW5naWZ5Iiwic3RyaW5naWZ5MiIsIlJlYWN0MyIsInVzZVN5bmNFeHRlcm5hbFN0b3JlV2l0aFNlbGVjdG9yIiwidXNlU3luY0V4dGVybmFsU3RvcmVXaXRoU2VsZWN0b3IyIiwiQ29tbWVudHNBcGlFcnJvciIsIm5hbm9pZCIsIlJlYWN0MiIsImNyZWF0ZUNvbnRleHQiLCJ1c2VDYWxsYmFjayIsInVzZUNhbGxiYWNrMyIsInVzZUNvbnRleHQiLCJ1c2VFZmZlY3QzIiwidXNlTWVtbyIsIkNyZWF0ZVRocmVhZEVycm9yIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsImNhdXNlIiwiY29udGV4dCIsIm5hbWUiLCJFZGl0VGhyZWFkTWV0YWRhdGFFcnJvciIsIkNyZWF0ZUNvbW1lbnRFcnJvciIsIkVkaXRDb21tZW50RXJyb3IiLCJEZWxldGVDb21tZW50RXJyb3IiLCJBZGRSZWFjdGlvbkVycm9yIiwiUmVtb3ZlUmVhY3Rpb25FcnJvciIsInVzZUNhbGxiYWNrMiIsInVzZUVmZmVjdDIiLCJ1c2VSZWYiLCJ1c2VSZWYyIiwidXNlU3luY0V4dGVybmFsU3RvcmUiLCJ1c2VJc0RvY3VtZW50VmlzaWJsZSIsImlzVmlzaWJsZSIsInN1YnNjcmliZSIsImdldFNuYXBzaG90Iiwib25TdG9yZUNoYW5nZSIsImRvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJpc0RvY3VtZW50RGVmaW5lZCIsInZpc2liaWxpdHlTdGF0ZSIsInVzZVN5bmNFeHRlcm5hbFN0b3JlMiIsInVzZUlzT25saW5lIiwiaXNPbmxpbmVSZWYiLCJzdWJzY3JpYmUyIiwiaGFuZGxlSXNPbmxpbmUiLCJjdXJyZW50IiwiaGFuZGxlSXNPZmZsaW5lIiwid2luZG93IiwiZ2V0U25hcHNob3QyIiwiaXNPbmxpbmUiLCJERUZBVUxUX0VSUk9SX1JFVFJZX0lOVEVSVkFMIiwiREVGQVVMVF9NQVhfRVJST1JfUkVUUllfQ09VTlQiLCJERUZBVUxUX0RFRFVQSU5HX0lOVEVSVkFMIiwidGltZXN0YW1wIiwidXNlUmV2YWxpZGF0ZUNhY2hlIiwibWFuYWdlciIsImZldGNoZXIiLCJvcHRpb25zIiwiZGVkdXBpbmdJbnRlcnZhbCIsImVycm9yUmV0cnlJbnRlcnZhbCIsImVycm9yUmV0cnlDb3VudCIsIl9yZXZhbGlkYXRlQ2FjaGUiLCJzaG91bGREZWR1cGUiLCJyZXRyeUNvdW50Iiwic3RhcnRBdCIsInNob3VsZFN0YXJ0UmVxdWVzdCIsImdldFJlcXVlc3QiLCJkZWxldGVBY3RpdmVSZXF1ZXN0IiwiYWN0aXZlUmVxdWVzdCIsInNldFJlcXVlc3QiLCJoYW5kbGVFcnJvciIsInRpbWVvdXQiLCJNYXRoIiwicmFuZG9tIiwic2V0VGltZW91dCIsIm5ld0RhdGEiLCJhY3RpdmVNdXRhdGlvbiIsImdldE11dGF0aW9uIiwic3RhcnRUaW1lIiwiZW5kVGltZSIsInNldENhY2hlIiwiZXJyIiwic2V0RXJyb3IiLCJyZXZhbGlkYXRlQ2FjaGUiLCJ1c2VNdXRhdGUiLCJtdXRhdGUiLCJkYXRhIiwiYmVmb3JlTXV0YXRpb25UaW1lc3RhbXAiLCJzZXRNdXRhdGlvbiIsImN1cnJlbnRDYWNoZSIsImdldENhY2hlIiwib3B0aW1pc3RpY0RhdGEiLCJlcnJvciIsIlRIUkVBRF9JRF9QUkVGSVgiLCJDT01NRU5UX0lEX1BSRUZJWCIsIlBPTExJTkdfSU5URVJWQUxfUkVBTFRJTUUiLCJQT0xMSU5HX0lOVEVSVkFMIiwiY3JlYXRlQ29tbWVudHNSb29tIiwiZXJyb3JFdmVudFNvdXJjZSIsInN0b3JlIiwiY3JlYXRlQ2xpZW50Q2FjaGVTdG9yZSIsIkZldGNoZXJDb250ZXh0IiwiUm9vbU1hbmFnZXJDb250ZXh0IiwiZ2V0VGhyZWFkcyIsInRocmVhZHMiLCJDb21tZW50c1Jvb21Qcm92aWRlciIsInJvb20iLCJjcmVhdGVSb29tUmV2YWxpZGF0aW9uTWFuYWdlciIsImlkIiwic2V0VGhyZWFkcyIsImdldFJldmFsaWRhdGlvbk1hbmFnZXJzIiwiZmlsdGVyIiwia2V5IiwiZ2V0UmVmZXJlbmNlQ291bnQiLCJtYXAiLCJfIiwibWFuYWdlcjIiLCJnZXRPcHRpb25zIiwicmVzcG9uc2VzIiwiUHJvbWlzZSIsImFsbCIsIm9wdGlvbiIsIkFycmF5IiwiZnJvbSIsIk1hcCIsImZsYXQiLCJ0aHJlYWQiLCJ2YWx1ZXMiLCJzdGF0dXMiLCJ1c2VTeW5jRXh0ZXJuYWxTdG9yZTMiLCJldmVudHMiLCJnZXRTdGF0dXMiLCJpc0RvY3VtZW50VmlzaWJsZSIsInJlZnJlc2hJbnRlcnZhbCIsImdldFBvbGxpbmdJbnRlcnZhbCIsInJldmFsaWRhdGlvblRpbWVySWQiLCJzY2hlZHVsZVJldmFsaWRhdGlvbiIsImdldEVycm9yIiwiZ2V0VG90YWxSZWZlcmVuY2VDb3VudCIsInRoZW4iLCJjbGVhclRpbWVvdXQiLCJoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlIiwidW5zdWJzY3JpYmUiLCJjb21tZW50cyIsIlByb3ZpZGVyIiwidmFsdWUiLCJ1c2VSb29tTWFuYWdlciIsImdldFVzZVRocmVhZHNSZXZhbGlkYXRpb25NYW5hZ2VyIiwicm9vbU1hbmFnZXIiLCJyZXZhbGlkYXRpb25NYW5hZ2VyIiwiZ2V0UmV2YWxpZGF0aW9uTWFuYWdlciIsInVzZVRocmVhZHNSZXZhbGlkYXRpb25NYW5hZ2VyIiwiY3JlYXRlVXNlVGhyZWFkc1JldmFsaWRhdGlvbk1hbmFnZXIiLCJzZXRSZXZhbGlkYXRpb25tYW5hZ2VyIiwidXNlVGhyZWFkc0ZldGNoZXIiLCJ1c2VUaHJlYWRzIiwicXVlcnkiLCJtZXRhZGF0YSIsImluY3JlbWVudFJlZmVyZW5jZUNvdW50IiwiZGVjcmVtZW50UmVmZXJlbmNlQ291bnQiLCJjYWNoZSIsIl91c2VUaHJlYWRzIiwidXNlVGhyZWFkc1N1c3BlbnNlIiwiaXNMb2FkaW5nIiwic3RhdGUiLCJnZXRJc0xvYWRpbmciLCJvcHRpb25zMiIsImZpbHRlcmVkIiwicm9vbUlkIiwidXNlRWRpdFRocmVhZE1ldGFkYXRhIiwicmV2YWxpZGF0ZSIsImVkaXRUaHJlYWRNZXRhZGF0YSIsInRocmVhZElkIiwiY2F0Y2giLCJoYW5kbGVDb21tZW50c0FwaUVycm9yIiwibm90aWZ5IiwidXNlQ3JlYXRlVGhyZWFkIiwiY3JlYXRlVGhyZWFkIiwiYm9keSIsImNyZWF0ZVRocmVhZElkIiwiY29tbWVudElkIiwiY3JlYXRlQ29tbWVudElkIiwibm93IiwiRGF0ZSIsIm5ld0NvbW1lbnQiLCJjcmVhdGVkQXQiLCJ0eXBlIiwidXNlcklkIiwiZ2V0Q3VycmVudFVzZXJJZCIsInJlYWN0aW9ucyIsIm5ld1RocmVhZCIsInVzZUNyZWF0ZUNvbW1lbnQiLCJjcmVhdGVDb21tZW50IiwiY29tbWVudCIsInVzZUVkaXRDb21tZW50IiwiZWRpdENvbW1lbnQiLCJlZGl0ZWRBdCIsInVzZURlbGV0ZUNvbW1lbnQiLCJkZWxldGVDb21tZW50IiwibmV3VGhyZWFkcyIsImRlbGV0ZWRBdCIsInNvbWUiLCJwdXNoIiwidXNlQWRkUmVhY3Rpb24iLCJlbW9qaSIsInJlYWN0aW9uIiwidXNlcnMiLCJhZGRSZWFjdGlvbiIsInVzZVJlbW92ZVJlYWN0aW9uIiwicmVhY3Rpb25JbmRleCIsImZpbmRJbmRleCIsInVzZXIiLCJsZW5ndGgiLCJzcGxpY2UiLCJyZW1vdmVSZWFjdGlvbiIsImNyZWF0ZU9wdGltaXN0aWNJZCIsInByZWZpeCIsInNlbGYiLCJnZXRTZWxmIiwibWVzc2FnZSIsImRldGFpbHMiLCJkZXRhaWxlZE1lc3NhZ2UiLCJzdWdnZXN0aW9uIiwiZG9jcyIsIkJvb2xlYW4iLCJqb2luIiwiY29uc29sZSIsInJlcXVlc3QiLCJtdXRhdGlvbiIsInJldmFsaWRhdGlvbk1hbmFnZXJCeU9wdGlvbnMiLCJyZWZlcmVuY2VDb3VudEJ5T3B0aW9ucyIsImtleXMiLCJnZXQiLCJkZWxldGUiLCJzb3J0ZWQiLCJzb3J0IiwiYSIsImIiLCJnZXRUaW1lIiwiY29uY2F0IiwiaW5mbyIsImVudHJpZXMiLCJzZXQiLCJyZWR1Y2UiLCJhY2MiLCJjb3VudCIsInRocmVhZHNFdmVudFNvdXJjZSIsImNhbGxiYWNrIiwic2V0SXNMb2FkaW5nIiwiaXNCcm93c2VyT25saW5lIiwiaXNSb29tQ29ubmVjdGVkIiwidXNlRWZmZWN0NCIsInVzZVJlZjMiLCJ1c2VTdGF0ZTIiLCJERUZBVUxUX0RFTEFZIiwidXNlRGVib3VuY2UiLCJkZWxheSIsImRlYm91bmNlZFZhbHVlIiwic2V0RGVib3VuY2VkVmFsdWUiLCJ1c2VDYWxsYmFjazQiLCJ1c2VFZmZlY3Q1IiwidXNlTWVtbzIiLCJ1c2VSZWY0IiwidXNlU3luY0V4dGVybmFsU3RvcmU0IiwidXNlU3RhdGUzIiwidXNlSW5pdGlhbCIsIklOSVRJQUxfQVNZTkNfU1RBVEUiLCJub29wIiwidXNlQXN5bmNDYWNoZSIsInByZXZpb3VzRGF0YSIsImZyb3plbk9wdGlvbnMiLCJjYWNoZUl0ZW0iLCJjYWNoZUl0ZW0yIiwiY3JlYXRlIiwiZ2V0U3RhdGUiLCJzdXNwZW5zZSIsInJlc29sdmUiLCJzdWJzY3JpYmVPbmNlIiwic3RhdGUyIiwia2VlcFByZXZpb3VzRGF0YVdoaWxlTG9hZGluZyIsInVzZUVmZmVjdDYiLCJ1c2VSZWY1IiwidXNlTGF0ZXN0IiwicmVmIiwidXNlUmVkdWNlciIsInVzZVJlcmVuZGVyIiwidXBkYXRlIiwieCIsIm5vb3AyIiwiaWRlbnRpdHkiLCJtaXNzaW5nX3Vuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwicmVhY3RWZXJzaW9uIiwiSlNPTiIsInN1cGVyZmx1b3VzX3Vuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwicyIsImdzIiwiZ3NzIiwiU1RBQkxFX0VNUFRZX0xJU1QiLCJPYmplY3QiLCJmcmVlemUiLCJhbHdheXNFbXB0eUxpc3QiLCJhbHdheXNOdWxsIiwibWFrZU11dGF0aW9uQ29udGV4dCIsImVycm1zZyIsInN0b3JhZ2UiLCJtdXRhYmxlUm9vdCIsImdldFN0b3JhZ2VTbmFwc2hvdCIsIm90aGVycyIsImdldE90aGVycyIsInNldE15UHJlc2VuY2UiLCJ1cGRhdGVQcmVzZW5jZSIsImhhc1dhcm5lZElmTm9SZXNvbHZlVXNlcnMiLCJ3YXJuSWZOb1Jlc29sdmVVc2VycyIsInVzZXJzQ2FjaGUiLCJwcm9jZXNzIiwid2FybiIsIkNvbnRleHRCdW5kbGUiLCJ1c2VSb29tQ29udGV4dEJ1bmRsZSIsImJ1bmRsZSIsImNyZWF0ZVJvb21Db250ZXh0IiwiY2xpZW50IiwiUm9vbUNvbnRleHQiLCJjb21tZW50c0Vycm9yRXZlbnRTb3VyY2UiLCJjb21tZW50c1Jvb20iLCJSb29tUHJvdmlkZXJPdXRlciIsInN0YWJsZUVudGVyUm9vbSIsImNhY2hlZCIsInJ2IiwiZW50ZXJSb29tIiwib3JpZ0xlYXZlIiwibGVhdmUiLCJSb29tUHJvdmlkZXJJbm5lciIsIm1ham9yUmVhY3RWZXJzaW9uIiwicGFyc2VJbnQiLCJ2ZXJzaW9uIiwib2xkUmVhY3RWZXJzaW9uIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJmcm96ZW5Qcm9wcyIsImluaXRpYWxQcmVzZW5jZSIsImluaXRpYWxTdG9yYWdlIiwiYXV0b0Nvbm5lY3QiLCJzaG91bGRJbml0aWFsbHlDb25uZWN0Iiwic2V0Um9vbUxlYXZlUGFpciIsInBhaXIiLCJyb29tMiIsImNvbm5lY3QiLCJpbnRlcm5hbEJ1bmRsZSIsImNvbm5lY3Rpb25JZFNlbGVjdG9yIiwiY29ubmVjdGlvbklkIiwidXNlUm9vbSIsInVzZVN0YXR1cyIsImdldFNlcnZlclNuYXBzaG90IiwidXNlTXlQcmVzZW5jZSIsIm15UHJlc2VuY2UiLCJnZXRQcmVzZW5jZSIsInByZXNlbmNlIiwic2V0UHJlc2VuY2UiLCJ1c2VVcGRhdGVNeVByZXNlbmNlIiwidXNlT3RoZXJzIiwic2VsZWN0b3IiLCJpc0VxdWFsIiwidXNlT3RoZXJzQ29ubmVjdGlvbklkcyIsInVzZU90aGVyc01hcHBlZCIsIml0ZW1TZWxlY3RvciIsIml0ZW1Jc0VxdWFsIiwid3JhcHBlZFNlbGVjdG9yIiwib3RoZXIiLCJ3cmFwcGVkSXNFcXVhbCIsImVxIiwiaXMiLCJldmVyeSIsImF0dXBsZSIsImluZGV4IiwiYnR1cGxlIiwiTk9UX0ZPVU5EIiwiU3ltYm9sIiwidXNlT3RoZXIiLCJvdGhlcjIiLCJmaW5kIiwib3RoZXIzIiwicHJldiIsImN1cnIiLCJ1c2VCcm9hZGNhc3RFdmVudCIsImV2ZW50Iiwic2hvdWxkUXVldWVFdmVudElmTm90UmVhZHkiLCJicm9hZGNhc3RFdmVudCIsInVzZU90aGVyc0xpc3RlbmVyIiwic2F2ZWRDYWxsYmFjayIsInVzZUxvc3RDb25uZWN0aW9uTGlzdGVuZXIiLCJsb3N0Q29ubmVjdGlvbiIsInVzZUVycm9yTGlzdGVuZXIiLCJlIiwidXNlRXZlbnRMaXN0ZW5lciIsImxpc3RlbmVyIiwiZXZlbnREYXRhIiwiY3VzdG9tRXZlbnQiLCJ1c2VTZWxmIiwibWF5YmVTZWxlY3RvciIsIm1lIiwidXNlTXV0YWJsZVN0b3JhZ2VSb290Iiwic3RvcmFnZURpZExvYWQiLCJ1c2VTdG9yYWdlUm9vdCIsInVzZUhpc3RvcnkiLCJoaXN0b3J5IiwidXNlVW5kbyIsInVuZG8iLCJ1c2VSZWRvIiwicmVkbyIsInVzZUNhblVuZG8iLCJjYW5VbmRvIiwidXNlQ2FuUmVkbyIsImNhblJlZG8iLCJ1c2VCYXRjaCIsImJhdGNoIiwidXNlTGVnYWN5S2V5Iiwicm9vdE9yTnVsbCIsInJlcmVuZGVyIiwicm9vdCIsInVuc3ViQ3VyciIsInN1YnNjcmliZVRvQ3VyciIsIm9uUm9vdENoYW5nZSIsIm5ld1ZhbHVlIiwidW5zdWJzY3JpYmVSb290IiwidXNlU3RvcmFnZSIsInJvb3RPck51bGwyIiwiaXNEZWVwIiwiaW1tIiwidG9JbW11dGFibGUiLCJlbnN1cmVOb3RTZXJ2ZXJTaWRlIiwidXNlU3VzcGVuZFVudGlsU3RvcmFnZUxvYWRlZCIsInJlcyIsInVzZVN1c3BlbmRVbnRpbFByZXNlbmNlTG9hZGVkIiwidXNlTXV0YXRpb24iLCJkZXBzIiwiYXJncyIsInVzZVN0b3JhZ2VTdXNwZW5zZSIsInVzZVNlbGZTdXNwZW5zZSIsInVzZU90aGVyc1N1c3BlbnNlIiwidXNlT3RoZXJzQ29ubmVjdGlvbklkc1N1c3BlbnNlIiwidXNlT3RoZXJzTWFwcGVkU3VzcGVuc2UiLCJ1c2VPdGhlclN1c3BlbnNlIiwidXNlTGVnYWN5S2V5U3VzcGVuc2UiLCJyZXNvbHZlVXNlcnMiLCJyZXNvbHZlTWVudGlvblN1Z2dlc3Rpb25zIiwic3RyaW5naWZpZWRPcHRpb25zIiwicGFyc2UiLCJ1c2VVc2VyIiwicmVzb2x2ZXJLZXkiLCJ1c2VySWRzIiwidXNlVXNlclN1c3BlbnNlIiwibWVudGlvblN1Z2dlc3Rpb25zQ2FjaGUiLCJ1c2VNZW50aW9uU3VnZ2VzdGlvbnMiLCJzZWFyY2giLCJkZWJvdW5jZWRTZWFyY2giLCJ0ZXh0IiwiUm9vbVByb3ZpZGVyIiwidXNlTGlzdCIsInVzZU1hcCIsInVzZU9iamVjdCIsImhhc1Jlc29sdmVNZW50aW9uU3VnZ2VzdGlvbnMiLCJzaGFsbG93MiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@liveblocks/react/dist/index.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@swc/helpers/esm/_tagged_template_literal.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@swc/helpers/esm/_tagged_template_literal.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _: function() { return /* binding */ _tagged_template_literal; },\n/* harmony export */   _tagged_template_literal: function() { return /* binding */ _tagged_template_literal; }\n/* harmony export */ });\nfunction _tagged_template_literal(strings, raw) {\n    if (!raw) raw = strings.slice(0);\n    return Object.freeze(Object.defineProperties(strings, {\n        raw: {\n            value: Object.freeze(raw)\n        }\n    }));\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ac3djL2hlbHBlcnMvZXNtL190YWdnZWRfdGVtcGxhdGVfbGl0ZXJhbC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFPLFNBQVNBLHlCQUF5QkMsT0FBTyxFQUFFQyxHQUFHO0lBQ2pELElBQUksQ0FBQ0EsS0FBS0EsTUFBTUQsUUFBUUUsS0FBSyxDQUFDO0lBRTlCLE9BQU9DLE9BQU9DLE1BQU0sQ0FBQ0QsT0FBT0UsZ0JBQWdCLENBQUNMLFNBQVM7UUFBRUMsS0FBSztZQUFFSyxPQUFPSCxPQUFPQyxNQUFNLENBQUNIO1FBQUs7SUFBRTtBQUMvRjtBQUN5QyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHN3Yy9oZWxwZXJzL2VzbS9fdGFnZ2VkX3RlbXBsYXRlX2xpdGVyYWwuanM/YmNlNiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gX3RhZ2dlZF90ZW1wbGF0ZV9saXRlcmFsKHN0cmluZ3MsIHJhdykge1xuICAgIGlmICghcmF3KSByYXcgPSBzdHJpbmdzLnNsaWNlKDApO1xuXG4gICAgcmV0dXJuIE9iamVjdC5mcmVlemUoT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoc3RyaW5ncywgeyByYXc6IHsgdmFsdWU6IE9iamVjdC5mcmVlemUocmF3KSB9IH0pKTtcbn1cbmV4cG9ydCB7IF90YWdnZWRfdGVtcGxhdGVfbGl0ZXJhbCBhcyBfIH07XG4iXSwibmFtZXMiOlsiX3RhZ2dlZF90ZW1wbGF0ZV9saXRlcmFsIiwic3RyaW5ncyIsInJhdyIsInNsaWNlIiwiT2JqZWN0IiwiZnJlZXplIiwiZGVmaW5lUHJvcGVydGllcyIsInZhbHVlIiwiXyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@swc/helpers/esm/_tagged_template_literal.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/nanoid/index.browser.js":
/*!**********************************************!*\
  !*** ./node_modules/nanoid/index.browser.js ***!
  \**********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   customAlphabet: function() { return /* binding */ customAlphabet; },\n/* harmony export */   customRandom: function() { return /* binding */ customRandom; },\n/* harmony export */   nanoid: function() { return /* binding */ nanoid; },\n/* harmony export */   random: function() { return /* binding */ random; },\n/* harmony export */   urlAlphabet: function() { return /* reexport safe */ _url_alphabet_index_js__WEBPACK_IMPORTED_MODULE_0__.urlAlphabet; }\n/* harmony export */ });\n/* harmony import */ var _url_alphabet_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./url-alphabet/index.js */ \"(app-pages-browser)/./node_modules/nanoid/url-alphabet/index.js\");\n\nlet random = (bytes)=>crypto.getRandomValues(new Uint8Array(bytes));\nlet customRandom = (alphabet, defaultSize, getRandom)=>{\n    let mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1;\n    let step = -~(1.6 * mask * defaultSize / alphabet.length);\n    return function() {\n        let size = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : defaultSize;\n        let id = \"\";\n        while(true){\n            let bytes = getRandom(step);\n            let j = step;\n            while(j--){\n                id += alphabet[bytes[j] & mask] || \"\";\n                if (id.length === size) return id;\n            }\n        }\n    };\n};\nlet customAlphabet = function(alphabet) {\n    let size = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 21;\n    return customRandom(alphabet, size, random);\n};\nlet nanoid = function() {\n    let size = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 21;\n    return crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte)=>{\n        byte &= 63;\n        if (byte < 36) {\n            id += byte.toString(36);\n        } else if (byte < 62) {\n            id += (byte - 26).toString(36).toUpperCase();\n        } else if (byte > 62) {\n            id += \"-\";\n        } else {\n            id += \"_\";\n        }\n        return id;\n    }, \"\");\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uYW5vaWQvaW5kZXguYnJvd3Nlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBcUQ7QUFDckQsSUFBSUMsU0FBU0MsQ0FBQUEsUUFBU0MsT0FBT0MsZUFBZSxDQUFDLElBQUlDLFdBQVdIO0FBQzVELElBQUlJLGVBQWUsQ0FBQ0MsVUFBVUMsYUFBYUM7SUFDekMsSUFBSUMsT0FBTyxDQUFDLEtBQU1DLEtBQUtDLEdBQUcsQ0FBQ0wsU0FBU00sTUFBTSxHQUFHLEtBQUtGLEtBQUtHLEdBQUcsSUFBSztJQUMvRCxJQUFJQyxPQUFPLENBQUMsQ0FBRSxPQUFPTCxPQUFPRixjQUFlRCxTQUFTTSxNQUFNO0lBQzFELE9BQU87WUFBQ0csd0VBQU9SO1FBQ2IsSUFBSVMsS0FBSztRQUNULE1BQU8sS0FBTTtZQUNYLElBQUlmLFFBQVFPLFVBQVVNO1lBQ3RCLElBQUlHLElBQUlIO1lBQ1IsTUFBT0csSUFBSztnQkFDVkQsTUFBTVYsUUFBUSxDQUFDTCxLQUFLLENBQUNnQixFQUFFLEdBQUdSLEtBQUssSUFBSTtnQkFDbkMsSUFBSU8sR0FBR0osTUFBTSxLQUFLRyxNQUFNLE9BQU9DO1lBQ2pDO1FBQ0Y7SUFDRjtBQUNGO0FBQ0EsSUFBSUUsaUJBQWlCLFNBQUNaO1FBQVVTLHdFQUFPO1dBQ3JDVixhQUFhQyxVQUFVUyxNQUFNZjs7QUFDL0IsSUFBSW1CLFNBQVM7UUFBQ0osd0VBQU87V0FDbkJiLE9BQU9DLGVBQWUsQ0FBQyxJQUFJQyxXQUFXVyxPQUFPSyxNQUFNLENBQUMsQ0FBQ0osSUFBSUs7UUFDdkRBLFFBQVE7UUFDUixJQUFJQSxPQUFPLElBQUk7WUFDYkwsTUFBTUssS0FBS0MsUUFBUSxDQUFDO1FBQ3RCLE9BQU8sSUFBSUQsT0FBTyxJQUFJO1lBQ3BCTCxNQUFNLENBQUNLLE9BQU8sRUFBQyxFQUFHQyxRQUFRLENBQUMsSUFBSUMsV0FBVztRQUM1QyxPQUFPLElBQUlGLE9BQU8sSUFBSTtZQUNwQkwsTUFBTTtRQUNSLE9BQU87WUFDTEEsTUFBTTtRQUNSO1FBQ0EsT0FBT0E7SUFDVCxHQUFHOztBQUMrRCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmFub2lkL2luZGV4LmJyb3dzZXIuanM/NjE1ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1cmxBbHBoYWJldCB9IGZyb20gJy4vdXJsLWFscGhhYmV0L2luZGV4LmpzJ1xubGV0IHJhbmRvbSA9IGJ5dGVzID0+IGNyeXB0by5nZXRSYW5kb21WYWx1ZXMobmV3IFVpbnQ4QXJyYXkoYnl0ZXMpKVxubGV0IGN1c3RvbVJhbmRvbSA9IChhbHBoYWJldCwgZGVmYXVsdFNpemUsIGdldFJhbmRvbSkgPT4ge1xuICBsZXQgbWFzayA9ICgyIDw8IChNYXRoLmxvZyhhbHBoYWJldC5sZW5ndGggLSAxKSAvIE1hdGguTE4yKSkgLSAxXG4gIGxldCBzdGVwID0gLX4oKDEuNiAqIG1hc2sgKiBkZWZhdWx0U2l6ZSkgLyBhbHBoYWJldC5sZW5ndGgpXG4gIHJldHVybiAoc2l6ZSA9IGRlZmF1bHRTaXplKSA9PiB7XG4gICAgbGV0IGlkID0gJydcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgbGV0IGJ5dGVzID0gZ2V0UmFuZG9tKHN0ZXApXG4gICAgICBsZXQgaiA9IHN0ZXBcbiAgICAgIHdoaWxlIChqLS0pIHtcbiAgICAgICAgaWQgKz0gYWxwaGFiZXRbYnl0ZXNbal0gJiBtYXNrXSB8fCAnJ1xuICAgICAgICBpZiAoaWQubGVuZ3RoID09PSBzaXplKSByZXR1cm4gaWRcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbmxldCBjdXN0b21BbHBoYWJldCA9IChhbHBoYWJldCwgc2l6ZSA9IDIxKSA9PlxuICBjdXN0b21SYW5kb20oYWxwaGFiZXQsIHNpemUsIHJhbmRvbSlcbmxldCBuYW5vaWQgPSAoc2l6ZSA9IDIxKSA9PlxuICBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKG5ldyBVaW50OEFycmF5KHNpemUpKS5yZWR1Y2UoKGlkLCBieXRlKSA9PiB7XG4gICAgYnl0ZSAmPSA2M1xuICAgIGlmIChieXRlIDwgMzYpIHtcbiAgICAgIGlkICs9IGJ5dGUudG9TdHJpbmcoMzYpXG4gICAgfSBlbHNlIGlmIChieXRlIDwgNjIpIHtcbiAgICAgIGlkICs9IChieXRlIC0gMjYpLnRvU3RyaW5nKDM2KS50b1VwcGVyQ2FzZSgpXG4gICAgfSBlbHNlIGlmIChieXRlID4gNjIpIHtcbiAgICAgIGlkICs9ICctJ1xuICAgIH0gZWxzZSB7XG4gICAgICBpZCArPSAnXydcbiAgICB9XG4gICAgcmV0dXJuIGlkXG4gIH0sICcnKVxuZXhwb3J0IHsgbmFub2lkLCBjdXN0b21BbHBoYWJldCwgY3VzdG9tUmFuZG9tLCB1cmxBbHBoYWJldCwgcmFuZG9tIH1cbiJdLCJuYW1lcyI6WyJ1cmxBbHBoYWJldCIsInJhbmRvbSIsImJ5dGVzIiwiY3J5cHRvIiwiZ2V0UmFuZG9tVmFsdWVzIiwiVWludDhBcnJheSIsImN1c3RvbVJhbmRvbSIsImFscGhhYmV0IiwiZGVmYXVsdFNpemUiLCJnZXRSYW5kb20iLCJtYXNrIiwiTWF0aCIsImxvZyIsImxlbmd0aCIsIkxOMiIsInN0ZXAiLCJzaXplIiwiaWQiLCJqIiwiY3VzdG9tQWxwaGFiZXQiLCJuYW5vaWQiLCJyZWR1Y2UiLCJieXRlIiwidG9TdHJpbmciLCJ0b1VwcGVyQ2FzZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/nanoid/index.browser.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/nanoid/url-alphabet/index.js":
/*!***************************************************!*\
  !*** ./node_modules/nanoid/url-alphabet/index.js ***!
  \***************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   urlAlphabet: function() { return /* binding */ urlAlphabet; }\n/* harmony export */ });\nlet urlAlphabet = \"useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict\";\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uYW5vaWQvdXJsLWFscGhhYmV0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxJQUFJQSxjQUNGO0FBQ29CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uYW5vaWQvdXJsLWFscGhhYmV0L2luZGV4LmpzPzE5MDQiXSwic291cmNlc0NvbnRlbnQiOlsibGV0IHVybEFscGhhYmV0ID1cbiAgJ3VzZWFuZG9tLTI2VDE5ODM0MFBYNzVweEpBQ0tWRVJZTUlOREJVU0hXT0xGX0dRWmJmZ2hqa2xxdnd5enJpY3QnXG5leHBvcnQgeyB1cmxBbHBoYWJldCB9XG4iXSwibmFtZXMiOlsidXJsQWxwaGFiZXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/nanoid/url-alphabet/index.js\n"));

/***/ })

});